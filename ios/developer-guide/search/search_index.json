{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction The JW Player SDK for iOS includes classes and methods to enable developers to add HLS and MP4 video playback functionality to iOS applications. The SDK also supports inclusion of VAST 3.0 video advertising in your applications, as well as reporting playback analytics to your JW Player dashboard, customizing video players using JW Player custom skins, and more. The product also includes a demo application that you can install on your iOS device to illustrate the functionality that the SDK provides. Oct 18, 2017 Free, Premium, and Platinum edition customers please note: the JW Player SDK for iOS will no longer be included in these editions beginning OCT 18th 2018 . This provides our Free, Premium, and Platinum edition customers one (1) year to find an alternative to our SDK. Enterprise customers will continue to have access to the JW Player SDK for iOS and will not be impacted. Please contact support+sdk@jwplayer.com if you have additional questions. Supported Features The JW Player SDK for iOS supports all the features of the JW Player Ads Edition for web, with the following exceptions : RTMP streaming Playback of FLV, Vorbis or WebM formats Google Analytics Adobe SiteCatalyst YouTube integration VPAID 1.0 ads Known issues We do not support Picture in Picture representation for ads played using Google IMA. Unintended behavior may appear during Fullscreen on iPad devices if upside down orientation is enabled. For optimal behavior please disable the upside down device orientation. For more information about JW Player Ads Edition features, see http://support.jwplayer.com/customer/portal/articles/1403727-what-is-jw-player- Intended Audience This guide assumes that you have the necessary Objective C or Swift and iOS development skills to build and compile advanced iOS applications using XCode. It also assumes that you are familiar with online media technologies such as Apple HTTP Live Streaming (HLS), MP4, and H.264/AAC.","title":"Introduction"},{"location":"#introduction","text":"The JW Player SDK for iOS includes classes and methods to enable developers to add HLS and MP4 video playback functionality to iOS applications. The SDK also supports inclusion of VAST 3.0 video advertising in your applications, as well as reporting playback analytics to your JW Player dashboard, customizing video players using JW Player custom skins, and more. The product also includes a demo application that you can install on your iOS device to illustrate the functionality that the SDK provides.","title":"Introduction"},{"location":"#oct-18-2017","text":"Free, Premium, and Platinum edition customers please note: the JW Player SDK for iOS will no longer be included in these editions beginning OCT 18th 2018 . This provides our Free, Premium, and Platinum edition customers one (1) year to find an alternative to our SDK. Enterprise customers will continue to have access to the JW Player SDK for iOS and will not be impacted. Please contact support+sdk@jwplayer.com if you have additional questions.","title":"Oct 18, 2017"},{"location":"#supported-features","text":"The JW Player SDK for iOS supports all the features of the JW Player Ads Edition for web, with the following exceptions : RTMP streaming Playback of FLV, Vorbis or WebM formats Google Analytics Adobe SiteCatalyst YouTube integration VPAID 1.0 ads","title":"Supported Features"},{"location":"#known-issues","text":"We do not support Picture in Picture representation for ads played using Google IMA. Unintended behavior may appear during Fullscreen on iPad devices if upside down orientation is enabled. For optimal behavior please disable the upside down device orientation. For more information about JW Player Ads Edition features, see http://support.jwplayer.com/customer/portal/articles/1403727-what-is-jw-player-","title":"Known issues"},{"location":"#intended-audience","text":"This guide assumes that you have the necessary Objective C or Swift and iOS development skills to build and compile advanced iOS applications using XCode. It also assumes that you are familiar with online media technologies such as Apple HTTP Live Streaming (HLS), MP4, and H.264/AAC.","title":"Intended Audience"},{"location":"2x-redirect/","text":"","title":"2.x Documentation"},{"location":"analytics/","text":"analytics.md","title":"Analytics"},{"location":"about/license/","text":"Licensing The JW Player SDK for iOS requires a license to activate and use. Please contact our team for more information, questions, or start a free trial. JW Player terms of service can found here: http://www.jwplayer.com/tos Oct 18, 2017 Free, Premium, and Platinum edition customers please note: the JW Player SDK for iOS will no longer be included in these editions beginning OCT 18th 2018 . This provides our Free, Premium, and Platinum edition customers one (1) year to find an alternative to our SDK. Enterprise customers will continue to have access to the JW Player SDK for iOS and will not be impacted. Please contact support+sdk@jwplayer.com if you have additional questions.","title":"License"},{"location":"about/license/#licensing","text":"The JW Player SDK for iOS requires a license to activate and use. Please contact our team for more information, questions, or start a free trial. JW Player terms of service can found here: http://www.jwplayer.com/tos","title":"Licensing"},{"location":"about/license/#oct-18-2017","text":"Free, Premium, and Platinum edition customers please note: the JW Player SDK for iOS will no longer be included in these editions beginning OCT 18th 2018 . This provides our Free, Premium, and Platinum edition customers one (1) year to find an alternative to our SDK. Enterprise customers will continue to have access to the JW Player SDK for iOS and will not be impacted. Please contact support+sdk@jwplayer.com if you have additional questions.","title":"Oct 18, 2017"},{"location":"about/release-notes/","text":"JW SDK for iOS Release Notes Major Version Releases Version 3.1.0 (Aug 23, 2018) Version 3.0.0 (Jul 2, 2018) Version 2.9.0 (Jun 18, 2018) Version 2.8.0 (Dec 11, 2017) Version 2.7.0 (Feb 23, 2017) Version 2.6.0 (Dec 12, 2016) Version 2.5.0 (Sep 14, 2016) Version 2.4.0 (Jun 29, 2016) Version 2.3.0 (Jun 06, 2016) Version 2.2.0 (Apr 08, 2016) Version 2.1.0 (Feb 02, 2016) Version 2.0.33 (Dec 01, 2015) Version 2.0.32 (Nov 17, 2015) Version 1.x Version 3.1.3 (Build #sdk_build_number# - #date_short_month#) Bug Fixes Fixed an issue that prevents seek from accepting a negative value during DVR stream playback. Fixed an issue that shows an incorrect, current position during DVR stream playback. Version 3.1.2 (Build 72 - Sep 19, 2018) Bug Fixes Fixed an issue where an echo might be heard when the playback rate is less than 1. Fixed an issue where player size is not considered when choosing a VAST ad media. Fixed an issue where UIWebView baseUrl creates a URL with a file:// protocol, if relative protocol was used. Fixed an issue where MPNowPlayingInfoCenter has an empty title if config.title is empty. Version 3.1.1 (Build 71 - Sep 13, 2018) Enhancements We made the JWPlayerError class public. To be able to use this class in Swift, import this class into the Bridging Header file. Version 3.1.0 (Build 70 - Aug 23, 2018) Features As another step towards parity between our native SDKs and the web player, we have added the ability to set up custom playback rates for your media. Please refer to the sample in this documentation section . Version 3.0.1 (Build 69 - Jul 25, 2018) Bug Fixes Fixed an issue where ad pods would not be shown on a seek bar if the ad client is FreeWheel Fixed an issue where playback would not automatically play after pre-roll if the ad client is FreeWheel Fixed an issue where midrolls would not play if they were set up using percents or timestamp and the ad client is FreeWheel Version 3.0.0 (Build 63 - Jul 2, 2018) We are excited to announce JW Player SDK 3.0 for iOS. This release updates the SDK to JW8 and leverages its new UI UX, optimization, and advertising enhancements to engage your audiences intelligently and monetize your content. In the coming months we will deploy more JW8 features into the JW Player SDKs for iOS Android, so stay tuned! Please refer to this important 3.x migration guide for iOS to update your current application from version 2.x to 3.x. This guide includes important information about API changes, new features callbacks, and will help your team with the transition process. You may use CocoaPods to update to SDK 3.x, or you can download the SDK 3 packages and new 3.x license keys from the Publish - Tools section of your JW Player Dashboard. Please note that version 3 of the SDKs are available to our Enterprise edition customers, and require new license keys because 2.x license keys will not work. Features Support for new advertising rules, including timeBetweenAds, startOnSeek, frequency, and startOn. Please refer to our Ad Rules Reference for details on how to use them. Version 2.9.1 (Build 51 - Jun 25, 2018) Bug Fixes Fixed an issue where the app could crash if FreeWheel returned an empty ad tag (undocumented by FreeWheel) Version 2.9.0 (Build 50 - Jun 18, 2018) Features We have integrated support for the FreeWheel ad-serving platform. Configure your FreeWheel Ad Manager settings in our new FreeWheel ad client to serve pre-rolls and mid-rolls with other features such as ad-skip and ad-click. Please refer to the new FreeWheel advertising section in our developer guide documentation to get started. Version 2.8.11 (Build 49 - May 21, 2018) Bug Fixes Fixed an issue where the onControlBarVisible event would trigger for Ad related controls Version 2.8.10 (Build 48 - May 4, 2018) Bug Fixes Fixed an issue where the app would crash if there was a problem with local player related files creation Enhancements Upgraded to support Google IMA SDK v3.7.0 Version 2.8.9 (Build 47 - Apr 16, 2018) Bug Fixes Fixed a VAST issue where content would replay after completion of post-roll Fixed an issue where skipping a VMAP ad did not proceed to the content Version 2.8.8 (Build 46 - Mar 28, 2018) Bug Fixes Fixed an issue where media playback would stop when the app was sent to the background Fixed an issue where NowPlayingInfo (NPI) Center would not display the media's title meta data, and NPI controls did not work Version 2.8.7 (Build 45 - Mar 20, 2018) Bug Fixes Fixed an HLS in-manifest webVTT captions issue where the list of available tracks was not showing when CC button was selected Version 2.8.6 (Build 44 - Feb 27, 2018) Bug Fixes IMPORTANT UPDATE Apple recently tightened their iOS app store submission restrictions. They started to flag the use of non-public APIs and rejecting apps using them - even if these apps were accepted previously without issue . Our team performed a full code audit and this release removes all use of non-public APIs. As a result, we temporarily removed picture-in-picture (PiP) for iPad and background audio support. We will work towards adding these features back in a subsequent release. We strongly recommend all users to update to this version to avoid this issue. If you're upgrading from SDK 2.7.x please refer to the Migration Guide Version 2.8.5 (Build 43 - Feb 09, 2018) Bug Fixes Fixed minor bugs Version 2.8.4 (Build 42 - Feb 07, 2018) Bug Fixes Fixed an issue where a 'Library not loaded' error message would appear during an Ad Hoc build Fixed an issue where after a VMAP ad error, the player wouldn't gracefully recover and resume media playback Version 2.8.3 (Build 41 - Jan 23, 2018) Bug Fixes Fixed an issue where after a VAST ad error, the player wouldn't gracefully recover and resume media playback Version 2.8.2 (Build 39 - Jan 09, 2018) Bug Fixes Fixed an issue where SDKVersion returned an incorrect value Version 2.8.1 (Build 38 - Dec 20, 2017) Bug Fixes Fixed an issue where Chromecast and IMA libraries were required to build the app. Reminder: A migration is required from 2.7.x versions, please refer to the Migration Guide . Version 2.8.0 (Build 36 - Dec 11, 2017) Enhancements JW Player SDK for iOS is now a Dynamic Library and is no longer static. A migration is required from 2.7.x versions, please refer to the Migration Guide . Please note this version contains a known issue: Chromecast and IMA libraries are required to build the app. We recommend version 2.8.1. Version 2.7.11 (Build 35 - Nov 17, 2017) Enhancements Renamed symbol _PLAYABLE_KEY to avoid conflicts with other exposed var / consts / symbols that may have the same name Bug Fixes Fixed an issue where the onControlBarVisible delegate was not called when the player status is \"paused\" Fixed an issue where playbackPosition() always reported 0 when called immediately after onSeeked() Fixed an issue where two playlist items having an identical video file would cause the player to buffer indefinitely on the second item Version 2.7.10 (Build 34 - Nov 15, 2017) Features All CDN assets, including JS files, are now packaged with the SDK and loaded locally if the CDN is not available Bug Fixes Fixed an issue where the player did not resize correctly in fullscreen/ landscape view for the iPhone X simulator Fixed an issue in CocoaPods where the player controls would appear after an IMA preroll even if config.controls was set to false Version 2.7.9 (Build 32 - Oct 03, 2017) Bug Fixes Fixed all remaining XCode 9 threading warnings Fixed an issue playing ad tags pointing to media addresses that do not have a URI scheme Version 2.7.8 (Build 31 - Sep 19, 2017) Bug Fixes Prevents UIKit instance methods from being called on a background thread when the player is deallocated Version 2.7.7 (Build 30 - Sep 15, 2017) Features onAdImpression: now includes click-through URL parameter Enhancements Upgraded SDK to use JW Player 7.12.6 Version 2.7.6 (Build 29 - Aug 4, 2017) Enhancements Enabled seeking in DVR streams using the JWPlayerController seek: method Version 2.7.5 (Build 28 - July 21, 2017) Features Added a new onFullscreenRequested() delegate callback to trigger when fullscreen is requested, but before the animation takes place Enhancements Upgraded SDK to use JW Player 7.12.1 Bug Fixes Fixed an issue where the CC options would not display when replaying a video Fixed an issue where the first frame of media flashes right before an IMA pre-roll ad played Fixed an issue where the player would freeze after you seeked past two IMA ads in a video Version 2.7.4 (Build 27 - Jun 16, 2017) Enhancements Upgraded SDK to use JW Player 7.11.3 Bug Fixes Fixed an issue where OnControlbarVisibilityChanged fired when the player was in buffering state and inaccurately reported as true Version 2.7.3 (Build 26 - Apr 7, 2017) Features New onAdschedule: callback for the VAST ad client that provides detailed information of a VMAP ad schedule. Enhancements Upgraded SDK to use JW Player 7.10.4 onAdImpression: now includes VMAP ad schedule details Bug Fixes Fixed an issue where VMAP breakstart/breakend callbacks would not fire when no ad source was present. Version 2.7.2 (Build 25 - Mar 24, 2017) Bug Fixes Fixes bug where a file is downloaded on the main thread Version 2.7.1 (Build 24 - March 10, 2017) Bug Fixes Fixes bug where the onAdSkipped and onAdMeta delegate methods would not fire Version 2.7.0 (Build 23 - Feb 23, 2017) New Features Added the ability to programmatically setup the JW Player license key in JWPlayerController. Useful for developers who integrate our framework into their own and want to obfuscate the license key from users. Added bitRateUpperBound property to set the maximum bitrate level during automatic quality switching. Useful in limiting bandwidth consumption for viewers. Enhancements Adaptive bitrate switching for HLS streams will now be managed directly by AV Player and will behave like \"auto\". The HD button in this case will not display and manual quality switching is no longer supported. As a result, this resolves issues regarding multiple audio and caption tracks not behaving correctly for HLS streams and improves overall bitrate switching behavior. Version 2.6.8 (Build 19 - Feb 21, 2017) Bug Fixes Fixes bug where controlBarIsVisible did not fire during vast ads Fixes bug where calling load: during a VAST ad does not load the requested file at time 0 Fixes bug where preload would occasionally load the same file twice Fixes bug where occasionally buffer icon would stay on screen during playback Enhancements Supports Google IMA SDK version 3.3.1 Version 2.6.7 (Build 18 - Feb 17, 2017) Bug Fixes Fixes bug where side loaded webVtt and SRT captions do not display Version 2.6.6 (Build 17 - Feb 7, 2017) New Features Added support for \"preload\" where media is preloaded after the player is setup but before the play button is pressed. This allows JW Player to fetch media information prior to playback and enhances perceived performance by users. The \"mediafile\" string is now returned in the onAdImpression() delegate, which represents the currently playing media item. Also returns a boolean indicating if ad is linear Version 2.6.5 (Build 16 - Jan 31, 2017) Features Added support for variable rate playback. Dynamically adjust the playback speed of the media to be slower or faster, for both forward and reverse playback. Enabled pausing and resuming IMA Ad playback with the Player's playback API Added support from the Google IMA SDK to specify the language to be used to localize ads Enhancements Supports Google ChromeCast version 3.3.0.11401 Bug Fixes Fixed bug where playlist containing vast pre-rolls would occasionally load next playlist item at the wrong start time Fixed an out of bounds crash that would intermittently occur when loading a CSS Skin Version 2.6.4 (Build 15 - Jan 24, 2017) Bug Fixes Fixed bug where replaying a stream with a vast pre-roll would jump to the end after the ad completed Fixed IMA crash caused when switching between view controllers Version 2.6.3 (Build 14 - Jan 12, 2017) Bug Fixes Fixed firing of VMAP breakstart tracking event Version 2.6.2 (Build 12 - Jan 12, 2017) Bug Fixes Fixed bug where HD button would not display Fixed a crash when a poster image was set that returned a 404 status Fixed a bug where the onAdImpression delegate method would not get called when playing vast ads that did not contain wrappers Fixed a bug where the onAdImpression delegate method would incorrectly indicate \"preroll\" for some VAST ads played using the Google IMA ad client Fixed a bug preventing ATS compliance Version 2.6.1 (Build 11 - Dec. 22, 2016) Features Added onControlBarVisible callback that indicates when the player control bar's visibility changes. Sync your custom UI elements to display hide with the player control bar. Version 2.6.0 (Build 9 - Dec. 12, 2016) Features Added onAdCompanion() callback for VAST client that returns companion ad data Enhancements Upgraded SDKs to use JW Player 7.8 General improvements to SDK player UI More detailed error messaging to assist debugging onMeta() now includes bitrate, frame rate, dropped frames information Enhanced general fullscreen and rotation UI and behavior Improved accuracy of state changes when JWPlayerStateChangedNotification is fired Bug Fixes Fixed visual transitions to and from full screen, and on rotations for iPad devices Fixed an issue that would cause the player to exit fullscreen on a 180 degree rotation Fixed an issue where calling Load() during an IMA Ad does not dismiss the ad Fixed an issue where VPAID ads would start in Fullscreen Version 2.5.8 (Build 99 - Nov. 30, 2016) Bug Fixes Fixed a bug where a crash would occur during the deallocation of a JWPlayerController that had been playing ads with the Google IMA client Fixed a bug where occasionally a crash would occur during changes in Network Connectivity Version 2.5.7 (Build 97 - Nov. 22, 2016) Bug Fixes Fixed a bug where some JS and CSS files were downloading on the main thread Fixed a bug where setting a file and a playlist in the JWConfig would result in the playlist being ignored Version 2.5.6 (Build 96 - Nov. 8, 2016) Bug Fixes Fixed a bug where Ads rendered using the Google IMA client would not render on multi-source streams. Version 2.5.5 (Build 95 - Oct. 31, 2016) Bug Fixes Fixed a bug where the video would automatically replay after a Google IMA post roll FIxed a bug where seeking while offline would display the offline poster even though the video would continue playing in the background Fixed a bug preventing offline playback of local files Fixed a bug where setting the JWPlayerController pictureInPictureDisabled property to YES would not prevent entering Picture in Picture when exiting the app while in fullscreen Fixed a bug preventing playback of AES encrypted streams after switching stream qualities Fixed a bug preventing quality switching when reproducing DVR streams Fixed a bug preventing AutoStart after calling the JWPlayerController's load: method Fixed a bug where IMA VMAP post rolls would not replay after replaying the stream Fixed a bug where occasionally MP4 and MP3 streams would restart after seeking many consecutive times Enhancements Compatible with Google IMA SDK version 3.2.1 Version 2.5.4 (Build 90 - Oct. 3, 2016) Bug Fixes Fixed a bug in iOS 10 where rotating to landscape on a view controller supporting all interface orientations (UIInterfaceOrientationMaskAll) with the player's forceFullScreenOnLandscape property set to True would display an incorrect fullscreen orientation Version 2.5.3 (Build 87 - Sep. 22, 2016) Bug Fixes Fixed an issue where uploading to the App Store without the Google IMA or Google Cast SDKs would result in a rejection Version 2.5.2 (Build 86 - Sep. 22, 2016) Bug Fixes Fixed an issue where certain enums were not compatible with Swift Version 2.5.1 (Build 84 - Sep. 21, 2016) Bug Fixes Fixed an issue where certain HLS streams wouldn't be recognized correctly by the SDK Fixed an issue in playlists where the HD button would appear even if some items in the playlist did not support multiple qualities Fixed an issue where the HD button wouldn't appear after 'load:' was called Fixed an issue where ads with a '#' in the URL would produce an error Enhancements Enums are now compatible with Swift Version 2.5.0 (Build 83 - Sep. 14, 2016) New Features Added support for Related Feeds player setup options Added support for custom HTTP headers for video streams (including signed cookies or tokens) via AVURLAsset Options dictionary New and updated delegate callbacks (eg. onAdStarted) for parity with HTML5 player Added a media ID property to JWPlaylistItem to allow developers to specify the JW Media ID for an externally hosted media file in the JW Platform in order to track analytics for that video Enhancements Compatible with iOS 10 Improved onTime to ping every 100 ms Poster image for lock screen is now fetched on the background thread The player now detects the \"Video Override\" option from the users's \"General - Accessibiity - Subtitles Captioning - Style\" settings to determine whether to have the video settings override the user's accessibility settings Bug Fixes Fixed an issue where setting an adBreak tag with setter instead of using AdBreak's initWithTag custom initializer caused a crash Fixed an issue where toggling displayLockScreenControls did not update correctly Fixed an issue for multiple IMA midrolls where if one midroll should fail and return an ad error, the next scheduled midroll would erroneously play out of turn instead of resuming media playback Fixed an issue where playlists with IMA or VAST ads would erroneously display \"Live Stream\" in the status bar after ending Fixed an issue where captions from the media were displayed during ad playback Version 2.4.5 (Build 79 - Sep. 6, 2016) Enhancements Optimized asset loading to be asynchronous on the background thread Bug Fixes Fixed an issue where if several instances of the player were created concurrently, only the last player instantiated would play Version 2.4.4 (Build 77 - Aug. 26, 2016) Bug Fixes Fixed an issue where unsupported/incompatible ad creative file types were not being ignored (e.g. Flash ads) Version 2.4.3 (Build 74 - Aug. 15, 2016) Bug Fixes Fixed an issue where a crash would occur upon player deallocation on iOS 8 Version 2.4.2 (Build 73 - Aug. 10, 2016) New Features Player specific volume control Known Issues Volume control does not apply to Google IMA ads or casting at this time Version 2.4.1 (Build 58 - Jul. 08, 2016) Bug Fixes Fixed an issue where OnAdPlay() was not fired for IMA ads when ad resumed Fixed an issue where VAST ads would loop if called during playback of a DRM encrypted file Fixed an issue where the player incorrectly shows a \"play\" state when returning from background Fixed an issue where IMA ads didn't play in playlists if the IMA tag contained percent-encoding within the optional \"cust_params\" query string parameter. Fixed an issue where adClick would open Safari even if openSafariOnAdClick was set to \"NO\" Fixed an issue where the ad would continue playing in the background after an ad click opens Safari Fixed an issue where a paused video would resume playing when app sent to background Version 2.4.0 (Build 56 - Jun. 29, 2016) New Features Playback of HLS streams protected with Apple FairPlay Streaming (FPS) is now supported Free, Premium, and Platinum license editions are now supported Ad impression limits are now checked when ad playback is requested in order to prevent ad impression overage charges Version 2.3.2 (Build 55 - Jun. 27, 2016) Bug Fixes Fixed an issue where Google IMA prerolls would not play in simulator Fixed an issue where Google IMA prerolls would not play in certain devices Fixed an issue where Google IMA VMAP midrolls would not play Version 2.3.1 (Build 53 - Jun. 08, 2016) Bug Fixes Fixed an issue where the onError callback was not getting called Fixed an issue preventing bit coding for cocoapods Version 2.3.0 (Build 52 - Jun. 06, 2016) New Features VPAID 2.0 Support Audio playback control for app in background Bug Fixes Fixed an issue where IMA ad callback events were fired twice Fixed an issue where specifying a title would cause a crash when attempting to cast to certain devices Fixed an issue where reload screen would disapper after locking and unlocking device Fixed a general casting issue where casting to certain devices would fail Fixed an issue where the letter \"x\" would appear in front of the default quality level label if attribute name was undefined Fixed an issue where the playerController returned the playback position from the previous item during the first second of playback when a new file was loaded Fixed an issue where some audio MP3 ID3 metadata would cause a crash Fixed an issue where loadConfig was not working Version 2.2.1 (Build 50 - Apr. 27, 2016) Bug Fixes Fixed issue where when submitting to Apple App Store, iTunes would complain about using private APIs Fixed issue where sometimes buffering animation would not appear at video start Fixed issue where background sound would be disabled Enabled bit coding Version 2.2.0 (Build 49 - Apr. 08, 2016) New Features Apple AirPlay Support Google Chromecast Support Local Media File Playback (Offline) CEA-608 Captions in HLS HLS In-Manifest WebVTT subtitles Bug Fixes Fixed an issue where VOD videos would briefly display Live Broadcast if the duration of the video couldn't be calculated Version 2.1.0 (Build 36 - Feb. 02, 2016) New Features HLS Live DVR ID3 Timed Metadata Picture in Picture (iOS 9 iPad only) HLS Multiple Track Audio Bug Fixes Fixed issue where video did not restart from beginning after 'repeat' button was tapped Known Issues iPads will display in-band text tracks (captions) within the m3u8 manifest if they exist and cannot be turned off Version 2.0.33 (Build 33 - Dec. 01, 2015) Bug Fixes Fixed an issue where the rotation observer wasn't properly updated if multiple players were created, resulting in a crash Version 2.0.32 (Build 32 - Nov. 17, 2015) 2.0 marks a significant step toward our goal of One JW Player . The developer-facing APIs in the SDK are native iOS classes (Objective-C/Swift), but they are wrappers around the newest version of our flagship JW Player 7 JavaScript/HTML5 library (jwplayer.js), powering new player customization options like CSS skinning and a DPI-responsive player UI optimized for mobile. Check out our blog post to learn more about our \"One JW Player\" vision. New Features Updated to JW Player 7 CSS Skinning Model DPI-responsive player UI with mobile optimization Devices with a smaller viewing area will now see a more mobile-friendly control bar UI. Font size has been increased and secondary control bar elements have been relocated to an overflow menu New API Calls getBuffer getVisualQuality get/set Controls stop getSafeRegion Dynamically load media sources within existing player for playlists or videos Captions styling from iOS Accessibility options Offline Error Handling Custom Messaging Advertising Non-Linear Ads (Overlays) Ad Tag variable support JW SDK for iOS available via CocoaPods Supports 608 captions and in-line captions Supports accessibility styling for both 608 captions and in-line captions Supports custom styling for in-line captions Bug Fixes Fixed bug that prevented full screen on rotation when player view is added to a view that is not the root view of the presented view controller Fixed bug where MP3 MP4 media loaded slower than expected Fixed bug where the player would crash the app when opened for the first time while offline Known Issues Playlist icon does not display on the control bar on some phones Ad Message will occasionally span 2 lines on some phones For Google IMA prerolls, sometimes the media will appear briefly before the preroll begins Calling playAd after a VMAP has been loaded using Google IMA will cause the completed ads to replay when the requested ad finishes reproducing When reproducing a stream containing multiple qualities, if the viewer switches from a quality that contains embedded captions (608 captions or in-line captions) to a quality that does not contain embedded captions, the Closed Caption button might not be removed from the control bar. Toggling the Closed Caption button will have no effect Occasionally toggling play/pause on lock screen will cause playback information to briefly disappear and then reappear Version 1.x Release Notes prior to JW SDK version 2.0 (1.x) are available in the readme.txt file included in the 1.x download packages","title":"Release Notes"},{"location":"about/release-notes/#jw-sdk-for-ios-release-notes","text":"","title":"JW SDK for iOS Release Notes"},{"location":"about/release-notes/#major-version-releases","text":"Version 3.1.0 (Aug 23, 2018) Version 3.0.0 (Jul 2, 2018) Version 2.9.0 (Jun 18, 2018) Version 2.8.0 (Dec 11, 2017) Version 2.7.0 (Feb 23, 2017) Version 2.6.0 (Dec 12, 2016) Version 2.5.0 (Sep 14, 2016) Version 2.4.0 (Jun 29, 2016) Version 2.3.0 (Jun 06, 2016) Version 2.2.0 (Apr 08, 2016) Version 2.1.0 (Feb 02, 2016) Version 2.0.33 (Dec 01, 2015) Version 2.0.32 (Nov 17, 2015) Version 1.x","title":"Major Version Releases"},{"location":"about/release-notes/#version-313-build-sdk_build_number-date_short_month","text":"","title":"Version 3.1.3 (Build #sdk_build_number# - #date_short_month#)"},{"location":"about/release-notes/#bug-fixes","text":"Fixed an issue that prevents seek from accepting a negative value during DVR stream playback. Fixed an issue that shows an incorrect, current position during DVR stream playback.","title":"Bug Fixes"},{"location":"about/release-notes/#version-312-build-72-sep-19-2018","text":"","title":"Version 3.1.2 (Build 72 - Sep 19, 2018)"},{"location":"about/release-notes/#bug-fixes_1","text":"Fixed an issue where an echo might be heard when the playback rate is less than 1. Fixed an issue where player size is not considered when choosing a VAST ad media. Fixed an issue where UIWebView baseUrl creates a URL with a file:// protocol, if relative protocol was used. Fixed an issue where MPNowPlayingInfoCenter has an empty title if config.title is empty.","title":"Bug Fixes"},{"location":"about/release-notes/#version-311-build-71-sep-13-2018","text":"","title":"Version 3.1.1 (Build 71 - Sep 13, 2018)"},{"location":"about/release-notes/#enhancements","text":"We made the JWPlayerError class public. To be able to use this class in Swift, import this class into the Bridging Header file.","title":"Enhancements"},{"location":"about/release-notes/#version-310-build-70-aug-23-2018","text":"","title":"Version 3.1.0 (Build 70 - Aug 23, 2018)"},{"location":"about/release-notes/#features","text":"As another step towards parity between our native SDKs and the web player, we have added the ability to set up custom playback rates for your media. Please refer to the sample in this documentation section .","title":"Features"},{"location":"about/release-notes/#version-301-build-69-jul-25-2018","text":"","title":"Version 3.0.1 (Build 69 - Jul 25, 2018)"},{"location":"about/release-notes/#bug-fixes_2","text":"Fixed an issue where ad pods would not be shown on a seek bar if the ad client is FreeWheel Fixed an issue where playback would not automatically play after pre-roll if the ad client is FreeWheel Fixed an issue where midrolls would not play if they were set up using percents or timestamp and the ad client is FreeWheel","title":"Bug Fixes"},{"location":"about/release-notes/#version-300-build-63-jul-2-2018","text":"We are excited to announce JW Player SDK 3.0 for iOS. This release updates the SDK to JW8 and leverages its new UI UX, optimization, and advertising enhancements to engage your audiences intelligently and monetize your content. In the coming months we will deploy more JW8 features into the JW Player SDKs for iOS Android, so stay tuned! Please refer to this important 3.x migration guide for iOS to update your current application from version 2.x to 3.x. This guide includes important information about API changes, new features callbacks, and will help your team with the transition process. You may use CocoaPods to update to SDK 3.x, or you can download the SDK 3 packages and new 3.x license keys from the Publish - Tools section of your JW Player Dashboard. Please note that version 3 of the SDKs are available to our Enterprise edition customers, and require new license keys because 2.x license keys will not work.","title":"Version 3.0.0 (Build 63 - Jul 2, 2018)"},{"location":"about/release-notes/#features_1","text":"Support for new advertising rules, including timeBetweenAds, startOnSeek, frequency, and startOn. Please refer to our Ad Rules Reference for details on how to use them.","title":"Features"},{"location":"about/release-notes/#version-291-build-51-jun-25-2018","text":"","title":"Version 2.9.1 (Build 51 - Jun 25, 2018)"},{"location":"about/release-notes/#bug-fixes_3","text":"Fixed an issue where the app could crash if FreeWheel returned an empty ad tag (undocumented by FreeWheel)","title":"Bug Fixes"},{"location":"about/release-notes/#version-290-build-50-jun-18-2018","text":"","title":"Version 2.9.0 (Build 50 - Jun 18, 2018)"},{"location":"about/release-notes/#features_2","text":"We have integrated support for the FreeWheel ad-serving platform. Configure your FreeWheel Ad Manager settings in our new FreeWheel ad client to serve pre-rolls and mid-rolls with other features such as ad-skip and ad-click. Please refer to the new FreeWheel advertising section in our developer guide documentation to get started.","title":"Features"},{"location":"about/release-notes/#version-2811-build-49-may-21-2018","text":"","title":"Version 2.8.11 (Build 49 - May 21, 2018)"},{"location":"about/release-notes/#bug-fixes_4","text":"Fixed an issue where the onControlBarVisible event would trigger for Ad related controls","title":"Bug Fixes"},{"location":"about/release-notes/#version-2810-build-48-may-4-2018","text":"","title":"Version 2.8.10 (Build 48 - May 4, 2018)"},{"location":"about/release-notes/#bug-fixes_5","text":"Fixed an issue where the app would crash if there was a problem with local player related files creation","title":"Bug Fixes"},{"location":"about/release-notes/#enhancements_1","text":"Upgraded to support Google IMA SDK v3.7.0","title":"Enhancements"},{"location":"about/release-notes/#version-289-build-47-apr-16-2018","text":"","title":"Version 2.8.9 (Build 47 - Apr 16, 2018)"},{"location":"about/release-notes/#bug-fixes_6","text":"Fixed a VAST issue where content would replay after completion of post-roll Fixed an issue where skipping a VMAP ad did not proceed to the content","title":"Bug Fixes"},{"location":"about/release-notes/#version-288-build-46-mar-28-2018","text":"","title":"Version 2.8.8 (Build 46 - Mar 28, 2018)"},{"location":"about/release-notes/#bug-fixes_7","text":"Fixed an issue where media playback would stop when the app was sent to the background Fixed an issue where NowPlayingInfo (NPI) Center would not display the media's title meta data, and NPI controls did not work","title":"Bug Fixes"},{"location":"about/release-notes/#version-287-build-45-mar-20-2018","text":"","title":"Version 2.8.7 (Build 45 - Mar 20, 2018)"},{"location":"about/release-notes/#bug-fixes_8","text":"Fixed an HLS in-manifest webVTT captions issue where the list of available tracks was not showing when CC button was selected","title":"Bug Fixes"},{"location":"about/release-notes/#version-286-build-44-feb-27-2018","text":"","title":"Version 2.8.6 (Build 44 - Feb 27, 2018)"},{"location":"about/release-notes/#bug-fixes_9","text":"IMPORTANT UPDATE Apple recently tightened their iOS app store submission restrictions. They started to flag the use of non-public APIs and rejecting apps using them - even if these apps were accepted previously without issue . Our team performed a full code audit and this release removes all use of non-public APIs. As a result, we temporarily removed picture-in-picture (PiP) for iPad and background audio support. We will work towards adding these features back in a subsequent release. We strongly recommend all users to update to this version to avoid this issue. If you're upgrading from SDK 2.7.x please refer to the Migration Guide","title":"Bug Fixes"},{"location":"about/release-notes/#version-285-build-43-feb-09-2018","text":"","title":"Version 2.8.5 (Build 43 - Feb 09, 2018)"},{"location":"about/release-notes/#bug-fixes_10","text":"Fixed minor bugs","title":"Bug Fixes"},{"location":"about/release-notes/#version-284-build-42-feb-07-2018","text":"","title":"Version 2.8.4 (Build 42 - Feb 07, 2018)"},{"location":"about/release-notes/#bug-fixes_11","text":"Fixed an issue where a 'Library not loaded' error message would appear during an Ad Hoc build Fixed an issue where after a VMAP ad error, the player wouldn't gracefully recover and resume media playback","title":"Bug Fixes"},{"location":"about/release-notes/#version-283-build-41-jan-23-2018","text":"","title":"Version 2.8.3 (Build 41 - Jan 23, 2018)"},{"location":"about/release-notes/#bug-fixes_12","text":"Fixed an issue where after a VAST ad error, the player wouldn't gracefully recover and resume media playback","title":"Bug Fixes"},{"location":"about/release-notes/#version-282-build-39-jan-09-2018","text":"","title":"Version 2.8.2 (Build 39 - Jan 09, 2018)"},{"location":"about/release-notes/#bug-fixes_13","text":"Fixed an issue where SDKVersion returned an incorrect value","title":"Bug Fixes"},{"location":"about/release-notes/#version-281-build-38-dec-20-2017","text":"","title":"Version 2.8.1 (Build 38 - Dec 20, 2017)"},{"location":"about/release-notes/#bug-fixes_14","text":"Fixed an issue where Chromecast and IMA libraries were required to build the app. Reminder: A migration is required from 2.7.x versions, please refer to the Migration Guide .","title":"Bug Fixes"},{"location":"about/release-notes/#version-280-build-36-dec-11-2017","text":"","title":"Version 2.8.0 (Build 36 - Dec 11, 2017)"},{"location":"about/release-notes/#enhancements_2","text":"JW Player SDK for iOS is now a Dynamic Library and is no longer static. A migration is required from 2.7.x versions, please refer to the Migration Guide . Please note this version contains a known issue: Chromecast and IMA libraries are required to build the app. We recommend version 2.8.1.","title":"Enhancements"},{"location":"about/release-notes/#version-2711-build-35-nov-17-2017","text":"","title":"Version 2.7.11 (Build 35 - Nov 17, 2017)"},{"location":"about/release-notes/#enhancements_3","text":"Renamed symbol _PLAYABLE_KEY to avoid conflicts with other exposed var / consts / symbols that may have the same name","title":"Enhancements"},{"location":"about/release-notes/#bug-fixes_15","text":"Fixed an issue where the onControlBarVisible delegate was not called when the player status is \"paused\" Fixed an issue where playbackPosition() always reported 0 when called immediately after onSeeked() Fixed an issue where two playlist items having an identical video file would cause the player to buffer indefinitely on the second item","title":"Bug Fixes"},{"location":"about/release-notes/#version-2710-build-34-nov-15-2017","text":"","title":"Version 2.7.10 (Build 34 - Nov 15, 2017)"},{"location":"about/release-notes/#features_3","text":"All CDN assets, including JS files, are now packaged with the SDK and loaded locally if the CDN is not available","title":"Features"},{"location":"about/release-notes/#bug-fixes_16","text":"Fixed an issue where the player did not resize correctly in fullscreen/ landscape view for the iPhone X simulator Fixed an issue in CocoaPods where the player controls would appear after an IMA preroll even if config.controls was set to false","title":"Bug Fixes"},{"location":"about/release-notes/#version-279-build-32-oct-03-2017","text":"","title":"Version 2.7.9 (Build 32 - Oct 03, 2017)"},{"location":"about/release-notes/#bug-fixes_17","text":"Fixed all remaining XCode 9 threading warnings Fixed an issue playing ad tags pointing to media addresses that do not have a URI scheme","title":"Bug Fixes"},{"location":"about/release-notes/#version-278-build-31-sep-19-2017","text":"","title":"Version 2.7.8 (Build 31 - Sep 19, 2017)"},{"location":"about/release-notes/#bug-fixes_18","text":"Prevents UIKit instance methods from being called on a background thread when the player is deallocated","title":"Bug Fixes"},{"location":"about/release-notes/#version-277-build-30-sep-15-2017","text":"","title":"Version 2.7.7 (Build 30 - Sep 15, 2017)"},{"location":"about/release-notes/#features_4","text":"onAdImpression: now includes click-through URL parameter","title":"Features"},{"location":"about/release-notes/#enhancements_4","text":"Upgraded SDK to use JW Player 7.12.6","title":"Enhancements"},{"location":"about/release-notes/#version-276-build-29-aug-4-2017","text":"","title":"Version 2.7.6 (Build 29 - Aug 4, 2017)"},{"location":"about/release-notes/#enhancements_5","text":"Enabled seeking in DVR streams using the JWPlayerController seek: method","title":"Enhancements"},{"location":"about/release-notes/#version-275-build-28-july-21-2017","text":"","title":"Version 2.7.5 (Build 28 - July 21, 2017)"},{"location":"about/release-notes/#features_5","text":"Added a new onFullscreenRequested() delegate callback to trigger when fullscreen is requested, but before the animation takes place","title":"Features"},{"location":"about/release-notes/#enhancements_6","text":"Upgraded SDK to use JW Player 7.12.1","title":"Enhancements"},{"location":"about/release-notes/#bug-fixes_19","text":"Fixed an issue where the CC options would not display when replaying a video Fixed an issue where the first frame of media flashes right before an IMA pre-roll ad played Fixed an issue where the player would freeze after you seeked past two IMA ads in a video","title":"Bug Fixes"},{"location":"about/release-notes/#version-274-build-27-jun-16-2017","text":"","title":"Version 2.7.4 (Build 27 - Jun 16, 2017)"},{"location":"about/release-notes/#enhancements_7","text":"Upgraded SDK to use JW Player 7.11.3","title":"Enhancements"},{"location":"about/release-notes/#bug-fixes_20","text":"Fixed an issue where OnControlbarVisibilityChanged fired when the player was in buffering state and inaccurately reported as true","title":"Bug Fixes"},{"location":"about/release-notes/#version-273-build-26-apr-7-2017","text":"","title":"Version 2.7.3 (Build 26 - Apr 7, 2017)"},{"location":"about/release-notes/#features_6","text":"New onAdschedule: callback for the VAST ad client that provides detailed information of a VMAP ad schedule.","title":"Features"},{"location":"about/release-notes/#enhancements_8","text":"Upgraded SDK to use JW Player 7.10.4 onAdImpression: now includes VMAP ad schedule details","title":"Enhancements"},{"location":"about/release-notes/#bug-fixes_21","text":"Fixed an issue where VMAP breakstart/breakend callbacks would not fire when no ad source was present.","title":"Bug Fixes"},{"location":"about/release-notes/#version-272-build-25-mar-24-2017","text":"","title":"Version 2.7.2 (Build 25 - Mar 24, 2017)"},{"location":"about/release-notes/#bug-fixes_22","text":"Fixes bug where a file is downloaded on the main thread","title":"Bug Fixes"},{"location":"about/release-notes/#version-271-build-24-march-10-2017","text":"","title":"Version 2.7.1 (Build 24 - March 10, 2017)"},{"location":"about/release-notes/#bug-fixes_23","text":"Fixes bug where the onAdSkipped and onAdMeta delegate methods would not fire","title":"Bug Fixes"},{"location":"about/release-notes/#version-270-build-23-feb-23-2017","text":"","title":"Version 2.7.0 (Build 23 - Feb 23, 2017)"},{"location":"about/release-notes/#new-features","text":"Added the ability to programmatically setup the JW Player license key in JWPlayerController. Useful for developers who integrate our framework into their own and want to obfuscate the license key from users. Added bitRateUpperBound property to set the maximum bitrate level during automatic quality switching. Useful in limiting bandwidth consumption for viewers.","title":"New Features"},{"location":"about/release-notes/#enhancements_9","text":"Adaptive bitrate switching for HLS streams will now be managed directly by AV Player and will behave like \"auto\". The HD button in this case will not display and manual quality switching is no longer supported. As a result, this resolves issues regarding multiple audio and caption tracks not behaving correctly for HLS streams and improves overall bitrate switching behavior.","title":"Enhancements"},{"location":"about/release-notes/#version-268-build-19-feb-21-2017","text":"","title":"Version 2.6.8 (Build 19 - Feb 21, 2017)"},{"location":"about/release-notes/#bug-fixes_24","text":"Fixes bug where controlBarIsVisible did not fire during vast ads Fixes bug where calling load: during a VAST ad does not load the requested file at time 0 Fixes bug where preload would occasionally load the same file twice Fixes bug where occasionally buffer icon would stay on screen during playback","title":"Bug Fixes"},{"location":"about/release-notes/#enhancements_10","text":"Supports Google IMA SDK version 3.3.1","title":"Enhancements"},{"location":"about/release-notes/#version-267-build-18-feb-17-2017","text":"","title":"Version 2.6.7 (Build 18 - Feb 17, 2017)"},{"location":"about/release-notes/#bug-fixes_25","text":"Fixes bug where side loaded webVtt and SRT captions do not display","title":"Bug Fixes"},{"location":"about/release-notes/#version-266-build-17-feb-7-2017","text":"","title":"Version 2.6.6 (Build 17 - Feb 7, 2017)"},{"location":"about/release-notes/#new-features_1","text":"Added support for \"preload\" where media is preloaded after the player is setup but before the play button is pressed. This allows JW Player to fetch media information prior to playback and enhances perceived performance by users. The \"mediafile\" string is now returned in the onAdImpression() delegate, which represents the currently playing media item. Also returns a boolean indicating if ad is linear","title":"New Features"},{"location":"about/release-notes/#version-265-build-16-jan-31-2017","text":"","title":"Version 2.6.5 (Build 16 - Jan 31, 2017)"},{"location":"about/release-notes/#features_7","text":"Added support for variable rate playback. Dynamically adjust the playback speed of the media to be slower or faster, for both forward and reverse playback. Enabled pausing and resuming IMA Ad playback with the Player's playback API Added support from the Google IMA SDK to specify the language to be used to localize ads","title":"Features"},{"location":"about/release-notes/#enhancements_11","text":"Supports Google ChromeCast version 3.3.0.11401","title":"Enhancements"},{"location":"about/release-notes/#bug-fixes_26","text":"Fixed bug where playlist containing vast pre-rolls would occasionally load next playlist item at the wrong start time Fixed an out of bounds crash that would intermittently occur when loading a CSS Skin","title":"Bug Fixes"},{"location":"about/release-notes/#version-264-build-15-jan-24-2017","text":"","title":"Version 2.6.4 (Build 15 - Jan 24, 2017)"},{"location":"about/release-notes/#bug-fixes_27","text":"Fixed bug where replaying a stream with a vast pre-roll would jump to the end after the ad completed Fixed IMA crash caused when switching between view controllers","title":"Bug Fixes"},{"location":"about/release-notes/#version-263-build-14-jan-12-2017","text":"","title":"Version 2.6.3 (Build 14 - Jan 12, 2017)"},{"location":"about/release-notes/#bug-fixes_28","text":"Fixed firing of VMAP breakstart tracking event","title":"Bug Fixes"},{"location":"about/release-notes/#version-262-build-12-jan-12-2017","text":"","title":"Version 2.6.2 (Build 12 - Jan 12, 2017)"},{"location":"about/release-notes/#bug-fixes_29","text":"Fixed bug where HD button would not display Fixed a crash when a poster image was set that returned a 404 status Fixed a bug where the onAdImpression delegate method would not get called when playing vast ads that did not contain wrappers Fixed a bug where the onAdImpression delegate method would incorrectly indicate \"preroll\" for some VAST ads played using the Google IMA ad client Fixed a bug preventing ATS compliance","title":"Bug Fixes"},{"location":"about/release-notes/#version-261-build-11-dec-22-2016","text":"","title":"Version 2.6.1 (Build 11 - Dec. 22, 2016)"},{"location":"about/release-notes/#features_8","text":"Added onControlBarVisible callback that indicates when the player control bar's visibility changes. Sync your custom UI elements to display hide with the player control bar.","title":"Features"},{"location":"about/release-notes/#version-260-build-9-dec-12-2016","text":"","title":"Version 2.6.0 (Build 9 - Dec. 12, 2016)"},{"location":"about/release-notes/#features_9","text":"Added onAdCompanion() callback for VAST client that returns companion ad data","title":"Features"},{"location":"about/release-notes/#enhancements_12","text":"Upgraded SDKs to use JW Player 7.8 General improvements to SDK player UI More detailed error messaging to assist debugging onMeta() now includes bitrate, frame rate, dropped frames information Enhanced general fullscreen and rotation UI and behavior Improved accuracy of state changes when JWPlayerStateChangedNotification is fired","title":"Enhancements"},{"location":"about/release-notes/#bug-fixes_30","text":"Fixed visual transitions to and from full screen, and on rotations for iPad devices Fixed an issue that would cause the player to exit fullscreen on a 180 degree rotation Fixed an issue where calling Load() during an IMA Ad does not dismiss the ad Fixed an issue where VPAID ads would start in Fullscreen","title":"Bug Fixes"},{"location":"about/release-notes/#version-258-build-99-nov-30-2016","text":"","title":"Version 2.5.8 (Build 99 - Nov. 30, 2016)"},{"location":"about/release-notes/#bug-fixes_31","text":"Fixed a bug where a crash would occur during the deallocation of a JWPlayerController that had been playing ads with the Google IMA client Fixed a bug where occasionally a crash would occur during changes in Network Connectivity","title":"Bug Fixes"},{"location":"about/release-notes/#version-257-build-97-nov-22-2016","text":"","title":"Version 2.5.7 (Build 97 - Nov. 22, 2016)"},{"location":"about/release-notes/#bug-fixes_32","text":"Fixed a bug where some JS and CSS files were downloading on the main thread Fixed a bug where setting a file and a playlist in the JWConfig would result in the playlist being ignored","title":"Bug Fixes"},{"location":"about/release-notes/#version-256-build-96-nov-8-2016","text":"","title":"Version 2.5.6 (Build 96 - Nov. 8, 2016)"},{"location":"about/release-notes/#bug-fixes_33","text":"Fixed a bug where Ads rendered using the Google IMA client would not render on multi-source streams.","title":"Bug Fixes"},{"location":"about/release-notes/#version-255-build-95-oct-31-2016","text":"","title":"Version 2.5.5 (Build 95 - Oct. 31, 2016)"},{"location":"about/release-notes/#bug-fixes_34","text":"Fixed a bug where the video would automatically replay after a Google IMA post roll FIxed a bug where seeking while offline would display the offline poster even though the video would continue playing in the background Fixed a bug preventing offline playback of local files Fixed a bug where setting the JWPlayerController pictureInPictureDisabled property to YES would not prevent entering Picture in Picture when exiting the app while in fullscreen Fixed a bug preventing playback of AES encrypted streams after switching stream qualities Fixed a bug preventing quality switching when reproducing DVR streams Fixed a bug preventing AutoStart after calling the JWPlayerController's load: method Fixed a bug where IMA VMAP post rolls would not replay after replaying the stream Fixed a bug where occasionally MP4 and MP3 streams would restart after seeking many consecutive times","title":"Bug Fixes"},{"location":"about/release-notes/#enhancements_13","text":"Compatible with Google IMA SDK version 3.2.1","title":"Enhancements"},{"location":"about/release-notes/#version-254-build-90-oct-3-2016","text":"","title":"Version 2.5.4 (Build 90 - Oct. 3, 2016)"},{"location":"about/release-notes/#bug-fixes_35","text":"Fixed a bug in iOS 10 where rotating to landscape on a view controller supporting all interface orientations (UIInterfaceOrientationMaskAll) with the player's forceFullScreenOnLandscape property set to True would display an incorrect fullscreen orientation","title":"Bug Fixes"},{"location":"about/release-notes/#version-253-build-87-sep-22-2016","text":"","title":"Version 2.5.3 (Build 87 - Sep. 22, 2016)"},{"location":"about/release-notes/#bug-fixes_36","text":"Fixed an issue where uploading to the App Store without the Google IMA or Google Cast SDKs would result in a rejection","title":"Bug Fixes"},{"location":"about/release-notes/#version-252-build-86-sep-22-2016","text":"","title":"Version 2.5.2 (Build 86 - Sep. 22, 2016)"},{"location":"about/release-notes/#bug-fixes_37","text":"Fixed an issue where certain enums were not compatible with Swift","title":"Bug Fixes"},{"location":"about/release-notes/#version-251-build-84-sep-21-2016","text":"","title":"Version 2.5.1 (Build 84 - Sep. 21, 2016)"},{"location":"about/release-notes/#bug-fixes_38","text":"Fixed an issue where certain HLS streams wouldn't be recognized correctly by the SDK Fixed an issue in playlists where the HD button would appear even if some items in the playlist did not support multiple qualities Fixed an issue where the HD button wouldn't appear after 'load:' was called Fixed an issue where ads with a '#' in the URL would produce an error","title":"Bug Fixes"},{"location":"about/release-notes/#enhancements_14","text":"Enums are now compatible with Swift","title":"Enhancements"},{"location":"about/release-notes/#version-250-build-83-sep-14-2016","text":"","title":"Version 2.5.0 (Build 83 - Sep. 14, 2016)"},{"location":"about/release-notes/#new-features_2","text":"Added support for Related Feeds player setup options Added support for custom HTTP headers for video streams (including signed cookies or tokens) via AVURLAsset Options dictionary New and updated delegate callbacks (eg. onAdStarted) for parity with HTML5 player Added a media ID property to JWPlaylistItem to allow developers to specify the JW Media ID for an externally hosted media file in the JW Platform in order to track analytics for that video","title":"New Features"},{"location":"about/release-notes/#enhancements_15","text":"Compatible with iOS 10 Improved onTime to ping every 100 ms Poster image for lock screen is now fetched on the background thread The player now detects the \"Video Override\" option from the users's \"General - Accessibiity - Subtitles Captioning - Style\" settings to determine whether to have the video settings override the user's accessibility settings","title":"Enhancements"},{"location":"about/release-notes/#bug-fixes_39","text":"Fixed an issue where setting an adBreak tag with setter instead of using AdBreak's initWithTag custom initializer caused a crash Fixed an issue where toggling displayLockScreenControls did not update correctly Fixed an issue for multiple IMA midrolls where if one midroll should fail and return an ad error, the next scheduled midroll would erroneously play out of turn instead of resuming media playback Fixed an issue where playlists with IMA or VAST ads would erroneously display \"Live Stream\" in the status bar after ending Fixed an issue where captions from the media were displayed during ad playback","title":"Bug Fixes"},{"location":"about/release-notes/#version-245-build-79-sep-6-2016","text":"","title":"Version 2.4.5 (Build 79 - Sep. 6, 2016)"},{"location":"about/release-notes/#enhancements_16","text":"Optimized asset loading to be asynchronous on the background thread","title":"Enhancements"},{"location":"about/release-notes/#bug-fixes_40","text":"Fixed an issue where if several instances of the player were created concurrently, only the last player instantiated would play","title":"Bug Fixes"},{"location":"about/release-notes/#version-244-build-77-aug-26-2016","text":"","title":"Version 2.4.4 (Build 77 - Aug. 26, 2016)"},{"location":"about/release-notes/#bug-fixes_41","text":"Fixed an issue where unsupported/incompatible ad creative file types were not being ignored (e.g. Flash ads)","title":"Bug Fixes"},{"location":"about/release-notes/#version-243-build-74-aug-15-2016","text":"","title":"Version 2.4.3 (Build 74 - Aug. 15, 2016)"},{"location":"about/release-notes/#bug-fixes_42","text":"Fixed an issue where a crash would occur upon player deallocation on iOS 8","title":"Bug Fixes"},{"location":"about/release-notes/#version-242-build-73-aug-10-2016","text":"","title":"Version 2.4.2 (Build 73 - Aug. 10, 2016)"},{"location":"about/release-notes/#new-features_3","text":"Player specific volume control","title":"New Features"},{"location":"about/release-notes/#known-issues","text":"Volume control does not apply to Google IMA ads or casting at this time","title":"Known Issues"},{"location":"about/release-notes/#version-241-build-58-jul-08-2016","text":"","title":"Version 2.4.1 (Build 58 - Jul. 08, 2016)"},{"location":"about/release-notes/#bug-fixes_43","text":"Fixed an issue where OnAdPlay() was not fired for IMA ads when ad resumed Fixed an issue where VAST ads would loop if called during playback of a DRM encrypted file Fixed an issue where the player incorrectly shows a \"play\" state when returning from background Fixed an issue where IMA ads didn't play in playlists if the IMA tag contained percent-encoding within the optional \"cust_params\" query string parameter. Fixed an issue where adClick would open Safari even if openSafariOnAdClick was set to \"NO\" Fixed an issue where the ad would continue playing in the background after an ad click opens Safari Fixed an issue where a paused video would resume playing when app sent to background","title":"Bug Fixes"},{"location":"about/release-notes/#version-240-build-56-jun-29-2016","text":"","title":"Version 2.4.0 (Build 56 - Jun. 29, 2016)"},{"location":"about/release-notes/#new-features_4","text":"Playback of HLS streams protected with Apple FairPlay Streaming (FPS) is now supported Free, Premium, and Platinum license editions are now supported Ad impression limits are now checked when ad playback is requested in order to prevent ad impression overage charges","title":"New Features"},{"location":"about/release-notes/#version-232-build-55-jun-27-2016","text":"","title":"Version 2.3.2 (Build 55 - Jun. 27, 2016)"},{"location":"about/release-notes/#bug-fixes_44","text":"Fixed an issue where Google IMA prerolls would not play in simulator Fixed an issue where Google IMA prerolls would not play in certain devices Fixed an issue where Google IMA VMAP midrolls would not play","title":"Bug Fixes"},{"location":"about/release-notes/#version-231-build-53-jun-08-2016","text":"","title":"Version 2.3.1 (Build 53 - Jun. 08, 2016)"},{"location":"about/release-notes/#bug-fixes_45","text":"Fixed an issue where the onError callback was not getting called Fixed an issue preventing bit coding for cocoapods","title":"Bug Fixes"},{"location":"about/release-notes/#version-230-build-52-jun-06-2016","text":"","title":"Version 2.3.0 (Build 52 - Jun. 06, 2016)"},{"location":"about/release-notes/#new-features_5","text":"VPAID 2.0 Support Audio playback control for app in background","title":"New Features"},{"location":"about/release-notes/#bug-fixes_46","text":"Fixed an issue where IMA ad callback events were fired twice Fixed an issue where specifying a title would cause a crash when attempting to cast to certain devices Fixed an issue where reload screen would disapper after locking and unlocking device Fixed a general casting issue where casting to certain devices would fail Fixed an issue where the letter \"x\" would appear in front of the default quality level label if attribute name was undefined Fixed an issue where the playerController returned the playback position from the previous item during the first second of playback when a new file was loaded Fixed an issue where some audio MP3 ID3 metadata would cause a crash Fixed an issue where loadConfig was not working","title":"Bug Fixes"},{"location":"about/release-notes/#version-221-build-50-apr-27-2016","text":"","title":"Version 2.2.1 (Build 50 - Apr. 27, 2016)"},{"location":"about/release-notes/#bug-fixes_47","text":"Fixed issue where when submitting to Apple App Store, iTunes would complain about using private APIs Fixed issue where sometimes buffering animation would not appear at video start Fixed issue where background sound would be disabled Enabled bit coding","title":"Bug Fixes"},{"location":"about/release-notes/#version-220-build-49-apr-08-2016","text":"","title":"Version 2.2.0 (Build 49 - Apr. 08, 2016)"},{"location":"about/release-notes/#new-features_6","text":"Apple AirPlay Support Google Chromecast Support Local Media File Playback (Offline) CEA-608 Captions in HLS HLS In-Manifest WebVTT subtitles","title":"New Features"},{"location":"about/release-notes/#bug-fixes_48","text":"Fixed an issue where VOD videos would briefly display Live Broadcast if the duration of the video couldn't be calculated","title":"Bug Fixes"},{"location":"about/release-notes/#version-210-build-36-feb-02-2016","text":"","title":"Version 2.1.0 (Build 36 - Feb. 02, 2016)"},{"location":"about/release-notes/#new-features_7","text":"HLS Live DVR ID3 Timed Metadata Picture in Picture (iOS 9 iPad only) HLS Multiple Track Audio","title":"New Features"},{"location":"about/release-notes/#bug-fixes_49","text":"Fixed issue where video did not restart from beginning after 'repeat' button was tapped","title":"Bug Fixes"},{"location":"about/release-notes/#known-issues_1","text":"iPads will display in-band text tracks (captions) within the m3u8 manifest if they exist and cannot be turned off","title":"Known Issues"},{"location":"about/release-notes/#version-2033-build-33-dec-01-2015","text":"","title":"Version 2.0.33 (Build 33 - Dec. 01, 2015)"},{"location":"about/release-notes/#bug-fixes_50","text":"Fixed an issue where the rotation observer wasn't properly updated if multiple players were created, resulting in a crash","title":"Bug Fixes"},{"location":"about/release-notes/#version-2032-build-32-nov-17-2015","text":"2.0 marks a significant step toward our goal of One JW Player . The developer-facing APIs in the SDK are native iOS classes (Objective-C/Swift), but they are wrappers around the newest version of our flagship JW Player 7 JavaScript/HTML5 library (jwplayer.js), powering new player customization options like CSS skinning and a DPI-responsive player UI optimized for mobile. Check out our blog post to learn more about our \"One JW Player\" vision.","title":"Version 2.0.32 (Build 32 - Nov. 17, 2015)"},{"location":"about/release-notes/#new-features_8","text":"Updated to JW Player 7 CSS Skinning Model DPI-responsive player UI with mobile optimization Devices with a smaller viewing area will now see a more mobile-friendly control bar UI. Font size has been increased and secondary control bar elements have been relocated to an overflow menu New API Calls getBuffer getVisualQuality get/set Controls stop getSafeRegion Dynamically load media sources within existing player for playlists or videos Captions styling from iOS Accessibility options Offline Error Handling Custom Messaging Advertising Non-Linear Ads (Overlays) Ad Tag variable support JW SDK for iOS available via CocoaPods Supports 608 captions and in-line captions Supports accessibility styling for both 608 captions and in-line captions Supports custom styling for in-line captions","title":"New Features"},{"location":"about/release-notes/#bug-fixes_51","text":"Fixed bug that prevented full screen on rotation when player view is added to a view that is not the root view of the presented view controller Fixed bug where MP3 MP4 media loaded slower than expected Fixed bug where the player would crash the app when opened for the first time while offline","title":"Bug Fixes"},{"location":"about/release-notes/#known-issues_2","text":"Playlist icon does not display on the control bar on some phones Ad Message will occasionally span 2 lines on some phones For Google IMA prerolls, sometimes the media will appear briefly before the preroll begins Calling playAd after a VMAP has been loaded using Google IMA will cause the completed ads to replay when the requested ad finishes reproducing When reproducing a stream containing multiple qualities, if the viewer switches from a quality that contains embedded captions (608 captions or in-line captions) to a quality that does not contain embedded captions, the Closed Caption button might not be removed from the control bar. Toggling the Closed Caption button will have no effect Occasionally toggling play/pause on lock screen will cause playback information to briefly disappear and then reappear","title":"Known Issues"},{"location":"about/release-notes/#version-1x","text":"Release Notes prior to JW SDK version 2.0 (1.x) are available in the readme.txt file included in the 1.x download packages","title":"Version 1.x"},{"location":"api/callbacks/","text":"Callbacks In order to get notified about any player-related callbacks, you can either adhere to the new JWPlayerDelegate Protocol, or sign up for notifications using NSNotificationCenter. The Protocol provides delegate methods for each callback; for more information please review the JWPlayerDelegate.h file in the SDK package. Every callback notification has an event name in the userInfo dictionary, together with the additional parameters described below. JWMetaDataAvailableNotification onMeta : Fired shortly after the video starts to play. Parameter: metaData : Object containing the new metadata. This can be metadata hidden in the media (XMP, ID3, keyframes) or metadata broadcasted by the playback provider (bandwidth, quality switches). JWPlayerStateChangedNotification A set of events reporting changes in the player state. Each event (except onReady) has two params newState and oldState that represent current state after event and previous state. onPlayAttempt : Triggered the instant a user attempts to play a file. onFirstFrame : Triggered by a video's first frame event (Or the instant an audio file begins playback). onReady : The player is created and ready to be used. onIdle : The player stopped playing. onComplete : The player has done playing current media. onBuffer : The player is buffering media. onBufferChange : Fired when the currently playing item loads additional data into its buffer. onPlay : The player started to play media. onPause : The player is paused. JWPlaybackPositionChangedNotification onTime : Fired continuously while the player is playing media. May get fired up to 10 times a second. Parameters: duration : the duration of the media currently being played (not applicable for lie streams). position : current playback position in seconds (not applicable for live streams). onSeek : Fired after a seek has been requested either by scrubbing the controlbar or through the API. Parameters: offset : The user requested position to seek to (in seconds). position : The position of the player before the player seeks (in seconds). JWFullScreenStateChangedNotification Fired when the player changes to/from fullscreen mode. onFullscreen : Parameters: state : integer representing is the player is in fullscreen (1) or windowed mode (0). JWAdActivityNotification Set of events related to advertisements. onAdRequest : Fired whenever an ad is requested by the player. onAdSkipped : Fired when the user taps skip button during ad. onAdComplete : Fired when ad is done playing. onAdImpression : Fired when ad shows up on the screen. onAdStarted : VPAID-only. Will trigger when a VPAID ad creative signals to our player that it is starting. This differs from adImpression since the advertisement may not yet be visible. Fires after the first onAdPlay event. onAdMeta : Fired when new metadata has been broadcasted by the player during an Ad. onAdPlay : Fired when ad start to play or is resumed after pause. onAdPause : Fired when ad is paused. onAdCompanions : Fired whenever an ad contains companions. onAdError : Fired when ad can t be played for any reason (onError event is fired at the same time). JWAdPlaybackProgressNotification Continuous ad playback time update. onAdTime JWAdClickNotification onAdClick : Fired when the user taps the ad (omitted if openSafariOnAdClick is set to true) JWErrorNotification Fired when the player encounters any errors. onSetupError : Fired when an error occurs before setup is complete, or in other words before the onReady Event. onError : Fired when an error occurs after setup. onAdError : Fired when an error occurs during ad playback. JWCaptionsNotification onCaptionsList : Parameters: track : number of the active captions track. tracks : array of all available captions tracks. onCaptionsChange : Parameters: track : number of the active captions track. tracks : array of all available captions tracks. JWVideoQualityNotification onLevels : Parameters: currentQuality : number of the current quality level from the list. levels : list of available quality levels. onLevelsChanged : Parameters: currentQuality : number of the current quality level from the list. levels : list of available quality levels. onVisualQuality : Parameters: mode : The type of quality selection that has been enabled with the player. This will read auto when a user is relying on our automatic quality determination or manual when a user has selected a static quality. reason : Why the quality was changed. This can be initial choice. label : Information about the quality that was changed. This will display your label, bitrate, index, and resolution. JWAudioTrackNotification onAudioTracks : Parameters: levels : Array with audio tracks from the player. onAudioTrackChanged : Parameters: currentTrack : Index of the newly selected audio track in the audio tracks array.","title":"Callbacks"},{"location":"api/callbacks/#callbacks","text":"In order to get notified about any player-related callbacks, you can either adhere to the new JWPlayerDelegate Protocol, or sign up for notifications using NSNotificationCenter. The Protocol provides delegate methods for each callback; for more information please review the JWPlayerDelegate.h file in the SDK package. Every callback notification has an event name in the userInfo dictionary, together with the additional parameters described below.","title":"Callbacks"},{"location":"api/callbacks/#jwmetadataavailablenotification","text":"onMeta : Fired shortly after the video starts to play. Parameter: metaData : Object containing the new metadata. This can be metadata hidden in the media (XMP, ID3, keyframes) or metadata broadcasted by the playback provider (bandwidth, quality switches).","title":"JWMetaDataAvailableNotification"},{"location":"api/callbacks/#jwplayerstatechangednotification","text":"A set of events reporting changes in the player state. Each event (except onReady) has two params newState and oldState that represent current state after event and previous state. onPlayAttempt : Triggered the instant a user attempts to play a file. onFirstFrame : Triggered by a video's first frame event (Or the instant an audio file begins playback). onReady : The player is created and ready to be used. onIdle : The player stopped playing. onComplete : The player has done playing current media. onBuffer : The player is buffering media. onBufferChange : Fired when the currently playing item loads additional data into its buffer. onPlay : The player started to play media. onPause : The player is paused.","title":"JWPlayerStateChangedNotification"},{"location":"api/callbacks/#jwplaybackpositionchangednotification","text":"onTime : Fired continuously while the player is playing media. May get fired up to 10 times a second. Parameters: duration : the duration of the media currently being played (not applicable for lie streams). position : current playback position in seconds (not applicable for live streams). onSeek : Fired after a seek has been requested either by scrubbing the controlbar or through the API. Parameters: offset : The user requested position to seek to (in seconds). position : The position of the player before the player seeks (in seconds).","title":"JWPlaybackPositionChangedNotification"},{"location":"api/callbacks/#jwfullscreenstatechangednotification","text":"Fired when the player changes to/from fullscreen mode. onFullscreen : Parameters: state : integer representing is the player is in fullscreen (1) or windowed mode (0).","title":"JWFullScreenStateChangedNotification"},{"location":"api/callbacks/#jwadactivitynotification","text":"Set of events related to advertisements. onAdRequest : Fired whenever an ad is requested by the player. onAdSkipped : Fired when the user taps skip button during ad. onAdComplete : Fired when ad is done playing. onAdImpression : Fired when ad shows up on the screen. onAdStarted : VPAID-only. Will trigger when a VPAID ad creative signals to our player that it is starting. This differs from adImpression since the advertisement may not yet be visible. Fires after the first onAdPlay event. onAdMeta : Fired when new metadata has been broadcasted by the player during an Ad. onAdPlay : Fired when ad start to play or is resumed after pause. onAdPause : Fired when ad is paused. onAdCompanions : Fired whenever an ad contains companions. onAdError : Fired when ad can t be played for any reason (onError event is fired at the same time).","title":"JWAdActivityNotification"},{"location":"api/callbacks/#jwadplaybackprogressnotification","text":"Continuous ad playback time update. onAdTime","title":"JWAdPlaybackProgressNotification"},{"location":"api/callbacks/#jwadclicknotification","text":"onAdClick : Fired when the user taps the ad (omitted if openSafariOnAdClick is set to true)","title":"JWAdClickNotification"},{"location":"api/callbacks/#jwerrornotification","text":"Fired when the player encounters any errors. onSetupError : Fired when an error occurs before setup is complete, or in other words before the onReady Event. onError : Fired when an error occurs after setup. onAdError : Fired when an error occurs during ad playback.","title":"JWErrorNotification"},{"location":"api/callbacks/#jwcaptionsnotification","text":"onCaptionsList : Parameters: track : number of the active captions track. tracks : array of all available captions tracks. onCaptionsChange : Parameters: track : number of the active captions track. tracks : array of all available captions tracks.","title":"JWCaptionsNotification"},{"location":"api/callbacks/#jwvideoqualitynotification","text":"onLevels : Parameters: currentQuality : number of the current quality level from the list. levels : list of available quality levels. onLevelsChanged : Parameters: currentQuality : number of the current quality level from the list. levels : list of available quality levels. onVisualQuality : Parameters: mode : The type of quality selection that has been enabled with the player. This will read auto when a user is relying on our automatic quality determination or manual when a user has selected a static quality. reason : Why the quality was changed. This can be initial choice. label : Information about the quality that was changed. This will display your label, bitrate, index, and resolution.","title":"JWVideoQualityNotification"},{"location":"api/callbacks/#jwaudiotracknotification","text":"onAudioTracks : Parameters: levels : Array with audio tracks from the player. onAudioTrackChanged : Parameters: currentTrack : Index of the newly selected audio track in the audio tracks array.","title":"JWAudioTrackNotification"},{"location":"api/classes/","text":"Classes For a full list of the iOS classes and methods, please click here","title":"Classes"},{"location":"api/classes/#classes","text":"For a full list of the iOS classes and methods, please click here","title":"Classes"},{"location":"casting/airplay/","text":"AirPlay The JW Player iOS SDK supports playback via AirPlay. In order to cast via AirPlay your Apple device must be connected to an AirPlay receiver (i.e. Apple TV). Connecting to an AirPlay receiver can be done in the Control Center or by adding an AirPlay button in your app. The following code can be used to layer an AirPlay button on your JWPlayerController's view. - (void)setUpAirPlayButton { self.airPlayView =[[MPVolumeView alloc] initWithFrame:CGRectMake(x, y, width, height)]; [self.airPlayView setShowsVolumeSlider:NO]; self.airPlayView.backgroundColor = [UIColor clearColor]; self.airPlayView.autoresizingMask = UIViewAutoresizingFlexibleLeftMargin; [self.player.view addSubview:self.airPlayView]; } For your convenience, a best practice app demonstrating how to layer an AirPlay button on your player's view can be found on https://github.com/jwplayer/jwplayer-ios-bestPracticeApps . This repository contains several basic best practice apps that use the JW Player iOS SDK. The target containing the relevant code is called JWAirPlay. Not Supported VAST ads will not AirPlay. Known Issues WebVTT captions are displayed on the mobile device, not on the AirPlay receiver.","title":"AirPlay"},{"location":"casting/airplay/#airplay","text":"The JW Player iOS SDK supports playback via AirPlay. In order to cast via AirPlay your Apple device must be connected to an AirPlay receiver (i.e. Apple TV). Connecting to an AirPlay receiver can be done in the Control Center or by adding an AirPlay button in your app. The following code can be used to layer an AirPlay button on your JWPlayerController's view. - (void)setUpAirPlayButton { self.airPlayView =[[MPVolumeView alloc] initWithFrame:CGRectMake(x, y, width, height)]; [self.airPlayView setShowsVolumeSlider:NO]; self.airPlayView.backgroundColor = [UIColor clearColor]; self.airPlayView.autoresizingMask = UIViewAutoresizingFlexibleLeftMargin; [self.player.view addSubview:self.airPlayView]; } For your convenience, a best practice app demonstrating how to layer an AirPlay button on your player's view can be found on https://github.com/jwplayer/jwplayer-ios-bestPracticeApps . This repository contains several basic best practice apps that use the JW Player iOS SDK. The target containing the relevant code is called JWAirPlay.","title":"AirPlay"},{"location":"casting/airplay/#not-supported","text":"VAST ads will not AirPlay.","title":"Not Supported"},{"location":"casting/airplay/#known-issues","text":"WebVTT captions are displayed on the mobile device, not on the AirPlay receiver.","title":"Known Issues"},{"location":"casting/chromecast/","text":"Google Cast Setup To enable casting to Chromecast with the JW Player iOS SDK, you must import the Google Cast Framework and its dependent frameworks. For a list of necessary frameworks, please visit https://developers.google.com/cast/docs/ios_sender_setup#xcode_setup and follow the steps under the \"Xcode setup\" subsection of the \"Setup\" section. To begin casting, create a JWCastController object and set its delegate; the delegate must adhere to the JWCastingDelegate protocol and implement its delegate methods. - (void)setUpCastController { self.castController = [[JWCastController alloc] initWithPlayer:self.player]; self.castController.chromeCastReceiverAppID = kGCKMediaDefaultReceiverApplicationID; self.castController.delegate = self; } Once your JWCastController is setup, scan for devices by calling the scanForDevices method: [self.castController scanForDevices]; When devices become available, the JWCastingDelegate method onCastingDevicesAvailable: will be called and will provide an array of JWCastingDevices. Connect to a device by calling connectToDevice: . -(void)onCastingDevicesAvailable:(NSArray *)devices { JWCastingDevice *chosenDevice = devices[0]; [self.castController connectToDevice:chosenDevice]; } When connection is established, the JWCastingDelegate method onConnectedToCastingDevice: will be called, signaling the ability to cast the video being reproduced by the JWPlayerController. To cast, call the cast method on your JWCastController. -(void)onConnectedToCastingDevice:(JWCastingDevice *)device { [self.castController cast]; } The JWPlayerController API controls the playback of the video being casted, and the JWPlayerDelegate will provide you with the playback callbacks while casting. A best practice sample application demonstrating the code necessary for a proper casting experience can be found on https://github.com/jwplayer/jwplayer-ios-bestPracticeApps . This repository contains several basic best practice apps that use the JW Player iOS SDK. The target containing the relevant code is named JWCasting. The JW Player SDK supports casting to the Default Media Receiver and to Styled Media Receivers. Custom Receivers are not yet officially supported, but may work if the video playback implements the same interface used in the Default Media Receiver. To specify a receiver, set the receiver's app ID to the chromeCastReceiverAppID property of the JWCastController. Known Issues Our implementation of Google Cast is handled at the player level, not at the application-level recommended by Google's Casting UI/UX guidelines . For more involved casting requirements, we recommend implementing Google's Cast SDK directly at the application-level instead. Google IMA ads are not supported when casting. Multiple AudioTracks or AudioTrack switching is not supported when casting. Only WebVTT captions are supported.","title":"Chromecast"},{"location":"casting/chromecast/#google-cast-setup","text":"To enable casting to Chromecast with the JW Player iOS SDK, you must import the Google Cast Framework and its dependent frameworks. For a list of necessary frameworks, please visit https://developers.google.com/cast/docs/ios_sender_setup#xcode_setup and follow the steps under the \"Xcode setup\" subsection of the \"Setup\" section. To begin casting, create a JWCastController object and set its delegate; the delegate must adhere to the JWCastingDelegate protocol and implement its delegate methods. - (void)setUpCastController { self.castController = [[JWCastController alloc] initWithPlayer:self.player]; self.castController.chromeCastReceiverAppID = kGCKMediaDefaultReceiverApplicationID; self.castController.delegate = self; } Once your JWCastController is setup, scan for devices by calling the scanForDevices method: [self.castController scanForDevices]; When devices become available, the JWCastingDelegate method onCastingDevicesAvailable: will be called and will provide an array of JWCastingDevices. Connect to a device by calling connectToDevice: . -(void)onCastingDevicesAvailable:(NSArray *)devices { JWCastingDevice *chosenDevice = devices[0]; [self.castController connectToDevice:chosenDevice]; } When connection is established, the JWCastingDelegate method onConnectedToCastingDevice: will be called, signaling the ability to cast the video being reproduced by the JWPlayerController. To cast, call the cast method on your JWCastController. -(void)onConnectedToCastingDevice:(JWCastingDevice *)device { [self.castController cast]; } The JWPlayerController API controls the playback of the video being casted, and the JWPlayerDelegate will provide you with the playback callbacks while casting. A best practice sample application demonstrating the code necessary for a proper casting experience can be found on https://github.com/jwplayer/jwplayer-ios-bestPracticeApps . This repository contains several basic best practice apps that use the JW Player iOS SDK. The target containing the relevant code is named JWCasting. The JW Player SDK supports casting to the Default Media Receiver and to Styled Media Receivers. Custom Receivers are not yet officially supported, but may work if the video playback implements the same interface used in the Default Media Receiver. To specify a receiver, set the receiver's app ID to the chromeCastReceiverAppID property of the JWCastController.","title":"Google Cast Setup"},{"location":"casting/chromecast/#known-issues","text":"Our implementation of Google Cast is handled at the player level, not at the application-level recommended by Google's Casting UI/UX guidelines . For more involved casting requirements, we recommend implementing Google's Cast SDK directly at the application-level instead. Google IMA ads are not supported when casting. Multiple AudioTracks or AudioTrack switching is not supported when casting. Only WebVTT captions are supported.","title":"Known Issues"},{"location":"customization/building-skins/","text":"Skinning The nine complimentary skins offered in version 2.x have been deprecated in 3.x, but customizing JW Player is easy with JW Player 8's CSS-based skinning model. To customize the player's skin you must set a JWSkinStyling instance to your config. JWSkinStyling *skinStyling = [JWSkinStyling new]; config.skin = skinStyling; Color customization Using JWSkinStyling you can edit the color of the elements contained in the controlbar , timeslider , menus , and tooltips . JWControlbarStyling *controlbarStyling = [JWControlbarStyling new]; controlbarStyling.text = [UIColor blueColor]; controlbarStyling.icons = [UIColor redColor]; skinStyling.controlbar = controlbarStyling; Alternatively, you can set a value to the active , inactive , and background properties of the JWSkinStyling to customize the active, inactive and background colors of all the elements in the skin excluding the timeslider's rail. skinStyling.active = [UIColor yellowColor]; skinStyling.inactive = [UIColor blackColor]; skinStyling.background = [UIColor blueColor]; Note : Customization set to specific UI elements will take precedence over the general customization. Skinning with a CSS URL It is possible to reference your CSS file's url within the config's skin property. config.skin.url = @ http://yoursite.com/yourstyles/myskinfile.css ; config.skin.name = @ myskin ; or for local files config.skin.url = [NSString stringWithFormat:@ file://%@ , [[NSBundle mainBundle] pathForResource:@ myskinfile ofType:@ css ]]; config.skin.name = @ myskin ;","title":"Custom Skins"},{"location":"customization/building-skins/#skinning","text":"The nine complimentary skins offered in version 2.x have been deprecated in 3.x, but customizing JW Player is easy with JW Player 8's CSS-based skinning model. To customize the player's skin you must set a JWSkinStyling instance to your config. JWSkinStyling *skinStyling = [JWSkinStyling new]; config.skin = skinStyling;","title":"Skinning"},{"location":"customization/building-skins/#color-customization","text":"Using JWSkinStyling you can edit the color of the elements contained in the controlbar , timeslider , menus , and tooltips . JWControlbarStyling *controlbarStyling = [JWControlbarStyling new]; controlbarStyling.text = [UIColor blueColor]; controlbarStyling.icons = [UIColor redColor]; skinStyling.controlbar = controlbarStyling; Alternatively, you can set a value to the active , inactive , and background properties of the JWSkinStyling to customize the active, inactive and background colors of all the elements in the skin excluding the timeslider's rail. skinStyling.active = [UIColor yellowColor]; skinStyling.inactive = [UIColor blackColor]; skinStyling.background = [UIColor blueColor]; Note : Customization set to specific UI elements will take precedence over the general customization.","title":"Color customization"},{"location":"customization/building-skins/#skinning-with-a-css-url","text":"It is possible to reference your CSS file's url within the config's skin property. config.skin.url = @ http://yoursite.com/yourstyles/myskinfile.css ; config.skin.name = @ myskin ; or for local files config.skin.url = [NSString stringWithFormat:@ file://%@ , [[NSBundle mainBundle] pathForResource:@ myskinfile ofType:@ css ]]; config.skin.name = @ myskin ;","title":"Skinning with a CSS URL"},{"location":"customization/captions/","text":"Captions Adding Closed captions Side Car Captions Closed captions tracks are provided as an array of JWTrack objects: Objective C: config.tracks = @[[JWTrack trackWithFile:@\"/sintel-en.srt\" label:@\"English\" isDefault:YES], [JWTrack trackWithFile:@\"/sintel-sp.srt\" label:@\"Spanish\"], [JWTrack trackWithFile:@\"/sintel-ru.srt\" label:@\"Russian\"]]; Swift: config.tracks = [JWTrack (file: \"/sintel-en.srt\", label: \"English\", isDefault: true), JWTrack (file: \"/sintel-sp.srt\", label: \"Spanish\"), JWTrack (file: \"/sintel-ru.srt\", label: \"Russian\")] CEA-608 Captions in HLS HLS In-Manifest WebVTT subtitles In order to reproduce CEA-608 Captions in HLS and HLS In-Manifest WebVTT subtitles, simply set a stream containing either CEA-608 Captions in HLS or HLS In-Manifest WebVTT subtitles to the JWConfig's file property. Objective C: config.file = @ rdquo;http://example.com/hlsWith608orInManifestWebVTT.m3u8 rdquo;; Swift: config.file = ldquo;http://example.com/hlsWith608orInManifestWebVTT.m3u8\" Caption styling To customize captions, a JWCaptionStyling object called captionStyling is passed to the player. This object enables the customization of the caption s font, font color, window color, background color, and edge style. Objective C: JWCaptionStyling *captionStyling = [JWCaptionStyling alloc]init]; captionStyling.font = [UIFont fontWithName:@\"Zapfino\" size:20]; captionStyling.color = [UIColor blueColor]; captionStyling.windowColor = [UIColor orangeColor]; captionStyling.backgroundColor = [UIColor colorWithRed:0.3 green:0.6 blue:0.3 alpha:0.7]; captionStyling.edgeStyle = JWEdgeStyleRaised; config.captions = captionStyling; Swift: var captionStyling: JWCaptionStyling = JWCaptionStyling() captionStyling.font = UIFont (name: \"Zapfino\", size: 20) captionStyling.color = UIColor.blueColor() captionStyling.edgeStyle = JWEdgeStyleRaised captionStyling.windowColor = UIColor.purpleColor() captionStyling.backgroundColor = UIColor(red: 0.3, green: 0.6, blue: 0.3, alpha: 0.7) config.captions = captionStyling If JWCaptionStyling is not used, then the captions will be styled based on the user's preferences, which are determined in the device's Accessibility Subtitles Captioning settings. Note: JWCaptionStyling supersedes the device's Accessibility Subtitles Captioning settings in the case of side car captions and HLS In-Manifest WebVTT subtitles. JWCaptionStyling cannot be used on CEA-608 Captions; CEA-608 Captions will be styled in accordance to the device's Accessibility Subtitles Captioning settings.","title":"Captions"},{"location":"customization/captions/#captions","text":"","title":"Captions"},{"location":"customization/captions/#adding-closed-captions","text":"","title":"Adding Closed captions"},{"location":"customization/captions/#side-car-captions","text":"Closed captions tracks are provided as an array of JWTrack objects: Objective C: config.tracks = @[[JWTrack trackWithFile:@\"/sintel-en.srt\" label:@\"English\" isDefault:YES], [JWTrack trackWithFile:@\"/sintel-sp.srt\" label:@\"Spanish\"], [JWTrack trackWithFile:@\"/sintel-ru.srt\" label:@\"Russian\"]]; Swift: config.tracks = [JWTrack (file: \"/sintel-en.srt\", label: \"English\", isDefault: true), JWTrack (file: \"/sintel-sp.srt\", label: \"Spanish\"), JWTrack (file: \"/sintel-ru.srt\", label: \"Russian\")]","title":"Side Car Captions"},{"location":"customization/captions/#cea-608-captions-in-hls-hls-in-manifest-webvtt-subtitles","text":"In order to reproduce CEA-608 Captions in HLS and HLS In-Manifest WebVTT subtitles, simply set a stream containing either CEA-608 Captions in HLS or HLS In-Manifest WebVTT subtitles to the JWConfig's file property. Objective C: config.file = @ rdquo;http://example.com/hlsWith608orInManifestWebVTT.m3u8 rdquo;; Swift: config.file = ldquo;http://example.com/hlsWith608orInManifestWebVTT.m3u8\"","title":"CEA-608 Captions in HLS &amp; HLS In-Manifest WebVTT subtitles"},{"location":"customization/captions/#caption-styling","text":"To customize captions, a JWCaptionStyling object called captionStyling is passed to the player. This object enables the customization of the caption s font, font color, window color, background color, and edge style. Objective C: JWCaptionStyling *captionStyling = [JWCaptionStyling alloc]init]; captionStyling.font = [UIFont fontWithName:@\"Zapfino\" size:20]; captionStyling.color = [UIColor blueColor]; captionStyling.windowColor = [UIColor orangeColor]; captionStyling.backgroundColor = [UIColor colorWithRed:0.3 green:0.6 blue:0.3 alpha:0.7]; captionStyling.edgeStyle = JWEdgeStyleRaised; config.captions = captionStyling; Swift: var captionStyling: JWCaptionStyling = JWCaptionStyling() captionStyling.font = UIFont (name: \"Zapfino\", size: 20) captionStyling.color = UIColor.blueColor() captionStyling.edgeStyle = JWEdgeStyleRaised captionStyling.windowColor = UIColor.purpleColor() captionStyling.backgroundColor = UIColor(red: 0.3, green: 0.6, blue: 0.3, alpha: 0.7) config.captions = captionStyling If JWCaptionStyling is not used, then the captions will be styled based on the user's preferences, which are determined in the device's Accessibility Subtitles Captioning settings. Note: JWCaptionStyling supersedes the device's Accessibility Subtitles Captioning settings in the case of side car captions and HLS In-Manifest WebVTT subtitles. JWCaptionStyling cannot be used on CEA-608 Captions; CEA-608 Captions will be styled in accordance to the device's Accessibility Subtitles Captioning settings.","title":"Caption styling"},{"location":"embedding/embedding/","text":"Basic Embed This section includes samples for basic player operations such as configuration. All examples given in Objective C (1) and Swift (2). For additional examples, see the sample application Declaring a player variable 1) @property JWPlayerController *player; 2) var player: JWPlayerController Creating and populating a player configuration 1) JWConfig *config = [[JWConfig alloc] init]; 2) var config: JWConfig = JWConfig() Populating video media file location Provide a URL to a media file location (for example an HLS playlist or MP4 file). 1) config.file = @ rdquo;http://example.com/hls.m3u8 rdquo;; 2) config.file = ldquo;http://example.com/hls.m3u8 rdquo; Convenience initializer that accepts a single media file location Provide a URL to a media file location (for example an HLS playlist or MP4 file). 1) config = [JWConfig configWithFile:@ rdquo;http://example.com/hls.m3u8 rdquo;]; 2) config = JWConfig(file: rdquo;http://example.com/hls.m3u8 rdquo;) Initializing player instance with a configuration 1) player = [[JWPlayerController alloc] initWithConfig:config]; 2) player = JWPlayerController(config:config) Setting player view size To set the player view size, you can use config.size property during init: 1) config.size = CGSizeMake(100, 100); 2) config.size = CGSizeMake(100, 100) You can also scale player.view after the player is created: 1) player.view.frame = CGRectMake(0, 0, 100, 100); 2) player.view.frame = CGRectMake(0, 0, 100, 100) After the player is instantiated, the player.view property represents the player window. You can add it to your view hierarchy to present it on the screen: 1) [myController.view addSubview:player.view]; 2) myController.view.addSubview(player.view()) It is strongly recommended to add the player view to the view hierarchy in or after the viewDidAppear method of the embedding view controller.** Configuration object All the data needed to create a player should be populated in the configuration object before calling initializing a player. Here are some examples. Additional player configuration params: config.image = @\"/image.jpg\"; //title image config.title = @\"JWPlayer Demo\"; // video title config.controls = YES; //default //show/hide controls config.repeat = NO; //default //repeat after completion Local file playback The JW Player SDK for iOS supports playback of local files of the following formats: MP4 and M4V with H.264 AAC/MP3. To play a local file you need to specify path to the file including file:// protocol. config.file = [NSString stringWithFormat:@\"file://%@\", [[NSBundle mainBundle] pathForResource:@\"sintel\" ofType:@\"mp4\"]]; Offline handling You may specify a poster image to display when the device goes offline by setting a UIImage to the offlinePoster property of JWConfig, and you may specify a message to be displayed on top of the image by setting an NSString to the offlineMessage property of JWConfig. config.offlinePoster = [UIImage imageNamed:@\"my_Image's_Name.png\"]; config.offlineMessage = @\"my offline message\"; If the offlinePoster property is nil, the player will display the thumbnail image set to the image property of JWConfig. If both properties are nil, the player will display a black screen. If the offlineMessage property is nil, the player will display its standard message \"No Internet Connection\". Setting Multiple Sources To create a player with multiple-source MP4 files, config.sources should be populated with an array of JWSource objects representing different MP4 objects, such as: config.sources = @[[JWSource sourceWithFile:@\"/example_low.mp4\" label:@\"180p Streaming\" isDefault:YES], [JWSource sourceWithFile:@\"/example_med.mp4\" label:@\"270p Streaming\"], [JWSource sourceWithFile:@\"/example_hi.mp4\" label:@\"720p Streaming\"]]; Playlists To create a playlist, an array of JWPlaylistItem objects called playlist is passed to the player. JWPlaylistItem *item1 = [[JWPlaylistItem alloc] init]; item1.file = @ rdquo;http://example.com/hls.m3u8 rdquo;; item1.tracks = @[caption1, caption2]; item1.title = @\"Playlist Video With Captions\"; JWPlaylistItem *item2 = [[JWPlaylistItem alloc] init]; item2.file = @ rdquo;http://example.com/hls.m3u8 rdquo;; item2.adSchedule = @[adBreak1, adBreak2]; item2.title = @\"Playlist Video With Ads\"; config.playlist = @[item1, item2]; Note that you can set an adSchedule for each JWPlaylistItem. Playback Rate Our SDK allows you to set a playback speed, in a range between 0.25 to 4. NSArray *playbackRates = @[@0.5, @1, @2]; // To setup custom playback rates JWConfig *config = [JWConfig new]; config.playbackRateControls = YES; config.playbackRates = playbackRates; // To use default playback rates JWConfig *config = [JWConfig new]; config.playbackRateControls = YES; self.player = [[JWPlayerController alloc] initWithConfig:config]; Please note that for certain streams the playback speed can only be decreased. Also note that audio pitch is currently not adjusted. Casting Before casting, you must instantiate a JWCastController object with a JWPlayerController object and scan for devices. self.castController = [[JWCastController alloc]initWithPlayer:self.player]; [self.castController scanForDevices]; By adhering to the JWCastingDelegate protocol and implementing the delegate method onCastingDevicesAvailable:, you will be informed whenever a casting device goes online. A list of connectable devices can be obtained by accessing your castController's' availableDevices property. To connect to a device: JWCastingDevice *device = [self.castController.availableDevices objectAtIndex:index]; [self.castController connectToDevice:device]; When a connection is successfully established, the JWCastingDelegate method named onConnectedToCastingDevice: is called and you can cast by calling: [self.castController cast]; To stop casting without disconnecting from the casting device: [self.castController stopCasting]; To disconnect from the casting device: [self.castController disconnect];","title":"Basic Embedding"},{"location":"embedding/embedding/#basic-embed","text":"This section includes samples for basic player operations such as configuration. All examples given in Objective C (1) and Swift (2). For additional examples, see the sample application Declaring a player variable 1) @property JWPlayerController *player; 2) var player: JWPlayerController Creating and populating a player configuration 1) JWConfig *config = [[JWConfig alloc] init]; 2) var config: JWConfig = JWConfig() Populating video media file location Provide a URL to a media file location (for example an HLS playlist or MP4 file). 1) config.file = @ rdquo;http://example.com/hls.m3u8 rdquo;; 2) config.file = ldquo;http://example.com/hls.m3u8 rdquo; Convenience initializer that accepts a single media file location Provide a URL to a media file location (for example an HLS playlist or MP4 file). 1) config = [JWConfig configWithFile:@ rdquo;http://example.com/hls.m3u8 rdquo;]; 2) config = JWConfig(file: rdquo;http://example.com/hls.m3u8 rdquo;) Initializing player instance with a configuration 1) player = [[JWPlayerController alloc] initWithConfig:config]; 2) player = JWPlayerController(config:config) Setting player view size To set the player view size, you can use config.size property during init: 1) config.size = CGSizeMake(100, 100); 2) config.size = CGSizeMake(100, 100) You can also scale player.view after the player is created: 1) player.view.frame = CGRectMake(0, 0, 100, 100); 2) player.view.frame = CGRectMake(0, 0, 100, 100) After the player is instantiated, the player.view property represents the player window. You can add it to your view hierarchy to present it on the screen: 1) [myController.view addSubview:player.view]; 2) myController.view.addSubview(player.view()) It is strongly recommended to add the player view to the view hierarchy in or after the viewDidAppear method of the embedding view controller.** Configuration object All the data needed to create a player should be populated in the configuration object before calling initializing a player. Here are some examples. Additional player configuration params: config.image = @\"/image.jpg\"; //title image config.title = @\"JWPlayer Demo\"; // video title config.controls = YES; //default //show/hide controls config.repeat = NO; //default //repeat after completion Local file playback The JW Player SDK for iOS supports playback of local files of the following formats: MP4 and M4V with H.264 AAC/MP3. To play a local file you need to specify path to the file including file:// protocol. config.file = [NSString stringWithFormat:@\"file://%@\", [[NSBundle mainBundle] pathForResource:@\"sintel\" ofType:@\"mp4\"]];","title":"Basic Embed"},{"location":"embedding/embedding/#offline-handling","text":"You may specify a poster image to display when the device goes offline by setting a UIImage to the offlinePoster property of JWConfig, and you may specify a message to be displayed on top of the image by setting an NSString to the offlineMessage property of JWConfig. config.offlinePoster = [UIImage imageNamed:@\"my_Image's_Name.png\"]; config.offlineMessage = @\"my offline message\"; If the offlinePoster property is nil, the player will display the thumbnail image set to the image property of JWConfig. If both properties are nil, the player will display a black screen. If the offlineMessage property is nil, the player will display its standard message \"No Internet Connection\".","title":"Offline handling"},{"location":"embedding/embedding/#setting-multiple-sources","text":"To create a player with multiple-source MP4 files, config.sources should be populated with an array of JWSource objects representing different MP4 objects, such as: config.sources = @[[JWSource sourceWithFile:@\"/example_low.mp4\" label:@\"180p Streaming\" isDefault:YES], [JWSource sourceWithFile:@\"/example_med.mp4\" label:@\"270p Streaming\"], [JWSource sourceWithFile:@\"/example_hi.mp4\" label:@\"720p Streaming\"]];","title":"Setting Multiple Sources"},{"location":"embedding/embedding/#playlists","text":"To create a playlist, an array of JWPlaylistItem objects called playlist is passed to the player. JWPlaylistItem *item1 = [[JWPlaylistItem alloc] init]; item1.file = @ rdquo;http://example.com/hls.m3u8 rdquo;; item1.tracks = @[caption1, caption2]; item1.title = @\"Playlist Video With Captions\"; JWPlaylistItem *item2 = [[JWPlaylistItem alloc] init]; item2.file = @ rdquo;http://example.com/hls.m3u8 rdquo;; item2.adSchedule = @[adBreak1, adBreak2]; item2.title = @\"Playlist Video With Ads\"; config.playlist = @[item1, item2]; Note that you can set an adSchedule for each JWPlaylistItem.","title":"Playlists"},{"location":"embedding/embedding/#playback-rate","text":"Our SDK allows you to set a playback speed, in a range between 0.25 to 4. NSArray *playbackRates = @[@0.5, @1, @2]; // To setup custom playback rates JWConfig *config = [JWConfig new]; config.playbackRateControls = YES; config.playbackRates = playbackRates; // To use default playback rates JWConfig *config = [JWConfig new]; config.playbackRateControls = YES; self.player = [[JWPlayerController alloc] initWithConfig:config]; Please note that for certain streams the playback speed can only be decreased. Also note that audio pitch is currently not adjusted.","title":"Playback Rate"},{"location":"embedding/embedding/#casting","text":"Before casting, you must instantiate a JWCastController object with a JWPlayerController object and scan for devices. self.castController = [[JWCastController alloc]initWithPlayer:self.player]; [self.castController scanForDevices]; By adhering to the JWCastingDelegate protocol and implementing the delegate method onCastingDevicesAvailable:, you will be informed whenever a casting device goes online. A list of connectable devices can be obtained by accessing your castController's' availableDevices property. To connect to a device: JWCastingDevice *device = [self.castController.availableDevices objectAtIndex:index]; [self.castController connectToDevice:device]; When a connection is successfully established, the JWCastingDelegate method named onConnectedToCastingDevice: is called and you can cast by calling: [self.castController cast]; To stop casting without disconnecting from the casting device: [self.castController stopCasting]; To disconnect from the casting device: [self.castController disconnect];","title":"Casting"},{"location":"embedding/features/","text":"Advanced Features DVR DVR functionality allows viewers to pause, play, and rewind live events. If viewers begin watching an event past the initial broadcast time, and do not want to miss any important content, this allows them to start at an earlier position. If DVR is supported and enabled on the streaming server, add \"?DVR\" to the video url (eg. http://mydomain.com/video.m3u8?DVR) to indicate to the player that the HLS Playlist is a DVR stream. JW Player will in turn adjust the visual elements on the control bar to support DVR and make it clear to the viewer that the live stream can be paused or rewound to a point in the past. Background Audio If you have not enabled the \"Audio, AirPlay and Picture in Picture\" setting in the Background Modes of your project's capabilities list, add the UIBackgroundModes key in your app's Info.plist and set its value to an array containing the string \"audio\". Import the AVFoundation framework and add the following code to your app: AVAudioSession *audioSession = [AVAudioSession sharedInstance]; NSError *setCategoryError = nil; BOOL success = [audioSession setCategory:AVAudioSessionCategoryPlayback error: setCategoryError]; NSError *activationError = nil; success = [audioSession setActive:YES error: activationError]; In a Swift based project, please follow these steps to achieve the background audio capability: Step 1- Add a key in your Info.plist called 'Required background modes'. Under this key, add a value called 'App plays audio or streams audio/video using AirPlay'. Step 2- In your AppDelegate, import AVFoundation Step 3- In your didFinishLaunchingWithOptions method add this: do { try AVAudioSession.sharedInstance().setCategory(AVAudioSessionCategoryPlayback) } catch { print(\"error coming back from background\") } Note: Per Apple's documentation , adding the audio string to the UIBackgroundModes array in your Info.plist will also enable streaming via AirPlay. Lock Screen Controls An application reproducing content with JW Player will display controls on the device's lockscreen by default as long as background audio is enabled. Play/Pause will always be displayed, and can be toggled with the Apple EarPod headphones. Previous and next will appear greyed out when playing single items and ads. Previous will be greyed out for the first item of a playlist. Next will Not be greyed out for the last item of a playlist; tapping next will load the first item of the playlist. Additionally, information about the content being reproduced will be displayed: Information set to a JWPlaylistItem (title and image) will be displayed. If absent from the JWPlaylistItem, respective information from the JWConfig will be displayed. If a title is not specified, the name of the application will be displayed as a title. When Google IMA ads are in reproduction, the title switches to \"Advertisement\". If you wish to disable this feature and/or override it with your own settings, set the JWPlayerController's displayLockScreenControls property to NO. Note: In order for Lock Screen controls to appear, the audioSession's categoryOptions property must include AVAudioSessionCategoryOptionDefaultToSpeaker or AVAudioSessionCategoryOptionAllowBluetooth, or return 0. Custom asset options When initializing the player, an options dictionary for AVURLAsset customization can be specified, via the assetOptions property in JWConfig, JWSources or JWPlaylistItem. The AVURLAsset customization options are described in AVURLAsset documentation . For example: JWConfig *config = [[JWConfig alloc] initWithContentUrl:@\"your url\"]; config.assetOptions = @{@\"AVURLAssetHTTPHeaderFieldsKey\":@{@\"cookie\": @\"cookie data\"}}; DRM Apple FairPlay Overview FairPlay Streaming (FPS) securely delivers keys to Apple mobile devices, enabling the playback of encrypted video content. FPS allows a content provider to securely deliver an AES 128-bit content key from the provider s key server. The content provider encrypts the H.264 video content with the content key. Then, FPS decrypts the encrypted video content with the content key. The JW Player SDK does not encrypt streams for you, and does not implement a key server. The JW Player SDK detects when a stream is FairPlay encrypted and asks your app to provide the necessary information and key to decrypt the content. This approach gives you the flexibility to encrypt your content and manage your keys the way you prefer. In order for you to be FPS compliant you must: Write a Key Security Module that is installed in a key server's software. Add code to allow your app to communicate with the server that can deliver the key needed to decrypt the content. Create the formatting and encryption software for the media content server. This software prepares the encrypted content stream according to the Apple HTTP Live Streaming (HLS) specification. For more information on being FPS compliant, please refer to Apple's FairPlay documentation . Implementation In order to play FairPlay encrypted HLS, the class in your app which communicates with your FairPlay Key Server must adhere to the JWDrmDataSource protocol and be set to the JWPlayerController's drmDataSource property. self.player.drmDataSource = self; When an FPS-specific tag is included in the playlist of a media stream that the Apple device is asked to play, the JW Player SDK will ask your application for the necessary information to prepare an encrypted key request: * the fetchContentIdentifierForRequest: delegate method gets called, requesting that the content identifier (also known as Asset ID) be passed in through its completion block. - (void)fetchContentIdentifierForRequest:(NSURL *)loadingRequestURL forEncryption:(JWEncryption)encryption withCompletion:(void (^)(NSData *))completion { if(encryption == JWFairPlay) { NSString *assetId; // obtain asset Id here. NSData *assetIdData = [NSData dataWithBytes:[assetId cStringUsingEncoding:NSUTF8StringEncoding] length:[assetId lengthOfBytesUsingEncoding:NSUTF8StringEncoding]]; completion(assetIdData); } } the fetchAppIdentifierForRequest: delegate method is called, prompting for an Application Certificate which must get passed via the completion block. The Application Certificate must be encoded with the X.509 standard with distinguished encoding rules (DER). It is obtained when registering an FPS playback app with Apple, by supplying an X.509 Certificate Signing Request linked to your private key. - (void)fetchAppIdentifierForRequest:(NSURL *)loadingRequestURL forEncryption:(JWEncryption)encryption withCompletion:(void (^)(NSData *))completion { if(encryption == JWFairPlay) { NSData *applicationId; // obtain application Id here. completion(applicationId); } } When the key request is ready: * the fetchContentKeyWithRequest: delegate method is called, providing you with the key request data (also known as SPC - Server Playback Context message) which you need to retrieve the CKC (Content Key Context) message from your key server. The CKC message must be returned via the completion block, under the response parameter. When your app sends the request to the server, the FPS code on the server wraps the required key in an encrypted message and sends it to the app. Your app then provides the JW Player SDK with the encrypted message, which is used to unwrap the message and decrypt the stream, so the iOS device can play the media. * For resources that may expire, you can specify a renewal date in the completion block. * We suggest also specifying the content type (the UTI indicating the type of data contained by the response) when a renewal date is set. - (void)fetchContentKeyWithRequest:(NSData *)requestBytes forEncryption:(JWEncryption)encryption withCompletion:(void (^)(NSData *, NSDate *, NSString *))completion { if(encryption == JWFairPlay) { NSData *key = [self.serverLink keyFromRequest:requestBytes]; // obtain key here from server by providing the request. NSDate *renewalDate; // (optional) NSString *contentType = @ application/octet-stream ; // (optional) completion(key, renewalDate, contentType); } } Note: FairPlay decryption only works on devices; it will not work on a simulator.","title":"Advanced Features"},{"location":"embedding/features/#advanced-features","text":"","title":"Advanced Features"},{"location":"embedding/features/#dvr","text":"DVR functionality allows viewers to pause, play, and rewind live events. If viewers begin watching an event past the initial broadcast time, and do not want to miss any important content, this allows them to start at an earlier position. If DVR is supported and enabled on the streaming server, add \"?DVR\" to the video url (eg. http://mydomain.com/video.m3u8?DVR) to indicate to the player that the HLS Playlist is a DVR stream. JW Player will in turn adjust the visual elements on the control bar to support DVR and make it clear to the viewer that the live stream can be paused or rewound to a point in the past.","title":"DVR"},{"location":"embedding/features/#background-audio","text":"If you have not enabled the \"Audio, AirPlay and Picture in Picture\" setting in the Background Modes of your project's capabilities list, add the UIBackgroundModes key in your app's Info.plist and set its value to an array containing the string \"audio\". Import the AVFoundation framework and add the following code to your app: AVAudioSession *audioSession = [AVAudioSession sharedInstance]; NSError *setCategoryError = nil; BOOL success = [audioSession setCategory:AVAudioSessionCategoryPlayback error: setCategoryError]; NSError *activationError = nil; success = [audioSession setActive:YES error: activationError]; In a Swift based project, please follow these steps to achieve the background audio capability: Step 1- Add a key in your Info.plist called 'Required background modes'. Under this key, add a value called 'App plays audio or streams audio/video using AirPlay'. Step 2- In your AppDelegate, import AVFoundation Step 3- In your didFinishLaunchingWithOptions method add this: do { try AVAudioSession.sharedInstance().setCategory(AVAudioSessionCategoryPlayback) } catch { print(\"error coming back from background\") } Note: Per Apple's documentation , adding the audio string to the UIBackgroundModes array in your Info.plist will also enable streaming via AirPlay.","title":"Background Audio"},{"location":"embedding/features/#lock-screen-controls","text":"An application reproducing content with JW Player will display controls on the device's lockscreen by default as long as background audio is enabled. Play/Pause will always be displayed, and can be toggled with the Apple EarPod headphones. Previous and next will appear greyed out when playing single items and ads. Previous will be greyed out for the first item of a playlist. Next will Not be greyed out for the last item of a playlist; tapping next will load the first item of the playlist. Additionally, information about the content being reproduced will be displayed: Information set to a JWPlaylistItem (title and image) will be displayed. If absent from the JWPlaylistItem, respective information from the JWConfig will be displayed. If a title is not specified, the name of the application will be displayed as a title. When Google IMA ads are in reproduction, the title switches to \"Advertisement\". If you wish to disable this feature and/or override it with your own settings, set the JWPlayerController's displayLockScreenControls property to NO. Note: In order for Lock Screen controls to appear, the audioSession's categoryOptions property must include AVAudioSessionCategoryOptionDefaultToSpeaker or AVAudioSessionCategoryOptionAllowBluetooth, or return 0.","title":"Lock Screen Controls"},{"location":"embedding/features/#custom-asset-options","text":"When initializing the player, an options dictionary for AVURLAsset customization can be specified, via the assetOptions property in JWConfig, JWSources or JWPlaylistItem. The AVURLAsset customization options are described in AVURLAsset documentation . For example: JWConfig *config = [[JWConfig alloc] initWithContentUrl:@\"your url\"]; config.assetOptions = @{@\"AVURLAssetHTTPHeaderFieldsKey\":@{@\"cookie\": @\"cookie data\"}};","title":"Custom asset options"},{"location":"embedding/features/#drm","text":"","title":"DRM"},{"location":"embedding/features/#apple-fairplay","text":"","title":"Apple FairPlay"},{"location":"embedding/features/#overview","text":"FairPlay Streaming (FPS) securely delivers keys to Apple mobile devices, enabling the playback of encrypted video content. FPS allows a content provider to securely deliver an AES 128-bit content key from the provider s key server. The content provider encrypts the H.264 video content with the content key. Then, FPS decrypts the encrypted video content with the content key. The JW Player SDK does not encrypt streams for you, and does not implement a key server. The JW Player SDK detects when a stream is FairPlay encrypted and asks your app to provide the necessary information and key to decrypt the content. This approach gives you the flexibility to encrypt your content and manage your keys the way you prefer. In order for you to be FPS compliant you must: Write a Key Security Module that is installed in a key server's software. Add code to allow your app to communicate with the server that can deliver the key needed to decrypt the content. Create the formatting and encryption software for the media content server. This software prepares the encrypted content stream according to the Apple HTTP Live Streaming (HLS) specification. For more information on being FPS compliant, please refer to Apple's FairPlay documentation .","title":"Overview"},{"location":"embedding/features/#implementation","text":"In order to play FairPlay encrypted HLS, the class in your app which communicates with your FairPlay Key Server must adhere to the JWDrmDataSource protocol and be set to the JWPlayerController's drmDataSource property. self.player.drmDataSource = self; When an FPS-specific tag is included in the playlist of a media stream that the Apple device is asked to play, the JW Player SDK will ask your application for the necessary information to prepare an encrypted key request: * the fetchContentIdentifierForRequest: delegate method gets called, requesting that the content identifier (also known as Asset ID) be passed in through its completion block. - (void)fetchContentIdentifierForRequest:(NSURL *)loadingRequestURL forEncryption:(JWEncryption)encryption withCompletion:(void (^)(NSData *))completion { if(encryption == JWFairPlay) { NSString *assetId; // obtain asset Id here. NSData *assetIdData = [NSData dataWithBytes:[assetId cStringUsingEncoding:NSUTF8StringEncoding] length:[assetId lengthOfBytesUsingEncoding:NSUTF8StringEncoding]]; completion(assetIdData); } } the fetchAppIdentifierForRequest: delegate method is called, prompting for an Application Certificate which must get passed via the completion block. The Application Certificate must be encoded with the X.509 standard with distinguished encoding rules (DER). It is obtained when registering an FPS playback app with Apple, by supplying an X.509 Certificate Signing Request linked to your private key. - (void)fetchAppIdentifierForRequest:(NSURL *)loadingRequestURL forEncryption:(JWEncryption)encryption withCompletion:(void (^)(NSData *))completion { if(encryption == JWFairPlay) { NSData *applicationId; // obtain application Id here. completion(applicationId); } } When the key request is ready: * the fetchContentKeyWithRequest: delegate method is called, providing you with the key request data (also known as SPC - Server Playback Context message) which you need to retrieve the CKC (Content Key Context) message from your key server. The CKC message must be returned via the completion block, under the response parameter. When your app sends the request to the server, the FPS code on the server wraps the required key in an encrypted message and sends it to the app. Your app then provides the JW Player SDK with the encrypted message, which is used to unwrap the message and decrypt the stream, so the iOS device can play the media. * For resources that may expire, you can specify a renewal date in the completion block. * We suggest also specifying the content type (the UTI indicating the type of data contained by the response) when a renewal date is set. - (void)fetchContentKeyWithRequest:(NSData *)requestBytes forEncryption:(JWEncryption)encryption withCompletion:(void (^)(NSData *, NSDate *, NSString *))completion { if(encryption == JWFairPlay) { NSData *key = [self.serverLink keyFromRequest:requestBytes]; // obtain key here from server by providing the request. NSDate *renewalDate; // (optional) NSString *contentType = @ application/octet-stream ; // (optional) completion(key, renewalDate, contentType); } } Note: FairPlay decryption only works on devices; it will not work on a simulator.","title":"Implementation"},{"location":"integration/analytics/","text":"Analytics JW Player enables plugin developers to listen for media playback and VAST/VPAID native ads analytics events. !!!important Analytics events are not available for AVPlayer instances instantiated by IMA or FreeWheel plugins. !!! To receive analytics events, include the JWAVPlayerAnalyticsDelegate in a class that can be used as a delegate. Then, implement delegated methods. Code Example: @interface JWAVPlayerAnalyticsObserver : NSObject JWAVPlayerAnalyticsDelegate // implement the methods - (void)playbackRateDidChange:(CGFloat)rate {} - (void)playerStatusDidChange:(AVPlayerStatus)status {} - (void)playerItemDidChange:(AVPlayerItem *)item {} - (void)playerErrorDidChange:(NSError *)error {} - (void)playerLayerVideoRectDidChange:(CGRect)videoRect {} //set the class as a delegate into the player self.player.analyticsDelegate = [JWAVPlayerAnalyticsObserver new];","title":"Analytics"},{"location":"integration/analytics/#analytics","text":"JW Player enables plugin developers to listen for media playback and VAST/VPAID native ads analytics events. !!!important Analytics events are not available for AVPlayer instances instantiated by IMA or FreeWheel plugins. !!! To receive analytics events, include the JWAVPlayerAnalyticsDelegate in a class that can be used as a delegate. Then, implement delegated methods. Code Example: @interface JWAVPlayerAnalyticsObserver : NSObject JWAVPlayerAnalyticsDelegate // implement the methods - (void)playbackRateDidChange:(CGFloat)rate {} - (void)playerStatusDidChange:(AVPlayerStatus)status {} - (void)playerItemDidChange:(AVPlayerItem *)item {} - (void)playerErrorDidChange:(NSError *)error {} - (void)playerLayerVideoRectDidChange:(CGRect)videoRect {} //set the class as a delegate into the player self.player.analyticsDelegate = [JWAVPlayerAnalyticsObserver new];","title":"Analytics"},{"location":"intro/getting-started/","text":"Getting Started Important Notice SDK Installation via CocoaPods SDK Manual Installation Installing Google IMA Important Notice Please Note: Free, Premium, and Platinum edition Customers [Update from 18 Oct 2017] The JW Player SDK for iOS will no longer be included in these editions beginning 18 Oct 2018 . This provides our Free, Premium, and Platinum edition customers one (1) year to find an alternative to our SDK. Enterprise customers will continue to have access to the JW Player SDK for iOS and will not be impacted. Please contact support+sdk@jwplayer.com if you have additional questions. Installation Swift Note: However you choose to integrate the SDK into your project, you may need to import the framework into your bridging header. Importing Objective-C into Swift To import a set of Objective-C files in the same app target as your Swift code, you rely on an Objective-C bridging header to expose those files to Swift. Xcode offers to create this header file when you add a Swift file to an existing Objective-C app, or an Objective-C file to an existing Swift app. If you accept, Xcode creates the header file along with the file you were creating, and names it by your product module name followed by adding \"-Bridging-Header.h\". (You ll learn more about the product module name later, in Naming Your Product Module.) Excerpt From: Apple Inc. Using Swift with Cocoa and Objective-C (4.1)\" . CocoaPods CocoaPods is a dependency manager for Cocoa projects. You can install it with the following command: $ gem install cocoapods To integrate the JWPlayer iOS SDK into your Xcode project using CocoaPods, specify it in your Podfile (created when running the pod init command in your project's root directory: target ' Your Target Name ' do pod 'JWPlayer-SDK', '~ 3.0' end Then, run the following command in your terminal, or from the CocoaPods app: $ pod install Carthage Carthage is a decentralized dependency manager that builds your dependencies and provides you with binary frameworks. The JWPlayer iOS SDK framework does not support Carthage at this time. Manual Installation If you prefer not to use a dependency manager, you can integrate the SDK into your project manually: Downloading the SDK Software Sign in to your JW Player dashboard at https://dashboard.jwplayer.com . Browse to the Publisher - Tools page. In the Downloads section, click the JW Player SDK download link. The unzipped package contains the following folders: Framework : The JW Player SDK software. Documentation : inline API reference documentation for the JW Player framework for use in XCode. Setting up your XCode Environment Add the JW Player framework to your XCode project: In the Build settings, add the -all_load linker flag: Add your license key either in code, or in your info.plist properties file. Either way, make sure you enter this string exactly as you received it from JW Player, or as it appears in your JW Player dashboard. The string is cAse-seNsiTive. The methods: Programmatic method: In your AppDelegate.m , set your Player Key using the JWPlayerController's class method setPlayerKey: in the application:didFinishLaunchingWithOptions: method, like so: Objective-C Objective-c - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions { [JWPlayerController setPlayerKey:@\"YOUR_KEY_HERE\"]; return YES; } Swift Swift func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) - Bool { JWPlayerController.setPlayerKey(\"YOUR_KEY_HERE\") return true } - Info.plist method: Create a string entry named JWPlayerKey , and set its value to be your JW Player license key: . 4. Import the JWPlayerController.h file into the view controller where you want to use the player. Alternately, you can import it in a .pch file to make it available across your whole project. Installing Google IMA In order to use our Google IMA Ad Client, you must install the Google IMA framework version 3.7.x. This framework can also be integrated into your project via CocoaPods... pod 'GoogleAds-IMA-iOS-SDK' ...as well as manually: download the Google IMA iOS SDK here . The zip file contains two folders; you will need the Google IMA folder (GoogleInteractiveMediaAds-GoogleIMA3), NOT the Google IMA for Ad Mobs folder (GoogleInteractiveMediaAds-GoogleIMA3ForAdMob). To link the library, open XCode, select your project, and proceed to the Targets Section. Under the General tab, proceed to Linked Framework and Libraries and tap the plus sign. Select the Add Other button in the pop-up view and navigate to the Goole IMA SDK folder. Select the GoogleInteractiveMediaAds.framework in the GoogleInteractiveMediaAds-GoogleIMA3 folder and select Open.","title":"Library and Project Setup"},{"location":"intro/getting-started/#getting-started","text":"Important Notice SDK Installation via CocoaPods SDK Manual Installation Installing Google IMA","title":"Getting Started"},{"location":"intro/getting-started/#important-notice","text":"","title":"Important Notice"},{"location":"intro/getting-started/#please-note-free-premium-and-platinum-edition-customers","text":"[Update from 18 Oct 2017] The JW Player SDK for iOS will no longer be included in these editions beginning 18 Oct 2018 . This provides our Free, Premium, and Platinum edition customers one (1) year to find an alternative to our SDK. Enterprise customers will continue to have access to the JW Player SDK for iOS and will not be impacted. Please contact support+sdk@jwplayer.com if you have additional questions.","title":"Please Note: Free, Premium, and Platinum edition Customers"},{"location":"intro/getting-started/#installation","text":"","title":"Installation"},{"location":"intro/getting-started/#swift-note","text":"However you choose to integrate the SDK into your project, you may need to import the framework into your bridging header.","title":"Swift Note:"},{"location":"intro/getting-started/#importing-objective-c-into-swift","text":"To import a set of Objective-C files in the same app target as your Swift code, you rely on an Objective-C bridging header to expose those files to Swift. Xcode offers to create this header file when you add a Swift file to an existing Objective-C app, or an Objective-C file to an existing Swift app. If you accept, Xcode creates the header file along with the file you were creating, and names it by your product module name followed by adding \"-Bridging-Header.h\". (You ll learn more about the product module name later, in Naming Your Product Module.) Excerpt From: Apple Inc. Using Swift with Cocoa and Objective-C (4.1)\" .","title":"Importing Objective-C into Swift"},{"location":"intro/getting-started/#cocoapods","text":"CocoaPods is a dependency manager for Cocoa projects. You can install it with the following command: $ gem install cocoapods To integrate the JWPlayer iOS SDK into your Xcode project using CocoaPods, specify it in your Podfile (created when running the pod init command in your project's root directory: target ' Your Target Name ' do pod 'JWPlayer-SDK', '~ 3.0' end Then, run the following command in your terminal, or from the CocoaPods app: $ pod install","title":"CocoaPods"},{"location":"intro/getting-started/#carthage","text":"Carthage is a decentralized dependency manager that builds your dependencies and provides you with binary frameworks. The JWPlayer iOS SDK framework does not support Carthage at this time.","title":"Carthage"},{"location":"intro/getting-started/#manual-installation","text":"If you prefer not to use a dependency manager, you can integrate the SDK into your project manually:","title":"Manual Installation"},{"location":"intro/getting-started/#downloading-the-sdk-software","text":"Sign in to your JW Player dashboard at https://dashboard.jwplayer.com . Browse to the Publisher - Tools page. In the Downloads section, click the JW Player SDK download link. The unzipped package contains the following folders: Framework : The JW Player SDK software. Documentation : inline API reference documentation for the JW Player framework for use in XCode.","title":"Downloading the SDK Software"},{"location":"intro/getting-started/#setting-up-your-xcode-environment","text":"Add the JW Player framework to your XCode project: In the Build settings, add the -all_load linker flag: Add your license key either in code, or in your info.plist properties file. Either way, make sure you enter this string exactly as you received it from JW Player, or as it appears in your JW Player dashboard. The string is cAse-seNsiTive. The methods: Programmatic method: In your AppDelegate.m , set your Player Key using the JWPlayerController's class method setPlayerKey: in the application:didFinishLaunchingWithOptions: method, like so:","title":"Setting up your XCode Environment"},{"location":"intro/getting-started/#objective-c","text":"Objective-c - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions { [JWPlayerController setPlayerKey:@\"YOUR_KEY_HERE\"]; return YES; }","title":"Objective-C"},{"location":"intro/getting-started/#swift","text":"Swift func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) - Bool { JWPlayerController.setPlayerKey(\"YOUR_KEY_HERE\") return true } - Info.plist method: Create a string entry named JWPlayerKey , and set its value to be your JW Player license key: . 4. Import the JWPlayerController.h file into the view controller where you want to use the player. Alternately, you can import it in a .pch file to make it available across your whole project.","title":"Swift"},{"location":"intro/getting-started/#installing-google-ima","text":"In order to use our Google IMA Ad Client, you must install the Google IMA framework version 3.7.x. This framework can also be integrated into your project via CocoaPods... pod 'GoogleAds-IMA-iOS-SDK' ...as well as manually: download the Google IMA iOS SDK here . The zip file contains two folders; you will need the Google IMA folder (GoogleInteractiveMediaAds-GoogleIMA3), NOT the Google IMA for Ad Mobs folder (GoogleInteractiveMediaAds-GoogleIMA3ForAdMob). To link the library, open XCode, select your project, and proceed to the Targets Section. Under the General tab, proceed to Linked Framework and Libraries and tap the plus sign. Select the Add Other button in the pop-up view and navigate to the Goole IMA SDK folder. Select the GoogleInteractiveMediaAds.framework in the GoogleInteractiveMediaAds-GoogleIMA3 folder and select Open.","title":"Installing Google IMA"},{"location":"intro/requirements/","text":"SDK Version 2.9 Requirements iOS version 10 and above Google IMA SDK version 3.7.0 Google Chromecast SDK version 2.10.0.4070 FreeWheel AdManager. You must download it yourself from FreeWheel Hub Portal Includes JW Player version 7.12 Oct 18, 2017 Free, Premium, and Platinum edition customers please note: the JW Player SDK for iOS will no longer be included in these editions beginning OCT 18th 2018 . This provides our Free, Premium, and Platinum edition customers one (1) year to find an alternative to our SDK. Enterprise customers will continue to have access to the JW Player SDK for iOS and will not be impacted. Please contact support+sdk@jwplayer.com if you have additional questions.","title":"System Requirements"},{"location":"intro/requirements/#sdk-version-29-requirements","text":"iOS version 10 and above Google IMA SDK version 3.7.0 Google Chromecast SDK version 2.10.0.4070 FreeWheel AdManager. You must download it yourself from FreeWheel Hub Portal Includes JW Player version 7.12","title":"SDK Version 2.9 Requirements"},{"location":"intro/requirements/#oct-18-2017","text":"Free, Premium, and Platinum edition customers please note: the JW Player SDK for iOS will no longer be included in these editions beginning OCT 18th 2018 . This provides our Free, Premium, and Platinum edition customers one (1) year to find an alternative to our SDK. Enterprise customers will continue to have access to the JW Player SDK for iOS and will not be impacted. Please contact support+sdk@jwplayer.com if you have additional questions.","title":"Oct 18, 2017"},{"location":"migration/v2dot8/","text":"Migration from older SDK versions Migrating from 2.7.x to 2.8.0 Beginning with version 2.8.0, the JW Player SDK for iOS will be a dynamic library . If you are updating from version 2.7.x to 2.8.0+ you should follow the migration process below. If you import the SDK manually Remove static *.a library file from project. Remove *.a library from project target Build Phases - Link Binary with Libraries. Add JWPlayer_iOS_SDK.framework to project directory. In project target Build Phases - Link Binary with Libraries press + , select Add Other and select JWPlayer_iOS_SDK.framework. In project target General - Embedded Binaries press + and select JWPlayer_iOS_SDK.framework. Go to Search in project tree section, switch Find to Replace , in top input type JWPlayer-iOS_SDK/ and in bottom input type JWPLayer_iOS_SDK/ . Press Replace All button. Perform Clean project. Perform Clean Build Folder. Try to build. If you use CocoaPods Go to Search in project tree section, switch Find to Replace , in top input type JWPlayer-iOS_SDK/ and in bottom input type JWPlayer_iOS_SDK/ . Press Replace All button. Perform Clean project. Perform Clean Build Folder. Try to build. Prior to app submission, run this script - more details below. Important CocoaPods requires libraries to support all target platform architectures, including x86_64 and i386 simulators; this is convenient for testing. Apple, however, requires x86_64 and i386 targets to be removed prior to submitting the app to the App Store. This is a known issue and you can check its status in the Apple Developer Forums . To remove these two simulator architectures before pushing to the App Store, you can use this script .","title":"To 2.8.0 from 2.7.x"},{"location":"migration/v2dot8/#migration-from-older-sdk-versions","text":"","title":"Migration from older SDK versions"},{"location":"migration/v2dot8/#migrating-from-27x-to-280","text":"Beginning with version 2.8.0, the JW Player SDK for iOS will be a dynamic library . If you are updating from version 2.7.x to 2.8.0+ you should follow the migration process below.","title":"Migrating from 2.7.x to 2.8.0"},{"location":"migration/v2dot8/#if-you-import-the-sdk-manually","text":"Remove static *.a library file from project. Remove *.a library from project target Build Phases - Link Binary with Libraries. Add JWPlayer_iOS_SDK.framework to project directory. In project target Build Phases - Link Binary with Libraries press + , select Add Other and select JWPlayer_iOS_SDK.framework. In project target General - Embedded Binaries press + and select JWPlayer_iOS_SDK.framework. Go to Search in project tree section, switch Find to Replace , in top input type JWPlayer-iOS_SDK/ and in bottom input type JWPLayer_iOS_SDK/ . Press Replace All button. Perform Clean project. Perform Clean Build Folder. Try to build.","title":"If you import the SDK manually"},{"location":"migration/v2dot8/#if-you-use-cocoapods","text":"Go to Search in project tree section, switch Find to Replace , in top input type JWPlayer-iOS_SDK/ and in bottom input type JWPlayer_iOS_SDK/ . Press Replace All button. Perform Clean project. Perform Clean Build Folder. Try to build. Prior to app submission, run this script - more details below. Important CocoaPods requires libraries to support all target platform architectures, including x86_64 and i386 simulators; this is convenient for testing. Apple, however, requires x86_64 and i386 targets to be removed prior to submitting the app to the App Store. This is a known issue and you can check its status in the Apple Developer Forums . To remove these two simulator architectures before pushing to the App Store, you can use this script .","title":"If you use CocoaPods"},{"location":"migration/v3/","text":"JW Player iOS SDK Migration from v2.x to v3.x This Migration Guide will walk you through all major changes from the 2.x versions of the JW Player iOS SDK. License Key Download Your 2.x license key will not work with the JW Player iOS SDK for versions 3.0 and above. You can get your new mobile-only license key from your JW Player account representative. You may currently use Cocoapods to update to 3.x. API Summary The 3.x release of the JW Player iOS SDK contains some API changes, most importantly: All API callbacks now use the form on #CallbackName# :(JWEvent *)event . The event parameter will have the old callback's parameters as properties. This (as well as the introduction of the 'JWPlayerError' class) lays the groundwork for future updates. For example, onAdPause 's event parameter has properties tag , newState , and oldState , which were previously passed in as parameters themselves. The player states are now represented with the JWPlayerState enum instead of strings. The adConfig property of the JWConfig has been renamed to advertising for consistency across all JW Player platforms. The JWConfig 's adSchedule property has been replaced with a schedule property in the config's advertising property. Skin customization is now handled with JWSkinStyling instead of the JWConfig's premiumSkin and cssSkin properties. See Skinning section for more information. API Changes Added API JWPlayerController Method Description pauseAd:(BOOL)state Pauses or resumes ad playback. loadFeed:(NSString *)feedUrl Loads a new playlist feed into the player. next Tells JW Player to immediately play the next playlist item. JWConfig Property Description desc A description of your video or audio item. mediaId Unique identifier of the item; applicable only when a a single file is set. nextupOffset Configures when the Next Up card displays during playback. displayTitle Configures if the title of a media file should be displayed. displayDescription Configures if the description title of a media file should be displayed. skin The customization options for the player's skin. logo The configuration options for a clickable watermark that is overlayed on the video. JWAdConfig Property Description tag The URL of the VAST tag to display. schedule An array of JWAdBreak objects that provides info about ad breaks. rules Used to control the frequency of ad playback. JWPlaylistItem Property Description recommendations URL to a feed that contains related items for a particular playlist item. JWRelatedConfig Property Description displayMode Configure the recommendations user interface (Shelf or overlay). JWPlayerError Class Description JWPlayerError A subclass of NSError . A JWPlayerError can thus be safely cast as an NSError without needing to further modify your code. Modified API Method Signature Changes 2.x 3.x Notes load:(NSString *)file loadFeed:(NSString *)feedUrl loadPlaylist:(NSArray *)playlist load:(NSArray JWPlaylistItem * *)playlist seek:(NSInteger)position seek:(NSUInteger)position Changed parameter type. Name Changes 2.x 3.x Notes adClient client adConfig advertising adSchedule schedule captionStyling captions NSInteger currentQualityLevel NSUInteger currentQuality Changed property name and type. defaultValue defaultTrack fontColor color imaSettings googimaSettings isInFullscreen fullscreen JWAdConfig JWAdvertising Changed class name. levels qualityLevels BOOL nonlinear JWAdType type Changed property name and type. NSNumber *playbackPosition CGFloat position Changed property name and type. playerState state relatedConfig related stretch stretching Type Changes Name 2.x 3.x Notes bitRateUpperBound double CGFloat buffer NSInteger NSUInteger currentAudioTrack NSInteger NSUInteger currentCaptions NSInteger NSUInteger currentQualityLevel NSInteger NSUInteger currentQuality Changed property name and type. duration double CGFloat nonlinear BOOL JWAdType type Changed property name and type. playbackPosition NSNumber* CGFloat position Changed property name and type. preload BOOL JWPreload skipOffset NSInteger NSUInteger skipOffset Removed API Methods Method Description loadConfig: Loads a new JWConfig object into the player. pictureInPictureDisabled Boolean value that determines whether the video should allow Picture In Picture display. enterFullScreen Switches the player to full screen mode. exitFullScreen Switches the player to inline mode. togglePictureInPicture Toggles the player into and out of Picture In Picture display. timeSliderAbove Sets the timeslider above the control bar buttons at all player sizes. premiumSkin Sets a premium JW Player skin to use with the player. cssSkin A url to a CSS file that contains a skin to be used during player setup. Callback Changes Modified Callbacks All callbacks now use the form onCallbackName:(JWEvent *)event . Renamed Callbacks 2.x 3.x onOpenRelatedOverlay: onRelatedOpen: onCloseRelatedOverlay: onRelatedClose: Removed Callbacks Callback onCaptionsChange: onQualityLevels: onQualityChange: onVisualQuality: onPictureInPicture: Enum Changes 2.x 3.x JWFairPlay (JWEncryption) JWEncryptionFairPlay none (JWEdgeStyle) JWEdgeStyleNone dropshadow (JWEdgeStyle) JWEdgeStyleDropshadow raised (JWEdgeStyle) JWEdgeStyleRaised depressed (JWEdgeStyle) JWEdgeStyleDepressed uniform (JWEdgeStyle) JWEdgeStyleUniform JWRelatedOpenMethod JWRelatedMethod JWRelatedCompleteAction JWRelatedOnComplete JWStretchUniform (JWStretching) JWStretchingUniform JWStretchExactFit (JWStretching) JWStretchingExactFit JWStretchFill (JWStretching) JWStretchingFill JWStretchNone (JWStretching) JWStretchingNone vastPlugin (JWAdClient) JWAdClientVast googIMA (JWAdClient) JWAdClientGoogima freewheel (JWAdClient) JWAdClientFreewheel","title":"To 3.x from 2.x"},{"location":"migration/v3/#jw-player-ios-sdk-migration-from-v2x-to-v3x","text":"This Migration Guide will walk you through all major changes from the 2.x versions of the JW Player iOS SDK.","title":"JW Player iOS SDK Migration from v2.x to v3.x"},{"location":"migration/v3/#license-key-download","text":"Your 2.x license key will not work with the JW Player iOS SDK for versions 3.0 and above. You can get your new mobile-only license key from your JW Player account representative. You may currently use Cocoapods to update to 3.x.","title":"License Key &amp; Download"},{"location":"migration/v3/#api-summary","text":"The 3.x release of the JW Player iOS SDK contains some API changes, most importantly: All API callbacks now use the form on #CallbackName# :(JWEvent *)event . The event parameter will have the old callback's parameters as properties. This (as well as the introduction of the 'JWPlayerError' class) lays the groundwork for future updates. For example, onAdPause 's event parameter has properties tag , newState , and oldState , which were previously passed in as parameters themselves. The player states are now represented with the JWPlayerState enum instead of strings. The adConfig property of the JWConfig has been renamed to advertising for consistency across all JW Player platforms. The JWConfig 's adSchedule property has been replaced with a schedule property in the config's advertising property. Skin customization is now handled with JWSkinStyling instead of the JWConfig's premiumSkin and cssSkin properties. See Skinning section for more information.","title":"API Summary"},{"location":"migration/v3/#api-changes","text":"","title":"API Changes"},{"location":"migration/v3/#added-api","text":"","title":"Added API"},{"location":"migration/v3/#jwplayercontroller","text":"Method Description pauseAd:(BOOL)state Pauses or resumes ad playback. loadFeed:(NSString *)feedUrl Loads a new playlist feed into the player. next Tells JW Player to immediately play the next playlist item.","title":"JWPlayerController"},{"location":"migration/v3/#jwconfig","text":"Property Description desc A description of your video or audio item. mediaId Unique identifier of the item; applicable only when a a single file is set. nextupOffset Configures when the Next Up card displays during playback. displayTitle Configures if the title of a media file should be displayed. displayDescription Configures if the description title of a media file should be displayed. skin The customization options for the player's skin. logo The configuration options for a clickable watermark that is overlayed on the video.","title":"JWConfig"},{"location":"migration/v3/#jwadconfig","text":"Property Description tag The URL of the VAST tag to display. schedule An array of JWAdBreak objects that provides info about ad breaks. rules Used to control the frequency of ad playback.","title":"JWAdConfig"},{"location":"migration/v3/#jwplaylistitem","text":"Property Description recommendations URL to a feed that contains related items for a particular playlist item.","title":"JWPlaylistItem"},{"location":"migration/v3/#jwrelatedconfig","text":"Property Description displayMode Configure the recommendations user interface (Shelf or overlay).","title":"JWRelatedConfig"},{"location":"migration/v3/#jwplayererror","text":"Class Description JWPlayerError A subclass of NSError . A JWPlayerError can thus be safely cast as an NSError without needing to further modify your code.","title":"JWPlayerError"},{"location":"migration/v3/#modified-api","text":"","title":"Modified API"},{"location":"migration/v3/#method-signature-changes","text":"2.x 3.x Notes load:(NSString *)file loadFeed:(NSString *)feedUrl loadPlaylist:(NSArray *)playlist load:(NSArray JWPlaylistItem * *)playlist seek:(NSInteger)position seek:(NSUInteger)position Changed parameter type.","title":"Method Signature Changes"},{"location":"migration/v3/#name-changes","text":"2.x 3.x Notes adClient client adConfig advertising adSchedule schedule captionStyling captions NSInteger currentQualityLevel NSUInteger currentQuality Changed property name and type. defaultValue defaultTrack fontColor color imaSettings googimaSettings isInFullscreen fullscreen JWAdConfig JWAdvertising Changed class name. levels qualityLevels BOOL nonlinear JWAdType type Changed property name and type. NSNumber *playbackPosition CGFloat position Changed property name and type. playerState state relatedConfig related stretch stretching","title":"Name Changes"},{"location":"migration/v3/#type-changes","text":"Name 2.x 3.x Notes bitRateUpperBound double CGFloat buffer NSInteger NSUInteger currentAudioTrack NSInteger NSUInteger currentCaptions NSInteger NSUInteger currentQualityLevel NSInteger NSUInteger currentQuality Changed property name and type. duration double CGFloat nonlinear BOOL JWAdType type Changed property name and type. playbackPosition NSNumber* CGFloat position Changed property name and type. preload BOOL JWPreload skipOffset NSInteger NSUInteger skipOffset","title":"Type Changes"},{"location":"migration/v3/#removed-api-methods","text":"Method Description loadConfig: Loads a new JWConfig object into the player. pictureInPictureDisabled Boolean value that determines whether the video should allow Picture In Picture display. enterFullScreen Switches the player to full screen mode. exitFullScreen Switches the player to inline mode. togglePictureInPicture Toggles the player into and out of Picture In Picture display. timeSliderAbove Sets the timeslider above the control bar buttons at all player sizes. premiumSkin Sets a premium JW Player skin to use with the player. cssSkin A url to a CSS file that contains a skin to be used during player setup.","title":"Removed API Methods"},{"location":"migration/v3/#callback-changes","text":"","title":"Callback Changes"},{"location":"migration/v3/#modified-callbacks","text":"All callbacks now use the form onCallbackName:(JWEvent *)event .","title":"Modified Callbacks"},{"location":"migration/v3/#renamed-callbacks","text":"2.x 3.x onOpenRelatedOverlay: onRelatedOpen: onCloseRelatedOverlay: onRelatedClose:","title":"Renamed Callbacks"},{"location":"migration/v3/#removed-callbacks","text":"Callback onCaptionsChange: onQualityLevels: onQualityChange: onVisualQuality: onPictureInPicture:","title":"Removed Callbacks"},{"location":"migration/v3/#enum-changes","text":"2.x 3.x JWFairPlay (JWEncryption) JWEncryptionFairPlay none (JWEdgeStyle) JWEdgeStyleNone dropshadow (JWEdgeStyle) JWEdgeStyleDropshadow raised (JWEdgeStyle) JWEdgeStyleRaised depressed (JWEdgeStyle) JWEdgeStyleDepressed uniform (JWEdgeStyle) JWEdgeStyleUniform JWRelatedOpenMethod JWRelatedMethod JWRelatedCompleteAction JWRelatedOnComplete JWStretchUniform (JWStretching) JWStretchingUniform JWStretchExactFit (JWStretching) JWStretchingExactFit JWStretchFill (JWStretching) JWStretchingFill JWStretchNone (JWStretching) JWStretchingNone vastPlugin (JWAdClient) JWAdClientVast googIMA (JWAdClient) JWAdClientGoogima freewheel (JWAdClient) JWAdClientFreewheel","title":"Enum Changes"},{"location":"monetization/ad-configuration/","text":"Ad Configuration To customize the Advertising experience (for example, to enable ad skipping or to display a custom ad message), an instance of the JWAdConfig can be set to the JWConfig's advertising property: Objective C: JWAdConfig *adConfig = [JWAdConfig new]; adConfig.adMessage = @\"Ad duration countdown xx\"; adConfig.skipMessage = @\"Skip in xx\"; adConfig.skipText = @\"Move on\"; adConfig.skipOffset = 3; config.advertising = adConfig; Swift: var adConfig: JWAdConfig = JWAdConfig() adConfig.adMessage = \"Ad duration countdown xx\" adConfig.skipMessage = \"Skip in xx\" adConfig.skipText = \"Move on\" adConfig.skipOffset = 3 config.advertising = adConfig","title":"Basic Ad Embed"},{"location":"monetization/ad-configuration/#ad-configuration","text":"To customize the Advertising experience (for example, to enable ad skipping or to display a custom ad message), an instance of the JWAdConfig can be set to the JWConfig's advertising property: Objective C: JWAdConfig *adConfig = [JWAdConfig new]; adConfig.adMessage = @\"Ad duration countdown xx\"; adConfig.skipMessage = @\"Skip in xx\"; adConfig.skipText = @\"Move on\"; adConfig.skipOffset = 3; config.advertising = adConfig; Swift: var adConfig: JWAdConfig = JWAdConfig() adConfig.adMessage = \"Ad duration countdown xx\" adConfig.skipMessage = \"Skip in xx\" adConfig.skipText = \"Move on\" adConfig.skipOffset = 3 config.advertising = adConfig","title":"Ad Configuration"},{"location":"monetization/ad-google_ima/","text":"Google IMA In order to play ads using Google Interactive Media Ads (Google IMA) you must import the Google IMA framework into your project ( Installing Google IMA ) and set your JWAdConfig s client to JWAdClientGoogima . config.advertising.client = JWAdClientGoogima; Ads are scheduled for Google IMA the same way they are scheduled using our default ad client (vastPlugin). The VMAP control ad insertion also overrides any adSchedule arrays when using Google IMA. Customization of ad messages and skipping are not handled with Google IMA at the moment, but can be done when creating an ad tag. The Google IMA ad client can be used in playlists and supports waterfalling, bumpers, as well as standard and optimized ad pods.","title":"Google IMA"},{"location":"monetization/ad-google_ima/#google-ima","text":"In order to play ads using Google Interactive Media Ads (Google IMA) you must import the Google IMA framework into your project ( Installing Google IMA ) and set your JWAdConfig s client to JWAdClientGoogima . config.advertising.client = JWAdClientGoogima; Ads are scheduled for Google IMA the same way they are scheduled using our default ad client (vastPlugin). The VMAP control ad insertion also overrides any adSchedule arrays when using Google IMA. Customization of ad messages and skipping are not handled with Google IMA at the moment, but can be done when creating an ad tag. The Google IMA ad client can be used in playlists and supports waterfalling, bumpers, as well as standard and optimized ad pods.","title":"Google IMA"},{"location":"monetization/ad-rules/","text":"Ad Rules The JW Player iOS SDK supports the JW8 Ad Rules. For more information about Ad Rules please visit the JW8 Ad Rules reference . To set ad rules: JWAdRules *adRules = [JWAdRules new]; adRules.startOn = 2; adRules.frequency = 5; adRules.timeBetweenAds = 30; adRules.startOnSeek = JWAdShownPre; config.advertising.adRules = adRules;","title":"Ad Rules"},{"location":"monetization/ad-rules/#ad-rules","text":"The JW Player iOS SDK supports the JW8 Ad Rules. For more information about Ad Rules please visit the JW8 Ad Rules reference . To set ad rules: JWAdRules *adRules = [JWAdRules new]; adRules.startOn = 2; adRules.frequency = 5; adRules.timeBetweenAds = 30; adRules.startOnSeek = JWAdShownPre; config.advertising.adRules = adRules;","title":"Ad Rules"},{"location":"monetization/ad-schedules/","text":"Ad Scheduling Ads can be scheduled in two ways: An adSchedule Object Set an array of AdBreak objects to the schedule property of the config's advertising object: Objective C: config.advertising.schedule = @[[JWAdBreak adBreakWithTag:@\"/vast.xml\" offset:@\"pre\"], [JWAdBreak adBreakWithTag:@\"/vast.xml\" offset:@\"0:00:05\"], [JWAdBreak adBreakWithTag:@\"/vast.xml\" offset:@\"50%\"], [JWAdBreak adBreakWithTag:@\"/vast.xml\" offset:@\"post\"]]; Swift: config.advertising.schedule = [JWAdBreak(tag: \"/vast.xml\", offset:\"pre\"), JWAdBreak(tag: \"/vast.xml\", offset:\"5\"), JWAdBreak(tag: \"/vast.xml\", offset:\"50%\"), JWAdBreak(tag: \"/vast.xml\", offset:\"post\")] VMAP Advertisements Set the VMAP tag to the adVmap property in your configuration's advertising object: config.advertising.adVmap = \"http://adserver.example/vmap.xml\"; Note that if you set both an adVmap and an ad schedule, the schedule array will be ignored. AdConfig properties specifying custom ad messages, skip offsets, and other properties are compatible with VMAPs. VPAID 2.0 Advertisements VPAID 2.0 ads are scheduled in the same way as regular VAST advertisements: JWAdBreak *vpaidAdBreak = [JWAdBreak adBreakWithTag:@\"http://url-to-vpaid-tag.xml\" offset:@\"0:00:05\"]; let vpaidAdBreak: JWAdBreak = JWAdBreak(tag: \"http://url-to-vpaid-tag.xml\", offset:\"5\") VPAID 2.0 support caveats Only VPAID 2.0 JavaScript creatives are supported, Flash or Silverlight creatives are not supported. HTML5 Fullscreen API's are currently NOT supported since the JW Player SDK takes care of it's own fullscreen behavior. Because of this you should make sure that your creatives are responsive, they should be able to handle dynamic changes in width and height, which occur for example when a user rotates their device. Google IMA does not currently support VPAID 2.0 for iOS . We recommend you to test your VPAID creatives within our SDK before distributing them as creatives may throw errors or not work as expected when rendered by the JW Player iOS SDK.","title":"Ad Scheduling"},{"location":"monetization/ad-schedules/#ad-scheduling","text":"Ads can be scheduled in two ways:","title":"Ad Scheduling"},{"location":"monetization/ad-schedules/#an-adschedule-object","text":"Set an array of AdBreak objects to the schedule property of the config's advertising object: Objective C: config.advertising.schedule = @[[JWAdBreak adBreakWithTag:@\"/vast.xml\" offset:@\"pre\"], [JWAdBreak adBreakWithTag:@\"/vast.xml\" offset:@\"0:00:05\"], [JWAdBreak adBreakWithTag:@\"/vast.xml\" offset:@\"50%\"], [JWAdBreak adBreakWithTag:@\"/vast.xml\" offset:@\"post\"]]; Swift: config.advertising.schedule = [JWAdBreak(tag: \"/vast.xml\", offset:\"pre\"), JWAdBreak(tag: \"/vast.xml\", offset:\"5\"), JWAdBreak(tag: \"/vast.xml\", offset:\"50%\"), JWAdBreak(tag: \"/vast.xml\", offset:\"post\")]","title":"An adSchedule Object"},{"location":"monetization/ad-schedules/#vmap-advertisements","text":"Set the VMAP tag to the adVmap property in your configuration's advertising object: config.advertising.adVmap = \"http://adserver.example/vmap.xml\"; Note that if you set both an adVmap and an ad schedule, the schedule array will be ignored. AdConfig properties specifying custom ad messages, skip offsets, and other properties are compatible with VMAPs.","title":"VMAP Advertisements"},{"location":"monetization/ad-schedules/#vpaid-20-advertisements","text":"VPAID 2.0 ads are scheduled in the same way as regular VAST advertisements: JWAdBreak *vpaidAdBreak = [JWAdBreak adBreakWithTag:@\"http://url-to-vpaid-tag.xml\" offset:@\"0:00:05\"]; let vpaidAdBreak: JWAdBreak = JWAdBreak(tag: \"http://url-to-vpaid-tag.xml\", offset:\"5\")","title":"VPAID 2.0 Advertisements"},{"location":"monetization/ad-schedules/#vpaid-20-support-caveats","text":"Only VPAID 2.0 JavaScript creatives are supported, Flash or Silverlight creatives are not supported. HTML5 Fullscreen API's are currently NOT supported since the JW Player SDK takes care of it's own fullscreen behavior. Because of this you should make sure that your creatives are responsive, they should be able to handle dynamic changes in width and height, which occur for example when a user rotates their device. Google IMA does not currently support VPAID 2.0 for iOS . We recommend you to test your VPAID creatives within our SDK before distributing them as creatives may throw errors or not work as expected when rendered by the JW Player iOS SDK.","title":"VPAID 2.0 support caveats"},{"location":"monetization/ad-tag-variables/","text":"Ad Tag Variables Ad Tag Variables are supported in the iOS SDK. Many VAST servers use \"tag variables\" to optimize fill and provide more information on how ads are being viewed. JW Player supports a number of variables that can be added to your VAST tag URL. Once an ad call is made by JW Player, the variables will be replaced accordingly. Supported Ad Tag Variables in VAST domain The domain name the player is embedded on. player-height By defaults this always returns 100%. player-width By defaults this always returns 100%. random-number Typically used as a cache-buster, to ensure there is no local caching of the VAST response. page-url The file path of the video. timestamp The current time of the user's computer, as a UNIX timestamp. Please note that unlike the web player, the companion-div and referrer tag variables are not supported by the iOS SDK at the moment. Playlist Item Properties Playlist item properties allow publishers to send any metadata from the JW Player Playlist to an ad server. Assuming that you had something entered in your playlist XML like: Leonardo You would then be able to use the item-artist variable in your ad tag. When making a call to an ad server, we will automatically fill this in as Leonardo. This is helpful to target ads to metadata keywords or to target different ads to each item in a playlist. Here are a few more example properties: item-file : the file URL of the currently playing video. item-duration : the duration in seconds of the currently playing video. (Only works with midroll and postroll ads) The following ad tag variables must be specified inside of the playlist XML: item-title : the title of the currently playing video.1 item-description : the short description of the currently playing video.1 item-mediaid : the custom media id of the currently playing video.1","title":"Ad tag variables"},{"location":"monetization/ad-tag-variables/#ad-tag-variables","text":"Ad Tag Variables are supported in the iOS SDK. Many VAST servers use \"tag variables\" to optimize fill and provide more information on how ads are being viewed. JW Player supports a number of variables that can be added to your VAST tag URL. Once an ad call is made by JW Player, the variables will be replaced accordingly. Supported Ad Tag Variables in VAST domain The domain name the player is embedded on. player-height By defaults this always returns 100%. player-width By defaults this always returns 100%. random-number Typically used as a cache-buster, to ensure there is no local caching of the VAST response. page-url The file path of the video. timestamp The current time of the user's computer, as a UNIX timestamp. Please note that unlike the web player, the companion-div and referrer tag variables are not supported by the iOS SDK at the moment. Playlist Item Properties Playlist item properties allow publishers to send any metadata from the JW Player Playlist to an ad server. Assuming that you had something entered in your playlist XML like: Leonardo You would then be able to use the item-artist variable in your ad tag. When making a call to an ad server, we will automatically fill this in as Leonardo. This is helpful to target ads to metadata keywords or to target different ads to each item in a playlist. Here are a few more example properties: item-file : the file URL of the currently playing video. item-duration : the duration in seconds of the currently playing video. (Only works with midroll and postroll ads) The following ad tag variables must be specified inside of the playlist XML: item-title : the title of the currently playing video.1 item-description : the short description of the currently playing video.1 item-mediaid : the custom media id of the currently playing video.1","title":"Ad Tag Variables"},{"location":"monetization/ad-waterfall/","text":"Ad Waterfalling To create an ad waterfall, an array of ad tags is passed to a JWAdBreak object: NSArray *tags = @[@\"/firstVast.xml\", @\"/secondVast.xml\"]; JWAdBreak *adBreak = [JWAdBreak adBreakWithTags:tags offset:@ rdquo;10% rdquo;]; If the first tag in the tags array fails to play, the player falls back to the second in the list and so on, until it finds one that can be played.","title":"Tag Waterfall"},{"location":"monetization/ad-waterfall/#ad-waterfalling","text":"To create an ad waterfall, an array of ad tags is passed to a JWAdBreak object: NSArray *tags = @[@\"/firstVast.xml\", @\"/secondVast.xml\"]; JWAdBreak *adBreak = [JWAdBreak adBreakWithTags:tags offset:@ rdquo;10% rdquo;]; If the first tag in the tags array fails to play, the player falls back to the second in the list and so on, until it finds one that can be played.","title":"Ad Waterfalling"},{"location":"monetization/freewheel/","text":"FreeWheel Overview The JW Player SDK for iOS is integrated with FreeWheel Ad Manager and supports VAST and VPAID advertising. In this document we will set up your project with FreeWheel and demonstrate all supported features of the FreeWheel implementation. Supported Features Pre-rolls Mid-rolls VPAID Ad Skip Offset Ad Click-through Multiple Ad Instances Custom Parameters Setting up your project for FreeWheel SDK Building with the Framework Add the FreeWheel AdManager.framework to your project. This can be downloaded from your FreeWheel Hub account (sign-in required). Place AdManager.framework in your project directory. In Build Phases Link Binary With Libraries , add AdManager.framework . !!!important As per FreeWheel's documentation , be sure that -ObjC is added to Build Settings Other Linker Flags . !!! Now, you can configure FreeWheel ads in the JW Player SDK. If you are using Swift instead of Objective-C, use to the FreeWheel guide to set up your library. FreeWheel Parameters Setting up a FreeWheel campaign requires the following parameters: Parameter Value networkId 96749 serverId http://cue.v.fwmrm.net profileId 96749:global-cocoa sectionId DemoSiteGroup.01 mediaId DemoVideoGroup.01 FreeWheel Configuration To configure Freewheel ads you have to use JWConfig , JWAdConfig and JWFreewheelConfig in the API. Code Example: // Create JWFreewheelConfig instance and set up FreeWheel parameters JWFreewheelConfig *fwConf = [[JWFreewheelConfig alloc] init]; fwConf.mediaId = @\"DemoVideoGroup.01\"; fwConf.serverId = @\"http://demo.v.fwmrm.net/ad/g/1\"; fwConf.profileId = @\"96749:global-cocoa\"; fwConf.sectionId = @\"DemoSiteGroup.01\"; fwConf.networkId = 96749; // Create JWAdConfig, then assign ad client and JWFreewheelConfig instance created previously. Other parameters available. JWAdConfig *advertising = [[JWAdConfig alloc] init]; advertising.client = JWAdClientFreewheel; advertising.adMessage = @\"Ad message xx\"; advertising.skipMessage = @\"Skip in xx\"; advertising.skipText = @\"Move on\"; advertising.skipOffset = 3; advertising.freewheel = fwConf; // Assign JWAdConfig (with FreeWheel configuration) to JWConfig instance for player JWConfig *conf = [[JWConfig alloc] init]; conf.advertising = advertising; Assign an Ad Schedule to a Playlist Item Set up an ad schedule for FreeWheel ads using the JWAdBreak API and assign it to the adSchedule property of the JWConfig instance. Code Example: // Creating ad breaks: preroll + two midrolls JWAdBreak *prerollBreak = [JWAdBreak adBreakWithTag:@\"custom_preroll_1\" offset:@\"pre\"]; JWAdBreak *midrollBreak_1 = [JWAdBreak adBreakWithTag:@\"custom_midroll_1\" offset:@\"12\"]; JWAdBreak *midrollBreak_2 = [JWAdBreak adBreakWithTag:@\"custom_midroll_2\" offset:@ ldquo;50% rdquo;]; JWAdBreak *midrollBreak_3 = [JWAdBreak adBreakWithTag:@\"custom_midroll_3\" offset:@ ldquo;00:00:45 rdquo;]; JWConfig *conf = [JWConfig alloc init]; // Freewheel config goes here (described previously) // Adding JWAdBreak instances into adSchedule array conf.advertising.schedule = @[prerollBreak, midrollBreak_1, midrollBreak_2, midrollBreak_3]; Note: While creating the JWAdBreak instance you must to pass two parameters - tag and offset: - tag - for FreeWheel it can be any string with any content - it is used for determining a particular ad break in the FreeWheel plugin internally. If you have multiple ad breaks placed in the ad schedule array, the tag value should be unique for each ad break. - offset - position where ad break should be played. Use pre for the JWAdBreak offset value if you want to play pre-roll. Please reference the following section that describes how to set ad offsets for mid-rolls. Ad Offset FreeWheel supports defining advertising offsets. The following formats are available: Type Example Seconds JWAdBreak *secBreak = [JWAdBreak adBreakWithTag:@\"custom_midroll_1\" offset:@\"12\"]; Percentage JWAdBreak *percBreak = [JWAdBreak adBreakWithTag:@\"custom_midroll_2\" offset:@ 50% ]; Time Stamp JWAdBreak *timestampBreak = [JWAdBreak adBreakWithTag:@\"custom_midroll_3\" offset:@ 00:00:45 ]; Custom Parameters Use the custom property of JWFreewheelConfig object to customize your FreeWheel ad request. Code Example: fwConf.custom = @{@ key1 : @ val1 , @ key2 : @ val2 }; VPAID No additional setup required to use VPAID. FreeWheel configuration for VPAID and VAST are the same. However, the FreeWheel campaign should be configured to use VPAID. Unsupported Features Postroll Post-rolls are not supported at this time but will be added in the future.","title":"FreeWheel"},{"location":"monetization/freewheel/#freewheel","text":"","title":"FreeWheel"},{"location":"monetization/freewheel/#overview","text":"The JW Player SDK for iOS is integrated with FreeWheel Ad Manager and supports VAST and VPAID advertising. In this document we will set up your project with FreeWheel and demonstrate all supported features of the FreeWheel implementation.","title":"Overview"},{"location":"monetization/freewheel/#supported-features","text":"Pre-rolls Mid-rolls VPAID Ad Skip Offset Ad Click-through Multiple Ad Instances Custom Parameters","title":"Supported Features"},{"location":"monetization/freewheel/#setting-up-your-project-for-freewheel-sdk","text":"","title":"Setting up your project for FreeWheel SDK"},{"location":"monetization/freewheel/#building-with-the-framework","text":"Add the FreeWheel AdManager.framework to your project. This can be downloaded from your FreeWheel Hub account (sign-in required). Place AdManager.framework in your project directory. In Build Phases Link Binary With Libraries , add AdManager.framework . !!!important As per FreeWheel's documentation , be sure that -ObjC is added to Build Settings Other Linker Flags . !!! Now, you can configure FreeWheel ads in the JW Player SDK. If you are using Swift instead of Objective-C, use to the FreeWheel guide to set up your library.","title":"Building with the Framework"},{"location":"monetization/freewheel/#freewheel-parameters","text":"Setting up a FreeWheel campaign requires the following parameters: Parameter Value networkId 96749 serverId http://cue.v.fwmrm.net profileId 96749:global-cocoa sectionId DemoSiteGroup.01 mediaId DemoVideoGroup.01","title":"FreeWheel Parameters"},{"location":"monetization/freewheel/#freewheel-configuration","text":"To configure Freewheel ads you have to use JWConfig , JWAdConfig and JWFreewheelConfig in the API. Code Example: // Create JWFreewheelConfig instance and set up FreeWheel parameters JWFreewheelConfig *fwConf = [[JWFreewheelConfig alloc] init]; fwConf.mediaId = @\"DemoVideoGroup.01\"; fwConf.serverId = @\"http://demo.v.fwmrm.net/ad/g/1\"; fwConf.profileId = @\"96749:global-cocoa\"; fwConf.sectionId = @\"DemoSiteGroup.01\"; fwConf.networkId = 96749; // Create JWAdConfig, then assign ad client and JWFreewheelConfig instance created previously. Other parameters available. JWAdConfig *advertising = [[JWAdConfig alloc] init]; advertising.client = JWAdClientFreewheel; advertising.adMessage = @\"Ad message xx\"; advertising.skipMessage = @\"Skip in xx\"; advertising.skipText = @\"Move on\"; advertising.skipOffset = 3; advertising.freewheel = fwConf; // Assign JWAdConfig (with FreeWheel configuration) to JWConfig instance for player JWConfig *conf = [[JWConfig alloc] init]; conf.advertising = advertising;","title":"FreeWheel Configuration"},{"location":"monetization/freewheel/#assign-an-ad-schedule-to-a-playlist-item","text":"Set up an ad schedule for FreeWheel ads using the JWAdBreak API and assign it to the adSchedule property of the JWConfig instance. Code Example: // Creating ad breaks: preroll + two midrolls JWAdBreak *prerollBreak = [JWAdBreak adBreakWithTag:@\"custom_preroll_1\" offset:@\"pre\"]; JWAdBreak *midrollBreak_1 = [JWAdBreak adBreakWithTag:@\"custom_midroll_1\" offset:@\"12\"]; JWAdBreak *midrollBreak_2 = [JWAdBreak adBreakWithTag:@\"custom_midroll_2\" offset:@ ldquo;50% rdquo;]; JWAdBreak *midrollBreak_3 = [JWAdBreak adBreakWithTag:@\"custom_midroll_3\" offset:@ ldquo;00:00:45 rdquo;]; JWConfig *conf = [JWConfig alloc init]; // Freewheel config goes here (described previously) // Adding JWAdBreak instances into adSchedule array conf.advertising.schedule = @[prerollBreak, midrollBreak_1, midrollBreak_2, midrollBreak_3]; Note: While creating the JWAdBreak instance you must to pass two parameters - tag and offset: - tag - for FreeWheel it can be any string with any content - it is used for determining a particular ad break in the FreeWheel plugin internally. If you have multiple ad breaks placed in the ad schedule array, the tag value should be unique for each ad break. - offset - position where ad break should be played. Use pre for the JWAdBreak offset value if you want to play pre-roll. Please reference the following section that describes how to set ad offsets for mid-rolls.","title":"Assign an Ad Schedule to a Playlist Item"},{"location":"monetization/freewheel/#ad-offset","text":"FreeWheel supports defining advertising offsets. The following formats are available: Type Example Seconds JWAdBreak *secBreak = [JWAdBreak adBreakWithTag:@\"custom_midroll_1\" offset:@\"12\"]; Percentage JWAdBreak *percBreak = [JWAdBreak adBreakWithTag:@\"custom_midroll_2\" offset:@ 50% ]; Time Stamp JWAdBreak *timestampBreak = [JWAdBreak adBreakWithTag:@\"custom_midroll_3\" offset:@ 00:00:45 ];","title":"Ad Offset"},{"location":"monetization/freewheel/#custom-parameters","text":"Use the custom property of JWFreewheelConfig object to customize your FreeWheel ad request. Code Example: fwConf.custom = @{@ key1 : @ val1 , @ key2 : @ val2 };","title":"Custom Parameters"},{"location":"monetization/freewheel/#vpaid","text":"No additional setup required to use VPAID. FreeWheel configuration for VPAID and VAST are the same. However, the FreeWheel campaign should be configured to use VPAID.","title":"VPAID"},{"location":"monetization/freewheel/#unsupported-features","text":"","title":"Unsupported Features"},{"location":"monetization/freewheel/#postroll","text":"Post-rolls are not supported at this time but will be added in the future.","title":"Postroll"},{"location":"monetization/nonlinear-ads/","text":"Non-linear ads Non-linear ads are now supported by our vast plugin. You can either pass in a non-linear ad tag or pass in a VMAP file containing an ad overlay; in the case of a non-linear ad tag, you must set the JWAdBreak 's type property to JWAdTypeNonlinear . Please note that Google IMA does not support non-linear ads currently. JWAdBreak *nonlinearAdBreak = [JWAdBreak adBreakWithTag:@\"nonlinear/ad.xml\" offset:@\"5\"]; nonlinearAdBreak.type = JWAdTypeNonlinear;","title":"Non linear ads"},{"location":"monetization/nonlinear-ads/#non-linear-ads","text":"Non-linear ads are now supported by our vast plugin. You can either pass in a non-linear ad tag or pass in a VMAP file containing an ad overlay; in the case of a non-linear ad tag, you must set the JWAdBreak 's type property to JWAdTypeNonlinear . Please note that Google IMA does not support non-linear ads currently. JWAdBreak *nonlinearAdBreak = [JWAdBreak adBreakWithTag:@\"nonlinear/ad.xml\" offset:@\"5\"]; nonlinearAdBreak.type = JWAdTypeNonlinear;","title":"Non-linear ads"},{"location":"troubleshooting/troubleshooting/","text":"Troubleshooting Where can I find the JW Player demo app? https://github.com/jwplayer/jwplayer-sdk-ios-demo Where can I find the CocoaPods for this SDK? https://cocoapods.org/?q=jwplayer Where can I find my SDK and license key? Please log into your dashboard and click on 'Downloads Keys'. You will find the SDK download and license key under the 'Downloads' section. Oct 18, 2017 Free, Premium, and Platinum edition customers please note: the JW Player SDK for iOS will no longer be included in these editions beginning OCT 18th 2018 . This provides our Free, Premium, and Platinum edition customers one (1) year to find an alternative to our SDK. Enterprise customers will continue to have access to the JW Player SDK for iOS and will not be impacted. Please contact support+sdk@jwplayer.com if you have additional questions. How do I change the information in the Control Center? You can change the information in the Control Center by implementing the controlCenter function. This function is available as a callback in both our Swift and Objective-C classes. You can also review Apple's documentation for more information: https://developer.apple.com/library/prerelease/ios/documentation/MediaPlayer/Reference/MPNowPlayingInfoCenter_Class/index.html. I received an error on my import header: 'JWPlayer-iOS-SDK/JWPlayerController.h' file not found. What should I do? This error is most likely due to XCode not being able to find the path of the SDK framework. Please go to 'Build Settings', 'Search Paths' then 'Framework Search Path' and examine the path listed for the framework. CocoaPods Guide (Please note that there are a few ways to work with CocoaPods. This is one method.) In terminal enter sudo gem install cocoapods then enter your password and wait for CocoaPods to install. Once complete, navigate to your project. Then enter pod init to create a pod file. You now need to add the pod file to your project. In your XCode project, click on 'File' then 'Add Files' then click on your newly created pod file. You should now see the pod file in your XCode project. Be sure to uncomment the line if you are using Swift (if you are in fact using Swift) and use_frameworks!. Then visit the cocoapods.org web site for the latest JW Player CocoaPod. Go back to your pod file in your XCode project and enter the latest JW Player pod file between the target and end. In terminal, navigate to your project folder and type pod install to integarte your pod file. You will now be instructed to open .xcworkspace file going forward. You can now import the JW Player library.","title":"Q&A"},{"location":"troubleshooting/troubleshooting/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"troubleshooting/troubleshooting/#where-can-i-find-the-jw-player-demo-app","text":"https://github.com/jwplayer/jwplayer-sdk-ios-demo","title":"Where can I find the JW Player demo app?"},{"location":"troubleshooting/troubleshooting/#where-can-i-find-the-cocoapods-for-this-sdk","text":"https://cocoapods.org/?q=jwplayer","title":"Where can I find the CocoaPods for this SDK?"},{"location":"troubleshooting/troubleshooting/#where-can-i-find-my-sdk-and-license-key","text":"Please log into your dashboard and click on 'Downloads Keys'. You will find the SDK download and license key under the 'Downloads' section.","title":"Where can I find my SDK and license key?"},{"location":"troubleshooting/troubleshooting/#oct-18-2017","text":"Free, Premium, and Platinum edition customers please note: the JW Player SDK for iOS will no longer be included in these editions beginning OCT 18th 2018 . This provides our Free, Premium, and Platinum edition customers one (1) year to find an alternative to our SDK. Enterprise customers will continue to have access to the JW Player SDK for iOS and will not be impacted. Please contact support+sdk@jwplayer.com if you have additional questions.","title":"Oct 18, 2017"},{"location":"troubleshooting/troubleshooting/#how-do-i-change-the-information-in-the-control-center","text":"You can change the information in the Control Center by implementing the controlCenter function. This function is available as a callback in both our Swift and Objective-C classes. You can also review Apple's documentation for more information: https://developer.apple.com/library/prerelease/ios/documentation/MediaPlayer/Reference/MPNowPlayingInfoCenter_Class/index.html.","title":"How do I change the information in the Control Center?"},{"location":"troubleshooting/troubleshooting/#i-received-an-error-on-my-import-header-jwplayer-ios-sdkjwplayercontrollerh-file-not-found-what-should-i-do","text":"This error is most likely due to XCode not being able to find the path of the SDK framework. Please go to 'Build Settings', 'Search Paths' then 'Framework Search Path' and examine the path listed for the framework.","title":"I received an error on my import header: 'JWPlayer-iOS-SDK/JWPlayerController.h' file not found. What should I do?"},{"location":"troubleshooting/troubleshooting/#cocoapods-guide","text":"(Please note that there are a few ways to work with CocoaPods. This is one method.) In terminal enter sudo gem install cocoapods then enter your password and wait for CocoaPods to install. Once complete, navigate to your project. Then enter pod init to create a pod file. You now need to add the pod file to your project. In your XCode project, click on 'File' then 'Add Files' then click on your newly created pod file. You should now see the pod file in your XCode project. Be sure to uncomment the line if you are using Swift (if you are in fact using Swift) and use_frameworks!. Then visit the cocoapods.org web site for the latest JW Player CocoaPod. Go back to your pod file in your XCode project and enter the latest JW Player pod file between the target and end. In terminal, navigate to your project folder and type pod install to integarte your pod file. You will now be instructed to open .xcworkspace file going forward. You can now import the JW Player library.","title":"CocoaPods Guide"}]}