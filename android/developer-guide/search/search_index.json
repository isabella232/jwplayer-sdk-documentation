{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"JW Player SDK for Android Last Updated: #date# SDK version: #sdk_version# The JW Player SDK for Android is a media player for the Android Operating System that supports Apple HTTP Live Streaming (HLS), Dynamic Adaptive Streaming over HTTP (DASH), Smooth Streaming, WebM and MP4 playback. The SDK has video specific methods / classes to aid developers in creating custom video applications for Android mobile devices. The SDK package includes a demo application to demonstrate functionality to non-developers. Source code for a simple sample application to help you get started is available on GitHub . Oct 18, 2017 Free, Premium, and Platinum edition customers please note: the JW Player SDK for Android will no longer be included in these editions beginning OCT 18th 2018 . This provides our Free, Premium, and Platinum edition customers one (1) year to find an alternative to our SDK. Enterprise customers will continue to have access to the JW Player SDK for Android and will not be impacted. Please contact support+sdk@jwplayer.com if you have additional questions. Supported Features JW Player for Android supports the following features: HLS, DASH, SS, WebM and MP4 playback. Attribute to provide a poster image in the player (local image file or URL). Fullscreen video playback. API to monitor player state, buffering, seeking, errors, etc. API to monitor and set video and audio qualities. VAST Advertising. VMAP Advertising. Player user interface customization using CSS skinning. Intended Audience This guide assumes that you have the necessary Java and Android development skills to work successfully with the JW Player for Android. You should know how to build and compile Android applications using Android Studio and the latest tools from the Android Developers Kit.","title":"Introduction"},{"location":"#jw-player-sdk-for-android","text":"Last Updated: #date# SDK version: #sdk_version# The JW Player SDK for Android is a media player for the Android Operating System that supports Apple HTTP Live Streaming (HLS), Dynamic Adaptive Streaming over HTTP (DASH), Smooth Streaming, WebM and MP4 playback. The SDK has video specific methods / classes to aid developers in creating custom video applications for Android mobile devices. The SDK package includes a demo application to demonstrate functionality to non-developers. Source code for a simple sample application to help you get started is available on GitHub .","title":"JW Player SDK for Android"},{"location":"#oct-18-2017","text":"Free, Premium, and Platinum edition customers please note: the JW Player SDK for Android will no longer be included in these editions beginning OCT 18th 2018 . This provides our Free, Premium, and Platinum edition customers one (1) year to find an alternative to our SDK. Enterprise customers will continue to have access to the JW Player SDK for Android and will not be impacted. Please contact support+sdk@jwplayer.com if you have additional questions.","title":"Oct 18, 2017"},{"location":"#supported-features","text":"JW Player for Android supports the following features: HLS, DASH, SS, WebM and MP4 playback. Attribute to provide a poster image in the player (local image file or URL). Fullscreen video playback. API to monitor player state, buffering, seeking, errors, etc. API to monitor and set video and audio qualities. VAST Advertising. VMAP Advertising. Player user interface customization using CSS skinning.","title":"Supported Features"},{"location":"#intended-audience","text":"This guide assumes that you have the necessary Java and Android development skills to work successfully with the JW Player for Android. You should know how to build and compile Android applications using Android Studio and the latest tools from the Android Developers Kit.","title":"Intended Audience"},{"location":"2x-redirect/","text":"","title":"2x redirect"},{"location":"about/license/","text":"License The JW Player SDK for Android requires a license to activate and use. Please contact our team for more information, questions, or start a free trial. JW Player terms of service can found here: http://www.jwplayer.com/tos ExoPlayer License Agreement can be found here: https://github.com/google/ExoPlayer/blob/master/LICENSE Oct 18, 2017 Free, Premium, and Platinum edition customers please note: the JW Player SDK for Android will no longer be included in these editions beginning OCT 18th 2018 . This provides our Free, Premium, and Platinum edition customers one (1) year to find an alternative to our SDK. Enterprise customers will continue to have access to the JW Player SDK for Android and will not be impacted. Please contact support+sdk@jwplayer.com if you have additional questions.","title":"License"},{"location":"about/license/#license","text":"The JW Player SDK for Android requires a license to activate and use. Please contact our team for more information, questions, or start a free trial. JW Player terms of service can found here: http://www.jwplayer.com/tos ExoPlayer License Agreement can be found here: https://github.com/google/ExoPlayer/blob/master/LICENSE","title":"License"},{"location":"about/license/#oct-18-2017","text":"Free, Premium, and Platinum edition customers please note: the JW Player SDK for Android will no longer be included in these editions beginning OCT 18th 2018 . This provides our Free, Premium, and Platinum edition customers one (1) year to find an alternative to our SDK. Enterprise customers will continue to have access to the JW Player SDK for Android and will not be impacted. Please contact support+sdk@jwplayer.com if you have additional questions.","title":"Oct 18, 2017"},{"location":"about/release-notes/","text":"JW SDK for Android Release Notes Major Version Releases Version 3.4.0 (Jan 03, 2019) Version 3.3.0 (Nov 29, 2018) Version 3.2.0 (Sep 07, 2018) Version 3.1.0 (Jul 22, 2018) Version 3.0.0 (Jun 18, 2018) Version 2.9.0 (May 29, 2018) Version 2.8.0 (Feb 22, 2018) Version 2.7.0 (Feb 23, 2017) Version 2.6.0 (Dec 09, 2016) Version 2.5.0 (Sep 14, 2016) Version 2.4.0 (Jun 29, 2016) Version 2.3.0 (Jun 20, 2016) Version 2.2.0 (Apr 08, 2016) Version 2.1.0 (Feb 01, 2016) Version 2.0.135 (Dec 16, 2015) Version 2.0.131 (Dec 03, 2015) Version 2.0.129 (Nov 17, 2015) Version 1.x Version 3.4.2 (Build #sdk_build_number# - #date_short_month#) Enhancements Added support for Developer license Version 3.4.1 (Build 67 - Jan 08, 2019) Bug Fixes Fixed an issue where the player would not enter fullscreen mode, if a device has Chrome 71+ Version 3.4.0 (Build 66 - Jan 03, 2019) Bug Fixes Fixed an issue where IMA pre-roll is delayed on the second playlist item Fixed an issue where some VPAID ads show a white screen instead of ad content Fixed an issue where casting is unstable in some cases Fixed an issue where the player autostarts when onPause() lifecycle event is called Fixed an issue where the player shows the first frame of a content before IMA VMAP pre-roll. Fixed an issue where forced switching playlist items with VAST mid-rolls causes playlist items to be missed Fixed an issue where the app crashes with casting is stopped Fixed an issue where wrong captions are shown during casting Fixed an issue where the player buffers infinitely if a non-buffered MP4 stream with configured FreeWheel pre-roll starts playing Fixed an issue where player background is draggable as a result of a long press on it Fixed an issue where no controls are present to switch on/off 608 captions Fixed an issue where playback starts from the very beginning if seek action occurred for paused video with IMA preroll Fixed an issue where 'xx' in custom message for FreeWheel ad is not replaced with countdown Fixed an issue where the CC button appears on the first player setup when a stream has no captions defined Fixed an issue where VAST ad with built-in skip offset can be skipped before the end of countdown Fixed an issue where the player cannot detect when video has captions in the manifest Fixed an issue where the IMA ad request disrupts video playback Fixed an issue where IMA VMAP with bad tag (invalid video url) breaks playback Fixed an issue where the player would report a positive duration in case of DVR streams Fixed an issue where the player's UI shifts up in case of connectivity issue Fixed an issue where clicking through VAST ad before its full loading makes player work in background Fixed an issue where VAST VMAP has no mid-roll ad points on seek bar Fixed an issue where video with configured FreeWheel ad cannot be played for the second time. Features Upgraded SDK to use JW Player 8.6.3 Changed base protocol to https:// to improve security of the SDK. Please ensure that your content and ads are delivered through HTTPS. Seeked position was added to onSeeked() event, so that the actual position can be retrieved Upgraded IMA dependency to 3.9.4 Enhancements The SDK now can be used with multi-window mode. Check this page out for more details Version 3.3.0 (Build 65 - Nov 29, 2018) Bug Fixes Fixed an issue where the player fails to seek forward if seek performed during IMA ad request Fixed an issue where RelatedPluginEvents.OnRelatedCloseListener cannot be imported Fixed an issue where IMA preroll causes endless buffering if playback is started before an MP4 video started buffering. Fixed an issue where the player overlaps cue points for IMA mid-rolls with the relative offset for playlists Fixed an issue where Ad Duration displays 6## instead of actual data in case of VAST mid-roll Fixed an issue where the player crashes if its size is 0 and VPAID ad is loaded Fixed an issue where getDuration() and getPosition() return -.001 for live streams Fixed an issue where a pre-roll shows incorrect duration in case of using startOnSeek Features Added the ability to set custom parameters to FreeWheel and IMA ad configurations, so that publishers can target their campaigns better. Please refer to the FreeWheel and IMA sections for the examples of usage. Added the ability to customize Look-Ahead HLS buffer time. Please refer to this section for the example. Introduced a separate version of the SDK for Amazon tablets. The ExoPlayer is replaced with its Amazon fork. It can be accessed through Maven. Please refer to the Amazon section for more details. Version 3.2.2 (Build 63 - Oct 24, 2018) Bug Fixes Fixed an issue where closed captions are partially hidden when controls are hidden Fixed an issue where certain VPAID 2.0 ads persist until the 3rd playlist item Fixed an issue where IMA post-roll ad causes abnormal playlist behavior Fixed an issue where mid-roll ad does not play when controls are hidden or set to false Fixed an issue where the player fails to seek forward if call to seek happens during IMA ad request Version 3.2.1 (Build 61 - Sep 19, 2018) Bug Fixes Fixed an issue where onErrorListener() does not invoke after the player stops and idles Version 3.2.0 (Build 60 - Sep 07, 2018) Features Added pitch correction for variable rate playback Added a toggle that allows developers to place the player either on a SurfaceView or TextureView. For more details please refer to our developer guide Enhancements Updated ExoPlayer to version 2.8.2 Bug Fixes Fixed a potential vulnerability in the SSL Error Handler Fixed an issue where captions would not adjust position after the control bar was hidden Fixed an issue where IMA mid-roll ad pods would freeze playback after a clickthrough Fixed an issue where the player would end playback in 'idle' state instead of 'complete' state Fixed an issue where an 'Unknown' caption label would be shown in captions menu Fixed an issue where setMute(true) would not work Fixed an issue where the player would infer MediaType from the original URL in the case of a 302 redirect Fixed an HLS playback issue where STATE_READY wasn't called due to different instances of DefaultBandWidthMeter Version 3.1.0 (Build 58 - Jul 22, 2018) Features As another step towards parity between SDK and the web player we have added the ability set up custom playback rates for your media. Please refer to the sample in this documentation section . Bug Fixes Fixed some memory leaks Fixed an issue where finalize() wouldn't trigger when an IMA ad was skipped Fixed an issue where the fullscreen button was missing during FreeWheel ad playback Fixed an issue where playback controls would disappear for audio-only streams Fixed an issue where the HD menu button would appear even if the stream had one quality level Fixed an issue where configuration Livestream + Preroll would return null Fixed an issue where playback controls would appear for FreeWheel VPAID ads Fixed an issue where onAdTime() would be invoked continuously after an ad was skipped Fixed an issue where the \"Learn More\" button and Ad Message would be delayed six seconds into the ad Fixed an issue where live HLS stream would stop because of an error after some time Fixed an issue where seek controls were missing for DVR-enabled live streams Fixed an issue where ad breaks wouldn't be shown on the seek bar until the first one is played Fixed an issue where a clickthrough action would be auto-triggered on Android 4.x devices Version 3.0.0 (Build 53 - Jun 18, 2018) We are excited to announce JW Player SDK 3.0 for Android. This release updates the SDK to JW8 and leverages its new UI UX, optimization, and advertising enhancements to engage your audiences intelligently and monetize your content. In the coming months we will deploy more JW8 features into the JW Player SDKs for iOS Android, so stay tuned! Please refer to this important 3.x migration guide for Android to update your current application from version 2.x to 3.x. This guide includes important information about API changes, new features callbacks, and will help your team with the transition process. You may use Maven to update to SDK 3.x, or you can download the SDK 3 packages and new 3.x license keys from the Publish - Tools section of your JW Player Dashboard. Please note that version 3 of the SDKs are available to our Enterprise edition customers, and require new license keys because 2.x license keys will not work. Features Support for new advertising rules, including timeBetweenAds, startOnSeek, frequency, and startOn. Please refer to our Ad Rules Reference for details on how to use them. Version 2.9.2 (Build 2 - Aug 14, 2018) Bug Fixes Fixed an issue where MediaType wouldn't be recognized in case of a redirect Fixed an issue where the player would freeze due to ad timeout errors from the IMA SDK Fixed an issue where the player would sometimes crash when loading the next playlist item Fixed an issue where OnAdError wouldn't fire with VMAP ads Fixed an issue where VPAID controls were not appearing Version 2.9.1 (Build 1 - Jun 28, 2018) Bug Fixes Fixed an issue where the HD menu button would appear even if the stream had one quality level Fixed an issue where the fullscreen button was missing during FreeWheel ad playback Fixed an issue where playback controls would appear for FreeWheel VPAID ads Fixed an issue where playback controls would disappear for audio-only streams Fixed an issue where \"Live Broadcasting\" message was displayed while static video was buffering upon replay Fixed an issue where seek controls were missing for DVR-enabled live streams Fixed some memory leaks Fixed an issue where finalize() wouldn't trigger when an IMA ad was skipped Fixed an issue where onAdTime() would be invoked continuously after an ad was skipped Fixed an issue where onError() would be erroneously invoked when the player was setting up Fixed an issue where the \"Learn More\" button and Ad Message would be delayed six seconds into the ad Fixed an issue where a clickthrough action would be auto-triggered on Android 4.x devices Features Added an option to enable cross protocol redirects Version 2.9.0 (Build 47 - May 29, 2018) Features We have integrated support for the FreeWheel ad-serving platform. Configure your FreeWheel Ad Manager settings in our new FreeWheel ad client to serve pre-rolls and mid-rolls with other features such as ad-skip and ad-click. Please refer to the new FreeWheel advertising section in our developer guide documentation to get started. Version 2.8.3 (Build 46 - May 19, 2018) Bug Fixes Fixed an issue where IMA midrolls would play immediately after a preroll Version 2.8.2 (Build 44 - April 24, 2018) Bug Fixes Fixed an issue where HLS live streams didn't play if stream type was absent in the URL Version 2.8.1 (Build 43 - Mar 20, 2018) Enhancements Updated Google IMA library to version 3.8.2 and Play Services to 11.8.0. Please don't forget to update the dependencies in your project if you import the AAR file directly instead of using Maven. Bug Fixes Fixed an IMA ad client issue where the app would crash when loading the second playlist item if using a VMAP Fixed an issue where calling getPosition() after an ad completed (media resumed), would return the ad position instead of the media position. Fixed an issue where the app would crash on devices using API Level 18 and lower Fixed an issue that blocked custom headers from being set correctly Version 2.8.0 (Build 42 - Feb 22, 2018) Enhancements Updating from ExoPlayer v1 to v2. Please refer to the Migration Guide for details and instructions to update to this version. Version 2.7.13 (Build 38 - Feb 15, 2018) Bug Fixes Fixed an issue where the app would crash if exiting the activity during IMA setup Fixed a typo in the naming of removeOnAdScheduleListener method. Please update your code accordingly when updating to this version Version 2.7.12 (Build 37 - Feb 06, 2018) Bug Fixes Fixed an issue where the two-letter language codes specified in the HLS manifest for audio tracks were not being displayed correctly Version 2.7.11 (Build 33 - Jan 23, 2018) Enhancements Added synchronization and improved thread handling when a player is created and destroyed in rapid succession Bug Fixes Fixed an issue where the app would crash for multitrack live streams Version 2.7.10 (Build 32 - Jan 09, 2018) Bug Fixes Fixed an issue where an IMA VMAP ad error would autostart the player Version 2.7.9 (Build 31 - Dec 11, 2017) Bug Fixes Fixed an issue where livestream with large DVR windows takes too long to load Fixed an issue where setControls would not persist after a call to load() Fixed an issue where valid VMAP schedules would block content playback when using Google IMA Version 2.7.8 (Build 28 - Nov 17, 2017) Bug Fixes Fixed an issue where navigating from one activity to a new activity (using a different player), then returning back to the first activity would freeze the player Fixed an issue where the two letter language code in the manifest of the AudioTrack objects was not being returned Fixed an issue where the timeSliderAbove UI of the controlbar would not stay consistent when exiting fullscreen mode Fixed an issue where finishing an activity from onSetupError could crash the app. Equivalent to pressing back when the player encountered a setup error Fixed an issue where the HD Button was not visible even though multiple sources had been configured Fixed an issue where backgrounding the app caused in-manifest captions to appear twice in the caption menu Fixed an issue where Quality and AudioTrack selectors would disappear in fullscreen Fixed an issue where changing the visual quality from a paused state after device lock could crash the app Fixed an issue Where programmatically instantiating another JWPlayerView could break the controls and other Web resources of the first player Version 2.7.7 (Build 26 - Oct 09, 2017) Features HTTP Headers can now be updated midstream without reloading the player. Useful for updating expired AES key tokens passed in the HTTP Authorization request header without interrupting AES Encrypted HLS playback Bug Fixes Fixed an issue where the player would hang if the IMA pre-roll was empty Fixed an issue where onAdError would get triggered repeatedly if an IMA mid-roll fails Fixed an issue where HTTP Headers were missing from audio chunk requests Version 2.7.6 (Build 24 - Sep 15, 2017) Features onAdImpression: now includes click-through URL parameter Enhancements Upgraded SDK to use JW Player 7.12.6 Bug Fixes Fixed a regression issue where defaultImpression for VAST did not fire Fixed a regression issue with onAdImpression firing in VAST ads Version 2.7.5 (Build 23 - Jul 21, 2017) Enhancements Upgraded SDK to use JW Player 7.12.1 Bug Fixes Fixed an issue where setting up the player with IMA ads a number of times consecutively, would eventually cause the player to crash Version 2.7.4 (Build 22 - Jun 23, 2017) Enhancements Upgraded SDK to use JW Player 7.11.3 Bug Fixes Fixed an issue where onControlBarVisible callback was not firing when in paused state and display was being toggled Fixed an issue where double tapping the player while playing an ad would cause an exception Version 2.7.3 (Build 19 - May 08, 2017) Bug Fixes Fixed an issue where quality levels were sometimes available before jwplayer.js was in a playing state resulting in the HD button not appearing Fixed an issue where OnControlbarVisibilityChanged fired when the player was in a buffering state Fixed an issue where an HLS VOD duration displayed as live following an IMA ad Fixed an issue where onAdError was not thrown when loading an ad with 0 duration, resulting in an indefinite loading state Fixed an issue where getQualityLevels() and onLevels() callbacks were not consistently returning data Fixed an issue where timeSliderAbove was not behaving correctly due to inconsistent casing Version 2.7.2 (Build 18 - Apr 27, 2017) Bug Fixes Fixed an issue where playback was broken in Android 4.x devices. OnControlBarVisibilityListener will not be supported at this time on any 4.x Android version that doesn't support MutationObserver. Version 2.7.1 (Build 16 - Apr 10, 2017) Features New onAdSchedule callback for the VAST ad client that provides detailed information of a VMAP ad schedule. Enhancements Upgraded SDK to use JW Player 7.10.4 onAdImpression now includes VMAP ad schedule details Bug Fixes Fixed an issue where VMAP breakstart/breakend callbacks would not fire when no ad source was present Fixed an issue where setting autostart to true was not enabling autostart Fixed an issue where the first frame of media would play for a split-second before the start of an IMA pre-roll ad Fixed an issue where the player would become unresponsive after seeking to the end and letting the media complete. Fixed an issue where an improperly formed IMA ad would cause a crash instead of throwing an error. Version 2.7.0 (Build 15 - Feb 23, 2017) New Features Added support for \"preload\" where media is preloaded after the player is setup but before the play button is pressed. This allows JW Player to fetch media information prior to playback and enhances perceived performance by users Added onControlBarVisible callback that indicates when the player control bar's visibility changes. Sync your custom UI elements to display hide with the player control bar Added localization of Casting error messages Bug Fixes Fixed an issue where double-clicking on an ad with a click-through URL would cause a crash Enhancements Upgraded to Cast Companion Library 2.9.1 Version 2.6.3 (Build 14 - Dec 09, 2016) New Features Various error message strings can now be localized to a preferred language Added API methods to pause and resume IMA ad playback Bug Fixes Improved memory consistency in various classes, this should resolve intermittent NullPointerExceptions Fixed a NullPointerException when sending player error analytics Fixed an issue where JWPlayerView.getPlaylist() would return null when JWPlayerView.getConfig().getPlaylist() would return the correct playlist before setup Fixed an app crash when tyring to cast a stream with WebVTT thumbnails Fixed the subtitle button showing up for streams that did not contain any cues Fixed an exception that would be thrown when using a timecode (00:30:00.000) with the IMA ad client Fixed a NullPointerException in the toJSON() method of Ad Source Enhancements The SDK now logs an error message when it encounters an invalid SSL certificate, for example when requesting a VAST creative. Version 2.6.2 (Build 12 - Jan 27, 2017) Enhancements Upgraded SDK to use JW Player 7.8.7 Version 2.6.1 (Build 11 - Dec 21, 2016) Bug Fixes Fixed an issue where the SDK would crash on Android 7.1.1 if the Chromecast module was not added as a dependency Fixed an issue where ImaAdvertising or ImaVMAPAdvertising instances without an associated ImaSdkSettings instance would cause a crash Version 2.6.0 (Build 7 - Dec 09, 2016) Important Note! The JW Player SDK for Android is now distributed as several modules, to reduce the size of your application you will only need to import the modules you are using in your project. Please note the updated configuration instructions here: Library and Project Setup Google IMA Setup Chromecast Getting Started You will also need to change the xmlns entry in your layout XMLs if you are using our custom attributes, as described here New Features Modularized JW SDK: choose only the modules you want and leave the rest. Optimize the JW SDK to your needs Added Google IMA ad UI text localization support to display your preferred language VPAID 2.0 ad support in ad pods using the VAST client Added onAdCompanion() callback for VAST client that returns companion ad data Enhancements Upgraded SDK to use JW Player 7.8 General improvements to SDK player UI Upgraded Google IMA version to 3.4.0 Bug Fixes Fixed an issue where the WindowOpenHandler interface used by setWindowOpenHandler() was obfuscated Fixed a race condition that caused the playAd() API call to malfunction when called shortly after playback has begun Fixed an issue where 302 redirects would fail when an HttpResponseCache was being used Version 2.5.3 (Build 164 - Nov 15, 2016) Bug Fixes Fixed an issue where onAdRequest(AdRequestEvent) would not fire on calls to playAd() for IMA Enhancements Improved the efficiency of the SDKs initial setup process Replaced dependency on CastCompanionLibrary submodule with jCenter dependency Upgraded Chromecast to support Google Cast Companion Library version 2.8.4 Version 2.5.2 (Build 163 - Oct 24, 2016) Bug Fixes Fixed an issue where custom HTTP Headers were missing after media resumed after playing a Google IMA ad Fixed an issue where ad events were not firing when calling playAd() Fixed an issue where copying a Captions object would throw a null pointer exception if isDefault was not defined Fixed an issue where configuring setBackgroundAudio(true), during onCreate() would result in a null pointer exception Addressed an issue where the media would freeze when background audio was enabled and the user would lock, then unlock the screen Fixed an issue where onFirstFrame() reported the correct time-to-first-frame (TtFF) except when an IMA preroll was scheduled Version 2.5.1 (Build 162 - Oct 05, 2016) Bug Fixes Fixed an issue where IMA Midrolls were not playing when scheduled through an AdSchedule Version 2.5.0 (Build 161 - Sep 14, 2016) New Features Added support for Related Feeds player setup options Added support for custom HTTP headers for video streams (including signed cookies or tokens) onAdError message for both VAST and IMA mode now specifies if the ad was unreachable (404) or if the ad tag was empty and can differentiate between the two PlayAd() is now supported for AdSource.IMA Added JWPlayerView.setLicenseKey() to support the ability to set the player license key programmatically instead of in the manifest Added PlaylistItem.mediaId to allow developers to specify the JW Media ID for an externally hosted media file in the JW Platform in order to track analytics for that video Enhancements Removed READ_EXTERNAL_STORAGE permission from the SDK manifest. Developers must add this themselves to support local file playback Added OnErrorListenerV2, improved version of onError which includes the Exception object that was thrown along with the error message Upgraded IMA version to 3.3.2 Addressed an issue where Android 4.3 does not support WOFF fonts, which leads to missing player control icons so we now ship TTF fonts New and updated callbacks events (eg. onBufferChange) for parity with HTML5 player Added WindowOpenHandler in JWPlayerView to support the ability to handle an Ad Clickthru event with the ad's clickthru URL Bug Fixes Fixed a nullpointer issue when killing and restarting the app while connected to Chromecast Fixed an issue in Android 4.1 and 4.3 where if a landscape layout is set, the application would crash on orientation changes from rotating the device. Fixed an issue where PlayerConfig.fromJson() would not populate VmapAdvertising objects Fixed an issue where the SDK would crash when the user pressed back during IMA ad playback Version 2.4.3 (Build 160 - Aug 23, 2016) Bug Fixes Fixed an issue with HLS in-manifest subtitle tracks where the \"Name\" label was not being displayed properly Version 2.4.2 (Build 159 - Aug 17, 2016) Bug Fixes Fixed an issue where unsupported/incompatible ad creative file types were not being ignored (e.g. Flash ads) Fixed an issue where a selected audio track didn't persist after an ad break Fixed an issue where player skins defaulted to Seven skin colors unless explicitly overidden Fixed an issue where onAdTime() for the Google IMA ad client was not reported in milliseconds and firing frequency was low Fixed an issue where midroll ads were requested right after the previous ad had finished rather than at the time of the next ad break Version 2.4.1 (Build 158 - Jul 13, 2016) Bug Fixes Fixed an IMA issue where a mid-roll would play after the post-roll and sometimes end in a black screen Fixed an issue with setMute() where it wasn't in effect prior to playback and would unmute during ads Fixed an issue where ad clickthrough would not trigger and onAdClick() would not fire if controls were set to false Fixed an issue where seek() could not be called before playback began Fixed an issue where locally hosted poster images wouldn't load Fixed an issue where PlayerConfig.setFile() would not work with locally hosted videos Fixed an issue where JWPlayerView.getPosition() would not be up-to-date when onSeeked() is fired Version 2.4.0 (Build 156 - Jun 29, 2016) New Features Free, Premium, and Platinum license editions are now supported Ad impression limits are now checked when ad playback is requested in order to prevent ad impression overage charges Bug Fixes Fixed a bug where the captions button would not show up on some streams with 608 captions Version 2.3.0 (Build 155 - Jun 20, 2016) New Features VPAID 2.0 support Widevine DRM decryption HLS multiple track audio support Player stretching option support (uniform, fill, exact fit, none) Mute/unmute player instance Start playback of a specific playlist item - playlistItem(int index) New onVisualQuality() callback event fired when visual quality changes Bug Fixes Fixed an issue where logo position and logo margin were not set using PlayerConfig Fixed an issue where skin enum option was missing from PlayerConfig builder Fixed an inconsistency where player.seek() parameter was accepting an int value instead of long Version 2.2.2 (Build 150 - May 10, 2016) Bug Fixes Fixed an issue where the SDK would crash if the containing Activity finished during an IMA ad request Fixed an issue where IMA midrolls would not play if a postroll was defined Fixed an issue where discontinuities would result in a frozen or black screen Version 2.2.1 (Build 149 - Apr 25, 2016) New Features Audio Playback in Background Full-Playlist IMA Ad Schedules Added cookie support, including ability to play HLS streams using Akamai's SecureHD HD Token Authorization Bug Fixes Fixed an issue where IMA prerolls wouldn't play during a live stream Fixed an issue where HLS streams would show up as DVR after an IMA ad played Fixed an issue where the SDK would crash after a postroll if an IMA ad had been defined with a percentage offset Fixed an issue where pressing reply after an bad IMA (e.g. empty VAST) would result in a doubled UI Fixed an issue where seeking ahead past midroll ads would force all ads to play instead of the last one Fixed an issue where the player would not initialize when it had been instantiated with a PlayerConfig containing a playlist Fixed an issue where HLS streams that did not contain 'm3u8' in the URL would not play Fixed an issue where IMA VMAP postrolls would not play in a playlist except for the last playlist item Version 2.2.0 (Build 148 - Apr 08, 2016) New Features DVR for Live Streams in HLS CEA-608 Captions in HLS In-Manifest WebVTT subtitles in HLS MPEG-DASH VAST 3.0 Non-Linear Ads Bug Fixes Fixed an issue where the poster image in audio-only playlists did not remain on screen Fixed an issue related to loading new media during an IMA ad break Fixed an issue where finishing an activity before initialization is done results in a phantom player playing in background. Fixed an issue where controls(false) still allowed the loading spinner to show and the captions to shift position for a controlbar that is not there. Fixed an issue where the replay button would rotate after playing an IMA postroll. Version 2.1.1 (Build 142 - Feb 11, 2016) Bug Fixes Fixed an issue with seek() where calling seek() before play() would cause the seekbar to not update the playhead position during playback Version 2.1.0 (Build 141 - Feb 01, 2016) New Features ID3 Timed Metadata Local Media File Playback Chromecast Beta Support for newly added JW7 API callbacks (onSeeked, onFirstFrame, onAdRequest, etc.) Updated Features Enhanced fullscreen in various layouts (Linear, Frame, Relative) Improved Fragment Fullscreening Bug Fixes Fixed an issue with VAST 3.0 VMAP not working as expected Fixed an issue where IMA pre-roll tags did not work as expected for live streams Fixed a bug where dragging to seek would cause an infinite buffer state Fixed an issue where Autostart config option was not being honored Fixed an issue where a player control bar that is set to hidden would become visible in fullscreen Fixed an issue where ExoPlayerWrapper is null in SurfaceHolder callback Known Issues Developers who are already using Google's Cast Companion Library and are not using version 2.6.1, should add -dontwarn com.longtailvideo.jwplayer.cast.* to your ProGuard configuration to avoid conflicts. Version 2.0.135 (Build 135 - Dec 16, 2015) Bug Fixes Fixed an issue where calling load() or setup() immediately after setSkin(String) would throw an error Fixed a bug where playhead position would not update on the seek bar when calling seek() before play() Improved CSS skin downloading Version 2.0.131 (Build 131 - Dec. 03, 2015) Bug Fixes Fixed an issue where the Video Quality button would be broken for HLS streams that contained two quality levels. Fixed a bug with onTime() where sometimes the webplayer truncated the last zero (e.g. returning 1.23 instead of 1.230) Fixed an issue where getPosition() and getDuration() always returned 0. Fixed an issue where several listeners in PlayerStateHandler were not registered. Version 2.0.129 (Build 129 - Nov. 17, 2015) Version 2.0 is a complete rewrite of the JW Player SDK for Android to make it easier for developers to add world-class media playback to any Android app. The migration guide with API changes and code examples, makes upgrading from 1.x to 2.0 a breeze. 2.0 also marks a significant step toward our goal of \u201cOne JW Player\u201d. The developer-facing APIs in the SDK are native to the target platform, but they are wrappers around our flagship JW Player 7 JavaScript/HTML5 library (jwplayer.js). The core functionality of the SDK (player customization, captions, analytics, etc.) is powered by JavaScript, but all the developer-facing APIs in the SDK are native Java classes. As a result, we still achieve very high performance by doing the actual video decoding and playback in native code. One of the many benefits of this \u201cOne JW Player\u201d architectural change is our ability to leverage JW Player 7 features such as CSS skinning and a DPI-responsive player UI optimized for mobile. For more information about our JW Player SDK for Android 2.0 release, please read our blog post . Thanks! New Features WebVTT DFXP/TTML Caption Support Programmatic Player Instantiation Configuration Player Customization CSS Skinning DPI-responsive player UI with mobile optimization Custom Logo Overlay Smooth Streaming support Multiple Players in a view JWPlayerFragment JWPlayerSupportFragment classes Updated Features VAST 3.0 Linear Ads, Ad Pods Google IMA Fullscreen Handling Manual Quality Switching Captions Sidecar SRT Custom styling Multi-track Captions Bug Fixes Fixed an issue where Google IMA was throwing stacktraces during and after Ad-Playback. Fixed an issue For Google IMA Preroll Ads where there was a delay between pressing play and displaying the Ad. Fixed an issue where after a Google IMA Midroll Ad was played, the player restarted the video instead of resuming it at the correct position. Known Issues TTML (DFXP) subtitles are working but there is no styling applied to them. We do not currently support styling them. Playlist icon does not display on the control bar on some phones. Version 1.x Release Notes prior to JW SDK version 2.0 (1.x) are available in the readme.txt file included in the 1.x download packages","title":"Release Notes"},{"location":"about/release-notes/#jw-sdk-for-android-release-notes","text":"","title":"JW SDK for Android Release Notes"},{"location":"about/release-notes/#major-version-releases","text":"Version 3.4.0 (Jan 03, 2019) Version 3.3.0 (Nov 29, 2018) Version 3.2.0 (Sep 07, 2018) Version 3.1.0 (Jul 22, 2018) Version 3.0.0 (Jun 18, 2018) Version 2.9.0 (May 29, 2018) Version 2.8.0 (Feb 22, 2018) Version 2.7.0 (Feb 23, 2017) Version 2.6.0 (Dec 09, 2016) Version 2.5.0 (Sep 14, 2016) Version 2.4.0 (Jun 29, 2016) Version 2.3.0 (Jun 20, 2016) Version 2.2.0 (Apr 08, 2016) Version 2.1.0 (Feb 01, 2016) Version 2.0.135 (Dec 16, 2015) Version 2.0.131 (Dec 03, 2015) Version 2.0.129 (Nov 17, 2015) Version 1.x","title":"Major Version Releases"},{"location":"about/release-notes/#version-342-build-sdk_build_number-date_short_month","text":"","title":"Version 3.4.2 (Build #sdk_build_number# - #date_short_month#)"},{"location":"about/release-notes/#enhancements","text":"Added support for Developer license","title":"Enhancements"},{"location":"about/release-notes/#version-341-build-67-jan-08-2019","text":"","title":"Version 3.4.1 (Build 67 - Jan 08, 2019)"},{"location":"about/release-notes/#bug-fixes","text":"Fixed an issue where the player would not enter fullscreen mode, if a device has Chrome 71+","title":"Bug Fixes"},{"location":"about/release-notes/#version-340-build-66-jan-03-2019","text":"","title":"Version 3.4.0 (Build 66 - Jan 03, 2019)"},{"location":"about/release-notes/#bug-fixes_1","text":"Fixed an issue where IMA pre-roll is delayed on the second playlist item Fixed an issue where some VPAID ads show a white screen instead of ad content Fixed an issue where casting is unstable in some cases Fixed an issue where the player autostarts when onPause() lifecycle event is called Fixed an issue where the player shows the first frame of a content before IMA VMAP pre-roll. Fixed an issue where forced switching playlist items with VAST mid-rolls causes playlist items to be missed Fixed an issue where the app crashes with casting is stopped Fixed an issue where wrong captions are shown during casting Fixed an issue where the player buffers infinitely if a non-buffered MP4 stream with configured FreeWheel pre-roll starts playing Fixed an issue where player background is draggable as a result of a long press on it Fixed an issue where no controls are present to switch on/off 608 captions Fixed an issue where playback starts from the very beginning if seek action occurred for paused video with IMA preroll Fixed an issue where 'xx' in custom message for FreeWheel ad is not replaced with countdown Fixed an issue where the CC button appears on the first player setup when a stream has no captions defined Fixed an issue where VAST ad with built-in skip offset can be skipped before the end of countdown Fixed an issue where the player cannot detect when video has captions in the manifest Fixed an issue where the IMA ad request disrupts video playback Fixed an issue where IMA VMAP with bad tag (invalid video url) breaks playback Fixed an issue where the player would report a positive duration in case of DVR streams Fixed an issue where the player's UI shifts up in case of connectivity issue Fixed an issue where clicking through VAST ad before its full loading makes player work in background Fixed an issue where VAST VMAP has no mid-roll ad points on seek bar Fixed an issue where video with configured FreeWheel ad cannot be played for the second time.","title":"Bug Fixes"},{"location":"about/release-notes/#features","text":"Upgraded SDK to use JW Player 8.6.3 Changed base protocol to https:// to improve security of the SDK. Please ensure that your content and ads are delivered through HTTPS. Seeked position was added to onSeeked() event, so that the actual position can be retrieved Upgraded IMA dependency to 3.9.4","title":"Features"},{"location":"about/release-notes/#enhancements_1","text":"The SDK now can be used with multi-window mode. Check this page out for more details","title":"Enhancements"},{"location":"about/release-notes/#version-330-build-65-nov-29-2018","text":"","title":"Version 3.3.0 (Build 65 - Nov 29, 2018)"},{"location":"about/release-notes/#bug-fixes_2","text":"Fixed an issue where the player fails to seek forward if seek performed during IMA ad request Fixed an issue where RelatedPluginEvents.OnRelatedCloseListener cannot be imported Fixed an issue where IMA preroll causes endless buffering if playback is started before an MP4 video started buffering. Fixed an issue where the player overlaps cue points for IMA mid-rolls with the relative offset for playlists Fixed an issue where Ad Duration displays 6## instead of actual data in case of VAST mid-roll Fixed an issue where the player crashes if its size is 0 and VPAID ad is loaded Fixed an issue where getDuration() and getPosition() return -.001 for live streams Fixed an issue where a pre-roll shows incorrect duration in case of using startOnSeek","title":"Bug Fixes"},{"location":"about/release-notes/#features_1","text":"Added the ability to set custom parameters to FreeWheel and IMA ad configurations, so that publishers can target their campaigns better. Please refer to the FreeWheel and IMA sections for the examples of usage. Added the ability to customize Look-Ahead HLS buffer time. Please refer to this section for the example. Introduced a separate version of the SDK for Amazon tablets. The ExoPlayer is replaced with its Amazon fork. It can be accessed through Maven. Please refer to the Amazon section for more details.","title":"Features"},{"location":"about/release-notes/#version-322-build-63-oct-24-2018","text":"","title":"Version 3.2.2 (Build 63 - Oct 24, 2018)"},{"location":"about/release-notes/#bug-fixes_3","text":"Fixed an issue where closed captions are partially hidden when controls are hidden Fixed an issue where certain VPAID 2.0 ads persist until the 3rd playlist item Fixed an issue where IMA post-roll ad causes abnormal playlist behavior Fixed an issue where mid-roll ad does not play when controls are hidden or set to false Fixed an issue where the player fails to seek forward if call to seek happens during IMA ad request","title":"Bug Fixes"},{"location":"about/release-notes/#version-321-build-61-sep-19-2018","text":"","title":"Version 3.2.1 (Build 61 - Sep 19, 2018)"},{"location":"about/release-notes/#bug-fixes_4","text":"Fixed an issue where onErrorListener() does not invoke after the player stops and idles","title":"Bug Fixes"},{"location":"about/release-notes/#version-320-build-60-sep-07-2018","text":"","title":"Version 3.2.0 (Build 60 - Sep 07, 2018)"},{"location":"about/release-notes/#features_2","text":"Added pitch correction for variable rate playback Added a toggle that allows developers to place the player either on a SurfaceView or TextureView. For more details please refer to our developer guide","title":"Features"},{"location":"about/release-notes/#enhancements_2","text":"Updated ExoPlayer to version 2.8.2","title":"Enhancements"},{"location":"about/release-notes/#bug-fixes_5","text":"Fixed a potential vulnerability in the SSL Error Handler Fixed an issue where captions would not adjust position after the control bar was hidden Fixed an issue where IMA mid-roll ad pods would freeze playback after a clickthrough Fixed an issue where the player would end playback in 'idle' state instead of 'complete' state Fixed an issue where an 'Unknown' caption label would be shown in captions menu Fixed an issue where setMute(true) would not work Fixed an issue where the player would infer MediaType from the original URL in the case of a 302 redirect Fixed an HLS playback issue where STATE_READY wasn't called due to different instances of DefaultBandWidthMeter","title":"Bug Fixes"},{"location":"about/release-notes/#version-310-build-58-jul-22-2018","text":"","title":"Version 3.1.0 (Build 58 - Jul 22, 2018)"},{"location":"about/release-notes/#features_3","text":"As another step towards parity between SDK and the web player we have added the ability set up custom playback rates for your media. Please refer to the sample in this documentation section .","title":"Features"},{"location":"about/release-notes/#bug-fixes_6","text":"Fixed some memory leaks Fixed an issue where finalize() wouldn't trigger when an IMA ad was skipped Fixed an issue where the fullscreen button was missing during FreeWheel ad playback Fixed an issue where playback controls would disappear for audio-only streams Fixed an issue where the HD menu button would appear even if the stream had one quality level Fixed an issue where configuration Livestream + Preroll would return null Fixed an issue where playback controls would appear for FreeWheel VPAID ads Fixed an issue where onAdTime() would be invoked continuously after an ad was skipped Fixed an issue where the \"Learn More\" button and Ad Message would be delayed six seconds into the ad Fixed an issue where live HLS stream would stop because of an error after some time Fixed an issue where seek controls were missing for DVR-enabled live streams Fixed an issue where ad breaks wouldn't be shown on the seek bar until the first one is played Fixed an issue where a clickthrough action would be auto-triggered on Android 4.x devices","title":"Bug Fixes"},{"location":"about/release-notes/#version-300-build-53-jun-18-2018","text":"We are excited to announce JW Player SDK 3.0 for Android. This release updates the SDK to JW8 and leverages its new UI UX, optimization, and advertising enhancements to engage your audiences intelligently and monetize your content. In the coming months we will deploy more JW8 features into the JW Player SDKs for iOS Android, so stay tuned! Please refer to this important 3.x migration guide for Android to update your current application from version 2.x to 3.x. This guide includes important information about API changes, new features callbacks, and will help your team with the transition process. You may use Maven to update to SDK 3.x, or you can download the SDK 3 packages and new 3.x license keys from the Publish - Tools section of your JW Player Dashboard. Please note that version 3 of the SDKs are available to our Enterprise edition customers, and require new license keys because 2.x license keys will not work.","title":"Version 3.0.0 (Build 53 - Jun 18, 2018)"},{"location":"about/release-notes/#features_4","text":"Support for new advertising rules, including timeBetweenAds, startOnSeek, frequency, and startOn. Please refer to our Ad Rules Reference for details on how to use them.","title":"Features"},{"location":"about/release-notes/#version-292-build-2-aug-14-2018","text":"","title":"Version 2.9.2 (Build 2 - Aug 14, 2018)"},{"location":"about/release-notes/#bug-fixes_7","text":"Fixed an issue where MediaType wouldn't be recognized in case of a redirect Fixed an issue where the player would freeze due to ad timeout errors from the IMA SDK Fixed an issue where the player would sometimes crash when loading the next playlist item Fixed an issue where OnAdError wouldn't fire with VMAP ads Fixed an issue where VPAID controls were not appearing","title":"Bug Fixes"},{"location":"about/release-notes/#version-291-build-1-jun-28-2018","text":"","title":"Version 2.9.1 (Build 1 - Jun 28, 2018)"},{"location":"about/release-notes/#bug-fixes_8","text":"Fixed an issue where the HD menu button would appear even if the stream had one quality level Fixed an issue where the fullscreen button was missing during FreeWheel ad playback Fixed an issue where playback controls would appear for FreeWheel VPAID ads Fixed an issue where playback controls would disappear for audio-only streams Fixed an issue where \"Live Broadcasting\" message was displayed while static video was buffering upon replay Fixed an issue where seek controls were missing for DVR-enabled live streams Fixed some memory leaks Fixed an issue where finalize() wouldn't trigger when an IMA ad was skipped Fixed an issue where onAdTime() would be invoked continuously after an ad was skipped Fixed an issue where onError() would be erroneously invoked when the player was setting up Fixed an issue where the \"Learn More\" button and Ad Message would be delayed six seconds into the ad Fixed an issue where a clickthrough action would be auto-triggered on Android 4.x devices","title":"Bug Fixes"},{"location":"about/release-notes/#features_5","text":"Added an option to enable cross protocol redirects","title":"Features"},{"location":"about/release-notes/#version-290-build-47-may-29-2018","text":"","title":"Version 2.9.0 (Build 47 - May 29, 2018)"},{"location":"about/release-notes/#features_6","text":"We have integrated support for the FreeWheel ad-serving platform. Configure your FreeWheel Ad Manager settings in our new FreeWheel ad client to serve pre-rolls and mid-rolls with other features such as ad-skip and ad-click. Please refer to the new FreeWheel advertising section in our developer guide documentation to get started.","title":"Features"},{"location":"about/release-notes/#version-283-build-46-may-19-2018","text":"","title":"Version 2.8.3 (Build 46 - May 19, 2018)"},{"location":"about/release-notes/#bug-fixes_9","text":"Fixed an issue where IMA midrolls would play immediately after a preroll","title":"Bug Fixes"},{"location":"about/release-notes/#version-282-build-44-april-24-2018","text":"","title":"Version 2.8.2 (Build 44 - April 24, 2018)"},{"location":"about/release-notes/#bug-fixes_10","text":"Fixed an issue where HLS live streams didn't play if stream type was absent in the URL","title":"Bug Fixes"},{"location":"about/release-notes/#version-281-build-43-mar-20-2018","text":"","title":"Version 2.8.1 (Build 43 - Mar 20, 2018)"},{"location":"about/release-notes/#enhancements_3","text":"Updated Google IMA library to version 3.8.2 and Play Services to 11.8.0. Please don't forget to update the dependencies in your project if you import the AAR file directly instead of using Maven.","title":"Enhancements"},{"location":"about/release-notes/#bug-fixes_11","text":"Fixed an IMA ad client issue where the app would crash when loading the second playlist item if using a VMAP Fixed an issue where calling getPosition() after an ad completed (media resumed), would return the ad position instead of the media position. Fixed an issue where the app would crash on devices using API Level 18 and lower Fixed an issue that blocked custom headers from being set correctly","title":"Bug Fixes"},{"location":"about/release-notes/#version-280-build-42-feb-22-2018","text":"","title":"Version 2.8.0 (Build 42 - Feb 22, 2018)"},{"location":"about/release-notes/#enhancements_4","text":"Updating from ExoPlayer v1 to v2. Please refer to the Migration Guide for details and instructions to update to this version.","title":"Enhancements"},{"location":"about/release-notes/#version-2713-build-38-feb-15-2018","text":"","title":"Version 2.7.13 (Build 38 - Feb 15, 2018)"},{"location":"about/release-notes/#bug-fixes_12","text":"Fixed an issue where the app would crash if exiting the activity during IMA setup Fixed a typo in the naming of removeOnAdScheduleListener method. Please update your code accordingly when updating to this version","title":"Bug Fixes"},{"location":"about/release-notes/#version-2712-build-37-feb-06-2018","text":"","title":"Version 2.7.12 (Build 37 - Feb 06, 2018)"},{"location":"about/release-notes/#bug-fixes_13","text":"Fixed an issue where the two-letter language codes specified in the HLS manifest for audio tracks were not being displayed correctly","title":"Bug Fixes"},{"location":"about/release-notes/#version-2711-build-33-jan-23-2018","text":"","title":"Version 2.7.11 (Build 33 - Jan 23, 2018)"},{"location":"about/release-notes/#enhancements_5","text":"Added synchronization and improved thread handling when a player is created and destroyed in rapid succession","title":"Enhancements"},{"location":"about/release-notes/#bug-fixes_14","text":"Fixed an issue where the app would crash for multitrack live streams","title":"Bug Fixes"},{"location":"about/release-notes/#version-2710-build-32-jan-09-2018","text":"","title":"Version 2.7.10 (Build 32 - Jan 09, 2018)"},{"location":"about/release-notes/#bug-fixes_15","text":"Fixed an issue where an IMA VMAP ad error would autostart the player","title":"Bug Fixes"},{"location":"about/release-notes/#version-279-build-31-dec-11-2017","text":"","title":"Version 2.7.9 (Build 31 - Dec 11, 2017)"},{"location":"about/release-notes/#bug-fixes_16","text":"Fixed an issue where livestream with large DVR windows takes too long to load Fixed an issue where setControls would not persist after a call to load() Fixed an issue where valid VMAP schedules would block content playback when using Google IMA","title":"Bug Fixes"},{"location":"about/release-notes/#version-278-build-28-nov-17-2017","text":"","title":"Version 2.7.8 (Build 28 - Nov 17, 2017)"},{"location":"about/release-notes/#bug-fixes_17","text":"Fixed an issue where navigating from one activity to a new activity (using a different player), then returning back to the first activity would freeze the player Fixed an issue where the two letter language code in the manifest of the AudioTrack objects was not being returned Fixed an issue where the timeSliderAbove UI of the controlbar would not stay consistent when exiting fullscreen mode Fixed an issue where finishing an activity from onSetupError could crash the app. Equivalent to pressing back when the player encountered a setup error Fixed an issue where the HD Button was not visible even though multiple sources had been configured Fixed an issue where backgrounding the app caused in-manifest captions to appear twice in the caption menu Fixed an issue where Quality and AudioTrack selectors would disappear in fullscreen Fixed an issue where changing the visual quality from a paused state after device lock could crash the app Fixed an issue Where programmatically instantiating another JWPlayerView could break the controls and other Web resources of the first player","title":"Bug Fixes"},{"location":"about/release-notes/#version-277-build-26-oct-09-2017","text":"","title":"Version 2.7.7 (Build 26 - Oct 09, 2017)"},{"location":"about/release-notes/#features_7","text":"HTTP Headers can now be updated midstream without reloading the player. Useful for updating expired AES key tokens passed in the HTTP Authorization request header without interrupting AES Encrypted HLS playback","title":"Features"},{"location":"about/release-notes/#bug-fixes_18","text":"Fixed an issue where the player would hang if the IMA pre-roll was empty Fixed an issue where onAdError would get triggered repeatedly if an IMA mid-roll fails Fixed an issue where HTTP Headers were missing from audio chunk requests","title":"Bug Fixes"},{"location":"about/release-notes/#version-276-build-24-sep-15-2017","text":"","title":"Version 2.7.6 (Build 24 - Sep 15, 2017)"},{"location":"about/release-notes/#features_8","text":"onAdImpression: now includes click-through URL parameter","title":"Features"},{"location":"about/release-notes/#enhancements_6","text":"Upgraded SDK to use JW Player 7.12.6","title":"Enhancements"},{"location":"about/release-notes/#bug-fixes_19","text":"Fixed a regression issue where defaultImpression for VAST did not fire Fixed a regression issue with onAdImpression firing in VAST ads","title":"Bug Fixes"},{"location":"about/release-notes/#version-275-build-23-jul-21-2017","text":"","title":"Version 2.7.5 (Build 23 - Jul 21, 2017)"},{"location":"about/release-notes/#enhancements_7","text":"Upgraded SDK to use JW Player 7.12.1","title":"Enhancements"},{"location":"about/release-notes/#bug-fixes_20","text":"Fixed an issue where setting up the player with IMA ads a number of times consecutively, would eventually cause the player to crash","title":"Bug Fixes"},{"location":"about/release-notes/#version-274-build-22-jun-23-2017","text":"","title":"Version 2.7.4 (Build 22 - Jun 23, 2017)"},{"location":"about/release-notes/#enhancements_8","text":"Upgraded SDK to use JW Player 7.11.3","title":"Enhancements"},{"location":"about/release-notes/#bug-fixes_21","text":"Fixed an issue where onControlBarVisible callback was not firing when in paused state and display was being toggled Fixed an issue where double tapping the player while playing an ad would cause an exception","title":"Bug Fixes"},{"location":"about/release-notes/#version-273-build-19-may-08-2017","text":"","title":"Version 2.7.3 (Build 19 - May 08, 2017)"},{"location":"about/release-notes/#bug-fixes_22","text":"Fixed an issue where quality levels were sometimes available before jwplayer.js was in a playing state resulting in the HD button not appearing Fixed an issue where OnControlbarVisibilityChanged fired when the player was in a buffering state Fixed an issue where an HLS VOD duration displayed as live following an IMA ad Fixed an issue where onAdError was not thrown when loading an ad with 0 duration, resulting in an indefinite loading state Fixed an issue where getQualityLevels() and onLevels() callbacks were not consistently returning data Fixed an issue where timeSliderAbove was not behaving correctly due to inconsistent casing","title":"Bug Fixes"},{"location":"about/release-notes/#version-272-build-18-apr-27-2017","text":"","title":"Version 2.7.2 (Build 18 - Apr 27, 2017)"},{"location":"about/release-notes/#bug-fixes_23","text":"Fixed an issue where playback was broken in Android 4.x devices. OnControlBarVisibilityListener will not be supported at this time on any 4.x Android version that doesn't support MutationObserver.","title":"Bug Fixes"},{"location":"about/release-notes/#version-271-build-16-apr-10-2017","text":"","title":"Version 2.7.1 (Build 16 - Apr 10, 2017)"},{"location":"about/release-notes/#features_9","text":"New onAdSchedule callback for the VAST ad client that provides detailed information of a VMAP ad schedule.","title":"Features"},{"location":"about/release-notes/#enhancements_9","text":"Upgraded SDK to use JW Player 7.10.4 onAdImpression now includes VMAP ad schedule details","title":"Enhancements"},{"location":"about/release-notes/#bug-fixes_24","text":"Fixed an issue where VMAP breakstart/breakend callbacks would not fire when no ad source was present Fixed an issue where setting autostart to true was not enabling autostart Fixed an issue where the first frame of media would play for a split-second before the start of an IMA pre-roll ad Fixed an issue where the player would become unresponsive after seeking to the end and letting the media complete. Fixed an issue where an improperly formed IMA ad would cause a crash instead of throwing an error.","title":"Bug Fixes"},{"location":"about/release-notes/#version-270-build-15-feb-23-2017","text":"","title":"Version 2.7.0 (Build 15 - Feb 23, 2017)"},{"location":"about/release-notes/#new-features","text":"Added support for \"preload\" where media is preloaded after the player is setup but before the play button is pressed. This allows JW Player to fetch media information prior to playback and enhances perceived performance by users Added onControlBarVisible callback that indicates when the player control bar's visibility changes. Sync your custom UI elements to display hide with the player control bar Added localization of Casting error messages","title":"New Features"},{"location":"about/release-notes/#bug-fixes_25","text":"Fixed an issue where double-clicking on an ad with a click-through URL would cause a crash","title":"Bug Fixes"},{"location":"about/release-notes/#enhancements_10","text":"Upgraded to Cast Companion Library 2.9.1","title":"Enhancements"},{"location":"about/release-notes/#version-263-build-14-dec-09-2016","text":"","title":"Version 2.6.3 (Build 14 - Dec 09, 2016)"},{"location":"about/release-notes/#new-features_1","text":"Various error message strings can now be localized to a preferred language Added API methods to pause and resume IMA ad playback","title":"New Features"},{"location":"about/release-notes/#bug-fixes_26","text":"Improved memory consistency in various classes, this should resolve intermittent NullPointerExceptions Fixed a NullPointerException when sending player error analytics Fixed an issue where JWPlayerView.getPlaylist() would return null when JWPlayerView.getConfig().getPlaylist() would return the correct playlist before setup Fixed an app crash when tyring to cast a stream with WebVTT thumbnails Fixed the subtitle button showing up for streams that did not contain any cues Fixed an exception that would be thrown when using a timecode (00:30:00.000) with the IMA ad client Fixed a NullPointerException in the toJSON() method of Ad Source","title":"Bug Fixes"},{"location":"about/release-notes/#enhancements_11","text":"The SDK now logs an error message when it encounters an invalid SSL certificate, for example when requesting a VAST creative.","title":"Enhancements"},{"location":"about/release-notes/#version-262-build-12-jan-27-2017","text":"","title":"Version 2.6.2 (Build 12 - Jan 27, 2017)"},{"location":"about/release-notes/#enhancements_12","text":"Upgraded SDK to use JW Player 7.8.7","title":"Enhancements"},{"location":"about/release-notes/#version-261-build-11-dec-21-2016","text":"","title":"Version 2.6.1 (Build 11 - Dec 21, 2016)"},{"location":"about/release-notes/#bug-fixes_27","text":"Fixed an issue where the SDK would crash on Android 7.1.1 if the Chromecast module was not added as a dependency Fixed an issue where ImaAdvertising or ImaVMAPAdvertising instances without an associated ImaSdkSettings instance would cause a crash","title":"Bug Fixes"},{"location":"about/release-notes/#version-260-build-7-dec-09-2016","text":"","title":"Version 2.6.0 (Build 7 - Dec 09, 2016)"},{"location":"about/release-notes/#important-note","text":"The JW Player SDK for Android is now distributed as several modules, to reduce the size of your application you will only need to import the modules you are using in your project. Please note the updated configuration instructions here: Library and Project Setup Google IMA Setup Chromecast Getting Started You will also need to change the xmlns entry in your layout XMLs if you are using our custom attributes, as described here","title":"Important Note!"},{"location":"about/release-notes/#new-features_2","text":"Modularized JW SDK: choose only the modules you want and leave the rest. Optimize the JW SDK to your needs Added Google IMA ad UI text localization support to display your preferred language VPAID 2.0 ad support in ad pods using the VAST client Added onAdCompanion() callback for VAST client that returns companion ad data","title":"New Features"},{"location":"about/release-notes/#enhancements_13","text":"Upgraded SDK to use JW Player 7.8 General improvements to SDK player UI Upgraded Google IMA version to 3.4.0","title":"Enhancements"},{"location":"about/release-notes/#bug-fixes_28","text":"Fixed an issue where the WindowOpenHandler interface used by setWindowOpenHandler() was obfuscated Fixed a race condition that caused the playAd() API call to malfunction when called shortly after playback has begun Fixed an issue where 302 redirects would fail when an HttpResponseCache was being used","title":"Bug Fixes"},{"location":"about/release-notes/#version-253-build-164-nov-15-2016","text":"","title":"Version 2.5.3 (Build 164 - Nov 15, 2016)"},{"location":"about/release-notes/#bug-fixes_29","text":"Fixed an issue where onAdRequest(AdRequestEvent) would not fire on calls to playAd() for IMA","title":"Bug Fixes"},{"location":"about/release-notes/#enhancements_14","text":"Improved the efficiency of the SDKs initial setup process Replaced dependency on CastCompanionLibrary submodule with jCenter dependency Upgraded Chromecast to support Google Cast Companion Library version 2.8.4","title":"Enhancements"},{"location":"about/release-notes/#version-252-build-163-oct-24-2016","text":"","title":"Version 2.5.2 (Build 163 - Oct 24, 2016)"},{"location":"about/release-notes/#bug-fixes_30","text":"Fixed an issue where custom HTTP Headers were missing after media resumed after playing a Google IMA ad Fixed an issue where ad events were not firing when calling playAd() Fixed an issue where copying a Captions object would throw a null pointer exception if isDefault was not defined Fixed an issue where configuring setBackgroundAudio(true), during onCreate() would result in a null pointer exception Addressed an issue where the media would freeze when background audio was enabled and the user would lock, then unlock the screen Fixed an issue where onFirstFrame() reported the correct time-to-first-frame (TtFF) except when an IMA preroll was scheduled","title":"Bug Fixes"},{"location":"about/release-notes/#version-251-build-162-oct-05-2016","text":"","title":"Version 2.5.1 (Build 162 - Oct 05, 2016)"},{"location":"about/release-notes/#bug-fixes_31","text":"Fixed an issue where IMA Midrolls were not playing when scheduled through an AdSchedule","title":"Bug Fixes"},{"location":"about/release-notes/#version-250-build-161-sep-14-2016","text":"","title":"Version 2.5.0 (Build 161 - Sep 14, 2016)"},{"location":"about/release-notes/#new-features_3","text":"Added support for Related Feeds player setup options Added support for custom HTTP headers for video streams (including signed cookies or tokens) onAdError message for both VAST and IMA mode now specifies if the ad was unreachable (404) or if the ad tag was empty and can differentiate between the two PlayAd() is now supported for AdSource.IMA Added JWPlayerView.setLicenseKey() to support the ability to set the player license key programmatically instead of in the manifest Added PlaylistItem.mediaId to allow developers to specify the JW Media ID for an externally hosted media file in the JW Platform in order to track analytics for that video","title":"New Features"},{"location":"about/release-notes/#enhancements_15","text":"Removed READ_EXTERNAL_STORAGE permission from the SDK manifest. Developers must add this themselves to support local file playback Added OnErrorListenerV2, improved version of onError which includes the Exception object that was thrown along with the error message Upgraded IMA version to 3.3.2 Addressed an issue where Android 4.3 does not support WOFF fonts, which leads to missing player control icons so we now ship TTF fonts New and updated callbacks events (eg. onBufferChange) for parity with HTML5 player Added WindowOpenHandler in JWPlayerView to support the ability to handle an Ad Clickthru event with the ad's clickthru URL","title":"Enhancements"},{"location":"about/release-notes/#bug-fixes_32","text":"Fixed a nullpointer issue when killing and restarting the app while connected to Chromecast Fixed an issue in Android 4.1 and 4.3 where if a landscape layout is set, the application would crash on orientation changes from rotating the device. Fixed an issue where PlayerConfig.fromJson() would not populate VmapAdvertising objects Fixed an issue where the SDK would crash when the user pressed back during IMA ad playback","title":"Bug Fixes"},{"location":"about/release-notes/#version-243-build-160-aug-23-2016","text":"","title":"Version 2.4.3 (Build 160 - Aug 23, 2016)"},{"location":"about/release-notes/#bug-fixes_33","text":"Fixed an issue with HLS in-manifest subtitle tracks where the \"Name\" label was not being displayed properly","title":"Bug Fixes"},{"location":"about/release-notes/#version-242-build-159-aug-17-2016","text":"","title":"Version 2.4.2 (Build 159 - Aug 17, 2016)"},{"location":"about/release-notes/#bug-fixes_34","text":"Fixed an issue where unsupported/incompatible ad creative file types were not being ignored (e.g. Flash ads) Fixed an issue where a selected audio track didn't persist after an ad break Fixed an issue where player skins defaulted to Seven skin colors unless explicitly overidden Fixed an issue where onAdTime() for the Google IMA ad client was not reported in milliseconds and firing frequency was low Fixed an issue where midroll ads were requested right after the previous ad had finished rather than at the time of the next ad break","title":"Bug Fixes"},{"location":"about/release-notes/#version-241-build-158-jul-13-2016","text":"","title":"Version 2.4.1 (Build 158 - Jul 13, 2016)"},{"location":"about/release-notes/#bug-fixes_35","text":"Fixed an IMA issue where a mid-roll would play after the post-roll and sometimes end in a black screen Fixed an issue with setMute() where it wasn't in effect prior to playback and would unmute during ads Fixed an issue where ad clickthrough would not trigger and onAdClick() would not fire if controls were set to false Fixed an issue where seek() could not be called before playback began Fixed an issue where locally hosted poster images wouldn't load Fixed an issue where PlayerConfig.setFile() would not work with locally hosted videos Fixed an issue where JWPlayerView.getPosition() would not be up-to-date when onSeeked() is fired","title":"Bug Fixes"},{"location":"about/release-notes/#version-240-build-156-jun-29-2016","text":"","title":"Version 2.4.0 (Build 156 - Jun 29, 2016)"},{"location":"about/release-notes/#new-features_4","text":"Free, Premium, and Platinum license editions are now supported Ad impression limits are now checked when ad playback is requested in order to prevent ad impression overage charges","title":"New Features"},{"location":"about/release-notes/#bug-fixes_36","text":"Fixed a bug where the captions button would not show up on some streams with 608 captions","title":"Bug Fixes"},{"location":"about/release-notes/#version-230-build-155-jun-20-2016","text":"","title":"Version 2.3.0 (Build 155 - Jun 20, 2016)"},{"location":"about/release-notes/#new-features_5","text":"VPAID 2.0 support Widevine DRM decryption HLS multiple track audio support Player stretching option support (uniform, fill, exact fit, none) Mute/unmute player instance Start playback of a specific playlist item - playlistItem(int index) New onVisualQuality() callback event fired when visual quality changes","title":"New Features"},{"location":"about/release-notes/#bug-fixes_37","text":"Fixed an issue where logo position and logo margin were not set using PlayerConfig Fixed an issue where skin enum option was missing from PlayerConfig builder Fixed an inconsistency where player.seek() parameter was accepting an int value instead of long","title":"Bug Fixes"},{"location":"about/release-notes/#version-222-build-150-may-10-2016","text":"","title":"Version 2.2.2 (Build 150 - May 10, 2016)"},{"location":"about/release-notes/#bug-fixes_38","text":"Fixed an issue where the SDK would crash if the containing Activity finished during an IMA ad request Fixed an issue where IMA midrolls would not play if a postroll was defined Fixed an issue where discontinuities would result in a frozen or black screen","title":"Bug Fixes"},{"location":"about/release-notes/#version-221-build-149-apr-25-2016","text":"","title":"Version 2.2.1 (Build 149 - Apr 25, 2016)"},{"location":"about/release-notes/#new-features_6","text":"Audio Playback in Background Full-Playlist IMA Ad Schedules Added cookie support, including ability to play HLS streams using Akamai's SecureHD HD Token Authorization","title":"New Features"},{"location":"about/release-notes/#bug-fixes_39","text":"Fixed an issue where IMA prerolls wouldn't play during a live stream Fixed an issue where HLS streams would show up as DVR after an IMA ad played Fixed an issue where the SDK would crash after a postroll if an IMA ad had been defined with a percentage offset Fixed an issue where pressing reply after an bad IMA (e.g. empty VAST) would result in a doubled UI Fixed an issue where seeking ahead past midroll ads would force all ads to play instead of the last one Fixed an issue where the player would not initialize when it had been instantiated with a PlayerConfig containing a playlist Fixed an issue where HLS streams that did not contain 'm3u8' in the URL would not play Fixed an issue where IMA VMAP postrolls would not play in a playlist except for the last playlist item","title":"Bug Fixes"},{"location":"about/release-notes/#version-220-build-148-apr-08-2016","text":"","title":"Version 2.2.0 (Build 148 - Apr 08, 2016)"},{"location":"about/release-notes/#new-features_7","text":"DVR for Live Streams in HLS CEA-608 Captions in HLS In-Manifest WebVTT subtitles in HLS MPEG-DASH VAST 3.0 Non-Linear Ads","title":"New Features"},{"location":"about/release-notes/#bug-fixes_40","text":"Fixed an issue where the poster image in audio-only playlists did not remain on screen Fixed an issue related to loading new media during an IMA ad break Fixed an issue where finishing an activity before initialization is done results in a phantom player playing in background. Fixed an issue where controls(false) still allowed the loading spinner to show and the captions to shift position for a controlbar that is not there. Fixed an issue where the replay button would rotate after playing an IMA postroll.","title":"Bug Fixes"},{"location":"about/release-notes/#version-211-build-142-feb-11-2016","text":"","title":"Version 2.1.1 (Build 142 - Feb 11, 2016)"},{"location":"about/release-notes/#bug-fixes_41","text":"Fixed an issue with seek() where calling seek() before play() would cause the seekbar to not update the playhead position during playback","title":"Bug Fixes"},{"location":"about/release-notes/#version-210-build-141-feb-01-2016","text":"","title":"Version 2.1.0 (Build 141 - Feb 01, 2016)"},{"location":"about/release-notes/#new-features_8","text":"ID3 Timed Metadata Local Media File Playback Chromecast Beta Support for newly added JW7 API callbacks (onSeeked, onFirstFrame, onAdRequest, etc.)","title":"New Features"},{"location":"about/release-notes/#updated-features","text":"Enhanced fullscreen in various layouts (Linear, Frame, Relative) Improved Fragment Fullscreening","title":"Updated Features"},{"location":"about/release-notes/#bug-fixes_42","text":"Fixed an issue with VAST 3.0 VMAP not working as expected Fixed an issue where IMA pre-roll tags did not work as expected for live streams Fixed a bug where dragging to seek would cause an infinite buffer state Fixed an issue where Autostart config option was not being honored Fixed an issue where a player control bar that is set to hidden would become visible in fullscreen Fixed an issue where ExoPlayerWrapper is null in SurfaceHolder callback","title":"Bug Fixes"},{"location":"about/release-notes/#known-issues","text":"Developers who are already using Google's Cast Companion Library and are not using version 2.6.1, should add -dontwarn com.longtailvideo.jwplayer.cast.* to your ProGuard configuration to avoid conflicts.","title":"Known Issues"},{"location":"about/release-notes/#version-20135-build-135-dec-16-2015","text":"","title":"Version 2.0.135 (Build 135 - Dec 16, 2015)"},{"location":"about/release-notes/#bug-fixes_43","text":"Fixed an issue where calling load() or setup() immediately after setSkin(String) would throw an error Fixed a bug where playhead position would not update on the seek bar when calling seek() before play() Improved CSS skin downloading","title":"Bug Fixes"},{"location":"about/release-notes/#version-20131-build-131-dec-03-2015","text":"","title":"Version 2.0.131 (Build 131 - Dec. 03, 2015)"},{"location":"about/release-notes/#bug-fixes_44","text":"Fixed an issue where the Video Quality button would be broken for HLS streams that contained two quality levels. Fixed a bug with onTime() where sometimes the webplayer truncated the last zero (e.g. returning 1.23 instead of 1.230) Fixed an issue where getPosition() and getDuration() always returned 0. Fixed an issue where several listeners in PlayerStateHandler were not registered.","title":"Bug Fixes"},{"location":"about/release-notes/#version-20129-build-129-nov-17-2015","text":"Version 2.0 is a complete rewrite of the JW Player SDK for Android to make it easier for developers to add world-class media playback to any Android app. The migration guide with API changes and code examples, makes upgrading from 1.x to 2.0 a breeze. 2.0 also marks a significant step toward our goal of \u201cOne JW Player\u201d. The developer-facing APIs in the SDK are native to the target platform, but they are wrappers around our flagship JW Player 7 JavaScript/HTML5 library (jwplayer.js). The core functionality of the SDK (player customization, captions, analytics, etc.) is powered by JavaScript, but all the developer-facing APIs in the SDK are native Java classes. As a result, we still achieve very high performance by doing the actual video decoding and playback in native code. One of the many benefits of this \u201cOne JW Player\u201d architectural change is our ability to leverage JW Player 7 features such as CSS skinning and a DPI-responsive player UI optimized for mobile. For more information about our JW Player SDK for Android 2.0 release, please read our blog post . Thanks!","title":"Version 2.0.129 (Build 129 - Nov. 17, 2015)"},{"location":"about/release-notes/#new-features_9","text":"WebVTT DFXP/TTML Caption Support Programmatic Player Instantiation Configuration Player Customization CSS Skinning DPI-responsive player UI with mobile optimization Custom Logo Overlay Smooth Streaming support Multiple Players in a view JWPlayerFragment JWPlayerSupportFragment classes","title":"New Features"},{"location":"about/release-notes/#updated-features_1","text":"VAST 3.0 Linear Ads, Ad Pods Google IMA Fullscreen Handling Manual Quality Switching Captions Sidecar SRT Custom styling Multi-track Captions","title":"Updated Features"},{"location":"about/release-notes/#bug-fixes_45","text":"Fixed an issue where Google IMA was throwing stacktraces during and after Ad-Playback. Fixed an issue For Google IMA Preroll Ads where there was a delay between pressing play and displaying the Ad. Fixed an issue where after a Google IMA Midroll Ad was played, the player restarted the video instead of resuming it at the correct position.","title":"Bug Fixes"},{"location":"about/release-notes/#known-issues_1","text":"TTML (DFXP) subtitles are working but there is no styling applied to them. We do not currently support styling them. Playlist icon does not display on the control bar on some phones.","title":"Known Issues"},{"location":"about/release-notes/#version-1x","text":"Release Notes prior to JW SDK version 2.0 (1.x) are available in the readme.txt file included in the 1.x download packages","title":"Version 1.x"},{"location":"about/requirements/","text":"System Requirements JW Players\u2019s standard audio and video components rely on Android\u2019s MediaCodec API, which was released in Android 4.1 (API level 16). Hence the JW Player SDK does not work on earlier versions of Android. In addition, for VP9 playback the hardware must support VP9 decoding.","title":"System Requirements"},{"location":"about/requirements/#system-requirements","text":"JW Players\u2019s standard audio and video components rely on Android\u2019s MediaCodec API, which was released in Android 4.1 (API level 16). Hence the JW Player SDK does not work on earlier versions of Android. In addition, for VP9 playback the hardware must support VP9 decoding.","title":"System Requirements"},{"location":"advertising/freewheel/","text":"FreeWheel Overview The JW Player SDK for Android is integrated with FreeWheel Ad Manager and supports VAST and VPAID advertising. In this document we will set up your project with FreeWheel and demonstrate all supported features of the FreeWheel implementation. Supported Features Pre-rolls Mid-rolls VPAID Ad Skip Offset Ad Click-through Multiple Ad Instances Custom Parameters Setting up your project for FreeWheel SDK Building with Gradle Add the following dependencies to your application's build.gradle file: compile 'com.longtailvideo.jwplayer:jwplayer-freewheel:#sdk_version_simple#' Building with AAR Add the jwplayer-freewheel AAR dependency to your project. No additional dependencies are required. FreeWheel Parameters Setting up a FreeWheel campaign requires the following parameters: Parameter Value networkId 42015 serverId http://demo.v.fwmrm.net/ profileId fw_tutorial_android sectionId fw_tutorial_android mediaId fw_simple_tutorial_asset Assign an ad schedule to the entire playlist JW Player SDK for Android versions 2.9.x and higher have the option of setting an ad schedule for the entire playlist by creating an FwAdvertising object. Code Example: // Create your FreeWheel advertising settings int networkId = 42015; String serverId = http://7cee0.v.fwmrm.net/ ; String profileId = fw_tutorial_android ; String sectionId = fw_tutorial_android ; String mediaId = fw_simple_tutorial_asset ; FwSettings settings = new FwSettings(networkId, serverId, profileId, sectionId, mediaId); // Create your ad schedule List AdBreak schedule = new ArrayList (); AdBreak adBreak = new AdBreak( pre , AdSource.FW, placeholder_preroll ); schedule.add(adBreak); // Set your ad schedule to your advertising object FwAdvertising advertising = new FwAdvertising(settings, schedule); // Create a playlist, you'll need this to build your player config List PlaylistItem playlist = new ArrayList (); PlaylistItem video = new PlaylistItem( http://playertest.longtailvideo.com/adaptive/bipbop/gear4/prog_index.m3u8 ); PlaylistItem video2 = new PlaylistItem( http://playertest.longtailvideo.com/jwpromo/jwpromo.m3u8 ); playlist.add(video); playlist.add(video2); // Create your player config PlayerConfig playerConfig = new PlayerConfig.Builder() .playlist(playlist) .advertising(advertising) .build(); // Setup your player with the config mPlayerView.setup(playerConfig); Assign an Ad Schedule to a Playlist Item To setup an ad schedule for an individual playlist item, create an AdBreak object with a specific offset and assign a list of the ad breaks to the media. Note: the FwAdvertising object must be created and the FreeWheel settings configuration provided there. Code Example: // Create your FreeWheel advertising settings int networkId = 42015; String serverId = http://7cee0.v.fwmrm.net/ ; String profileId = fw_tutorial_android ; String sectionId = fw_tutorial_android ; String mediaId = fw_simple_tutorial_asset ; FwSettings settings = new FwSettings(networkId, serverId, profileId, sectionId, mediaId); // Create advertising object FwAdvertising advertising = new FwAdvertising(settings); // Construct a new AdBreak with a specific offset // This AdBreak will play a midroll at 10% AdBreak adBreak = new AdBreak( 10% , AdSource.FW, placeholder_string ); // Add the AdBreak to a List List AdBreak schedule = new ArrayList (); schedule.add(adBreak); // Build a PlaylistItem and assign the schedule PlaylistItem video = new PlaylistItem.Builder() .file( http://playertest.longtailvideo.com/adaptive/bipbop/gear4/prog_index.m3u8 ) .adSchedule(schedule) .build(); // Add the PlaylistItem to a List List PlaylistItem playlist = new ArrayList (); playlist.add(video); // Build the PlayerConfig PlayerConfig playerConfig = new PlayerConfig.Builder() .playlist(playlist) .advertising(advertising) .build(); // Setup the player mPlayerView.setup(playerConfig); Ad Offset FreeWheel supports defining advertising offsets. The following formats are available: Type Example Seconds AdBreak adBreak = new AdBreak(\"15\"); Percentage AdBreak adBreak = new AdBreak(\"30%\"); Time Stamp AdBreak adBreak = new AdBreak(\"01:55:30:000\"); Custom Parameters Use the setCustomParams method of the FwSettings object to customize your FreeWheel ad request. Code Example: FwSettings settings = new FwSettings(networkId, serverId, profileId, sectionId, mediaId); // Create custom parameters Map String, String parameters = new HashMap (); parameters.put( key1 , value1 ); parameters.put( key2 , value2 ); settings.setCustomParams(parameters); VPAID No additional setup required to use VPAID. FreeWheel configuration for VPAID and VAST are the same. However, the FreeWheel campaign should be configured to use VPAID. Unsupported Features Postroll Post-rolls are not supported at this time but is planned as a future addition.","title":"FreeWheel"},{"location":"advertising/freewheel/#freewheel","text":"","title":"FreeWheel"},{"location":"advertising/freewheel/#overview","text":"The JW Player SDK for Android is integrated with FreeWheel Ad Manager and supports VAST and VPAID advertising. In this document we will set up your project with FreeWheel and demonstrate all supported features of the FreeWheel implementation.","title":"Overview"},{"location":"advertising/freewheel/#supported-features","text":"Pre-rolls Mid-rolls VPAID Ad Skip Offset Ad Click-through Multiple Ad Instances Custom Parameters","title":"Supported Features"},{"location":"advertising/freewheel/#setting-up-your-project-for-freewheel-sdk","text":"","title":"Setting up your project for FreeWheel SDK"},{"location":"advertising/freewheel/#building-with-gradle","text":"Add the following dependencies to your application's build.gradle file: compile 'com.longtailvideo.jwplayer:jwplayer-freewheel:#sdk_version_simple#'","title":"Building with Gradle"},{"location":"advertising/freewheel/#building-with-aar","text":"Add the jwplayer-freewheel AAR dependency to your project. No additional dependencies are required.","title":"Building with AAR"},{"location":"advertising/freewheel/#freewheel-parameters","text":"Setting up a FreeWheel campaign requires the following parameters: Parameter Value networkId 42015 serverId http://demo.v.fwmrm.net/ profileId fw_tutorial_android sectionId fw_tutorial_android mediaId fw_simple_tutorial_asset","title":"FreeWheel Parameters"},{"location":"advertising/freewheel/#assign-an-ad-schedule-to-the-entire-playlist","text":"JW Player SDK for Android versions 2.9.x and higher have the option of setting an ad schedule for the entire playlist by creating an FwAdvertising object. Code Example: // Create your FreeWheel advertising settings int networkId = 42015; String serverId = http://7cee0.v.fwmrm.net/ ; String profileId = fw_tutorial_android ; String sectionId = fw_tutorial_android ; String mediaId = fw_simple_tutorial_asset ; FwSettings settings = new FwSettings(networkId, serverId, profileId, sectionId, mediaId); // Create your ad schedule List AdBreak schedule = new ArrayList (); AdBreak adBreak = new AdBreak( pre , AdSource.FW, placeholder_preroll ); schedule.add(adBreak); // Set your ad schedule to your advertising object FwAdvertising advertising = new FwAdvertising(settings, schedule); // Create a playlist, you'll need this to build your player config List PlaylistItem playlist = new ArrayList (); PlaylistItem video = new PlaylistItem( http://playertest.longtailvideo.com/adaptive/bipbop/gear4/prog_index.m3u8 ); PlaylistItem video2 = new PlaylistItem( http://playertest.longtailvideo.com/jwpromo/jwpromo.m3u8 ); playlist.add(video); playlist.add(video2); // Create your player config PlayerConfig playerConfig = new PlayerConfig.Builder() .playlist(playlist) .advertising(advertising) .build(); // Setup your player with the config mPlayerView.setup(playerConfig);","title":"Assign an ad schedule to the entire playlist"},{"location":"advertising/freewheel/#assign-an-ad-schedule-to-a-playlist-item","text":"To setup an ad schedule for an individual playlist item, create an AdBreak object with a specific offset and assign a list of the ad breaks to the media. Note: the FwAdvertising object must be created and the FreeWheel settings configuration provided there. Code Example: // Create your FreeWheel advertising settings int networkId = 42015; String serverId = http://7cee0.v.fwmrm.net/ ; String profileId = fw_tutorial_android ; String sectionId = fw_tutorial_android ; String mediaId = fw_simple_tutorial_asset ; FwSettings settings = new FwSettings(networkId, serverId, profileId, sectionId, mediaId); // Create advertising object FwAdvertising advertising = new FwAdvertising(settings); // Construct a new AdBreak with a specific offset // This AdBreak will play a midroll at 10% AdBreak adBreak = new AdBreak( 10% , AdSource.FW, placeholder_string ); // Add the AdBreak to a List List AdBreak schedule = new ArrayList (); schedule.add(adBreak); // Build a PlaylistItem and assign the schedule PlaylistItem video = new PlaylistItem.Builder() .file( http://playertest.longtailvideo.com/adaptive/bipbop/gear4/prog_index.m3u8 ) .adSchedule(schedule) .build(); // Add the PlaylistItem to a List List PlaylistItem playlist = new ArrayList (); playlist.add(video); // Build the PlayerConfig PlayerConfig playerConfig = new PlayerConfig.Builder() .playlist(playlist) .advertising(advertising) .build(); // Setup the player mPlayerView.setup(playerConfig);","title":"Assign an Ad Schedule to a Playlist Item"},{"location":"advertising/freewheel/#ad-offset","text":"FreeWheel supports defining advertising offsets. The following formats are available: Type Example Seconds AdBreak adBreak = new AdBreak(\"15\"); Percentage AdBreak adBreak = new AdBreak(\"30%\"); Time Stamp AdBreak adBreak = new AdBreak(\"01:55:30:000\");","title":"Ad Offset"},{"location":"advertising/freewheel/#custom-parameters","text":"Use the setCustomParams method of the FwSettings object to customize your FreeWheel ad request. Code Example: FwSettings settings = new FwSettings(networkId, serverId, profileId, sectionId, mediaId); // Create custom parameters Map String, String parameters = new HashMap (); parameters.put( key1 , value1 ); parameters.put( key2 , value2 ); settings.setCustomParams(parameters);","title":"Custom Parameters"},{"location":"advertising/freewheel/#vpaid","text":"No additional setup required to use VPAID. FreeWheel configuration for VPAID and VAST are the same. However, the FreeWheel campaign should be configured to use VPAID.","title":"VPAID"},{"location":"advertising/freewheel/#unsupported-features","text":"","title":"Unsupported Features"},{"location":"advertising/freewheel/#postroll","text":"Post-rolls are not supported at this time but is planned as a future addition.","title":"Postroll"},{"location":"advertising/google-ima/","text":"Google IMA Overview The JW Player SDK for Android is integrated with Google's IMA SDK v#ima_sdk_version# and supports VAST and VMAP advertising. In this document we will set up your project with Google Play Services Ads and demonstrate all supported features of the Google IMA implementation. Supported Features ImaSdkSettings Playlist level advertising Playlist item level advertising VMAP Ad Pods Setting up your project for Google IMA Building with Gradle To use the Google IMA SDK you must add the following dependencies to your application's build.gradle file: compile 'com.longtailvideo.jwplayer:jwplayer-ima:#sdk_version_simple#' Building with AAR Add the jwplayer-ima aar dependency to your project then add the following to your application's build.gradle compile 'com.google.android.gms:play-services-ads:#play_services_ads_version#' compile 'com.google.ads.interactivemedia.v3:interactivemedia:#ima_sdk_version#' Assign an ad schedule to the entire playlist As of version 2.6.x of the JW Player SDK for Android, you have the option of setting an ad schedule for the entire playlist by creating an ImaAdvertising object. Code Example: // Create your ad schedule List AdBreak adSchedule = new ArrayList (); AdBreak adBreak = new AdBreak( pre , AdSource.IMA, https://pubads.g.doubleclick.net/gampad/ads?sz=640x480 iu=/124319096/external/single_ad_samples ciu_szs=300x250 impl=s gdfp_req=1 env=vp output=vast unviewed_position_start=1 cust_params=deployment%3Ddevsite%26sample_ct%3Dlinear correlator= ); adSchedule.add(adBreak); // Set your ad schedule to your advertising object ImaAdvertising imaAdvertising = new ImaAdvertising(adSchedule); // Create a playlist, you'll need this to build your player config List PlaylistItem playlist = new ArrayList (); PlaylistItem video = new PlaylistItem( http://playertest.longtailvideo.com/adaptive/bipbop/gear4/prog_index.m3u8 ); PlaylistItem video2 = new PlaylistItem( http://playertest.longtailvideo.com/jwpromo/jwpromo.m3u8 ); playlist.add(video); playlist.add(video2); // Create your player config PlayerConfig playerConfig = new PlayerConfig.Builder() .playlist(playlist) .advertising(imaAdvertising) .build(); // Setup your player with the config mPlayerView.setup(playerConfig); Note: The following methods have no effect on the ImaAdvertising object as the IMA advertising UI is inherited by the Google IMA SDK. imaAdvertising.setSkipOffset(3); imaAdvertising.setAdMessage( Text that appears in the control bar ); imaAdvertising.setCueText( Text that appears when you hover over the ad marker ); imaAdvertising.setSkipMessage( Text that appears before skip is available ); imaAdvertising.setSkipText( Text that appears when skip is available ); Assign an ad schedule to a playlist item Setting up an ad schedule for your videos is simple, create the ad, set the AdSource as AdSource.IMA then assign your List AdBreak to your media. Code Example: // Construct a new AdBreak containing the Ad Tag // This AdBreak will play a midroll at 10% AdBreak adBreak = new AdBreak( 10% , AdSource.IMA, https://pubads.g.doubleclick.net/gampad/ads?sz=640x480 iu=/124319096/external/single_ad_samples ciu_szs=300x250 impl=s gdfp_req=1 env=vp output=vast unviewed_position_start=1 cust_params=deployment%3Ddevsite%26sample_ct%3Dlinear correlator= ); // Add the AdBreak to a List List AdBreak adSchedule = new ArrayList (); adSchedule.add(adBreak); // Build a PlaylistItem and assign adSchedule PlaylistItem video = new PlaylistItem.Builder() .file( http://playertest.longtailvideo.com/adaptive/bipbop/gear4/prog_index.m3u8 ) .adSchedule(adSchedule) .build(); // Add the PlaylistItem to a List List PlaylistItem playlist = new ArrayList (); playlist.add(video); // Build the PlayerConfig PlayerConfig playerConfig = new PlayerConfig.Builder() .playlist(playlist) .build(); // Setup the player mPlayerView.setup(playerConfig); Custom Parameters Use the AdBreak object to customize your IMA ad request. Code Example: Map String, String customParams = new HashMap (); customParams.put( age , 18 ); customParams.put( gender , male ); AdBreak adBreak = new AdBreak( pre , AdSource.IMA, YOUR_TAG ); adBreak.setCustomParams(customParams); Alternatively, you can use the adschedule object to customize your IMA request. Code Example: adschedule : { adBreak1 : { offset : pre , custParams : { age : 18 , gender : male }, ad : { source : googima , tag : YOUR_TAG } } } VMAP Advertising Currently, VMAP advertising schedules can only be assigned to the entire playlist by using our VMAPAdvertising object. The added benefit of using VMAP is the fact that it contains its own ad schedule which can be easily served across different platforms. Code Example: // Create a new ImaVMAPAdvertising ImaVMAPAdvertising imaVMAPAdvertising = new ImaVMAPAdvertising( https://pubads.g.doubleclick.net/gampad/ads?sz=640x480 iu=/124319096/external/ad_rule_samples ciu_szs=300x250 ad_rule=1 impl=s gdfp_req=1 env=vp output=vmap unviewed_position_start=1 cust_params=deployment%3Ddevsite%26sample_ar%3Dpremidpostpod cmsid=496 vid=short_onecue correlator= ); // Construct a PlaylistItem PlaylistItem video = new PlaylistItem( http://playertest.longtailvideo.com/adaptive/bipbop/gear4/prog_index.m3u8 ); // Add the PlaylistItem to a List List PlaylistItem playlist = new ArrayList (); playlist.add(video); // Build the PlayerConfig PlayerConfig playerConfig = new PlayerConfig.Builder() .playlist(playlist) .advertising(imaVMAPAdvertising) .build(); // Setup the player mPlayerView.setup(playerConfig); Ad Pods Ad Pods allow ad networks to deliver multiple ads within a single ad break. Code Example: // Create video PlaylistItem video = new PlaylistItem( http://playertest.longtailvideo.com/adaptive/bipbop/gear4/prog_index.m3u8 ); // Set the ad break offset and tag AdBreak adBreak = new AdBreak( pre , AdSource.IMA, http://pubads.g.doubleclick.net/gampad/ads?sz=640x480 iu=/124319096/external/ad_rule_samples ciu_szs=300x250 ad_rule=1 impl=s gdfp_req=1 env=vp output=vmap unviewed_position_start=1 cust_params=sample_ar%3Dpreonlybumper cmsid=496 vid=short_onecue correlator= ); List AdBreak adSchedule = new ArrayList (); adSchedule.add(adBreak); // Set the ad schedule to your video video.setAdSchedule(adSchedule); // Add the PlaylistItem to a List List PlaylistItem playlist = new ArrayList (); playlist.add(video); // Build the PlayerConfig PlayerConfig playerConfig = new PlayerConfig.Builder() .playlist(playlist) .build(); // Setup the player mPlayerView.setup(playerConfig); IMA SDK Settings As of version 2.6.x of the JW Player SDK for Android, settings for the IMA SDK can be configured by creating a new instance of ImaSdkSettings . Developers can then assigning it to an ImaAdvertising or ImaVMAPAdvertising instance by calling setImaSdkSetting() or by passing it into the constructor. For more information on the ImaSdkSettings class and its features please refer to the official Google documentation: https://developers.google.com/interactive-media-ads/docs/sdks/android/v3/api/reference/com/google/ads/interactivemedia/v3/api/ImaSdkSettings Code Example: // Create two videos with separate ad schedules List AdBreak adSchedule = new ArrayList (); AdBreak adBreak = new AdBreak( pre , AdSource.IMA, https://pubads.g.doubleclick.net/gampad/ads?sz=640x480 iu=/124319096/external/single_ad_samples ciu_szs=300x250 impl=s gdfp_req=1 env=vp output=vast unviewed_position_start=1 cust_params=deployment%3Ddevsite%26sample_ct%3Dlinear correlator= ); adSchedule.add(adBreak); PlaylistItem video = new PlaylistItem( http://playertest.longtailvideo.com/adaptive/bipbop/gear4/prog_index.m3u8 ); video.setAdSchedule(adSchedule); List AdBreak adSchedule2 = new ArrayList (); AdBreak adBreak2 = new AdBreak( pre , AdSource.IMA, https://pubads.g.doubleclick.net/gampad/ads?sz=640x480 iu=/124319096/external/single_ad_samples ciu_szs=300x250 impl=s gdfp_req=1 env=vp output=vast unviewed_position_start=1 cust_params=deployment%3Ddevsite%26sample_ct%3Dskippablelinear correlator= ); adSchedule2.add(adBreak2); PlaylistItem video2 = new PlaylistItem( http://playertest.longtailvideo.com/jwpromo/jwpromo.m3u8 ); video2.setAdSchedule(adSchedule2); // Add your videos to a playlist List PlaylistItem playlist = new ArrayList (); playlist.add(video); playlist.add(video2); // Setup the IMA SDK Settings and localize the advertising UI ImaSdkSettings imaSdkSettings = ImaSdkFactory.getInstance().createImaSdkSettings(); imaSdkSettings.setLanguage( nl ); // Set an empty List AdBreak to ImaAdvertising // This will allow the imaSdkSettings to take effect while having playlist item specific ad schedules // You could set the ad schedule to the ImaAdvertising object if you want the same schedule for each item ImaAdvertising imaAdvertising = new ImaAdvertising(new ArrayList AdBreak (), imaSdkSettings); // Create your player config PlayerConfig playerConfig = new PlayerConfig.Builder() .playlist(playlist) .advertising(imaAdvertising) .build(); // Setup your player with the config mPlayerView.setup(playerConfig); Unsupported Features Ad tag waterfalls When using AdSource.IMA you do not have the ability to define an ad tag waterfall in your code. An ad tag waterfall analog is instead defined in your Google Dashboard. Non-linear Overlay Ads Non-linear ads are not currently supported via AdSource.IMA . This is a limitation of the Google IMA SDK for Android. For more information please refer to the documentation here: https://developers.google.com/interactive-media-ads/docs/sdks/android/compatibility Ad skip offset The ad skip offset is always set within the ad response of a Google IMA ad tag and we do not override the value. To configure your skip offset please contact your ad network. Ad tag variables The ad tag variables specified in our VAST documentation are not supported when using AdSource.IMA . Instead we suggest contacting Google IMA to provide you with a list of ad tag variables supported in the Google IMA SDK. VPAID The Google IMA SDK does not support VPAID 1.0 or VPAID 2.0 ads. This is a limitation of the Google IMA SDK for Android. For more information please refer to the documentation here: https://developers.google.com/interactive-media-ads/docs/sdks/android/compatibility","title":"Google IMA"},{"location":"advertising/google-ima/#google-ima","text":"","title":"Google IMA"},{"location":"advertising/google-ima/#overview","text":"The JW Player SDK for Android is integrated with Google's IMA SDK v#ima_sdk_version# and supports VAST and VMAP advertising. In this document we will set up your project with Google Play Services Ads and demonstrate all supported features of the Google IMA implementation.","title":"Overview"},{"location":"advertising/google-ima/#supported-features","text":"ImaSdkSettings Playlist level advertising Playlist item level advertising VMAP Ad Pods","title":"Supported Features"},{"location":"advertising/google-ima/#setting-up-your-project-for-google-ima","text":"","title":"Setting up your project for Google IMA"},{"location":"advertising/google-ima/#building-with-gradle","text":"To use the Google IMA SDK you must add the following dependencies to your application's build.gradle file: compile 'com.longtailvideo.jwplayer:jwplayer-ima:#sdk_version_simple#'","title":"Building with Gradle"},{"location":"advertising/google-ima/#building-with-aar","text":"Add the jwplayer-ima aar dependency to your project then add the following to your application's build.gradle compile 'com.google.android.gms:play-services-ads:#play_services_ads_version#' compile 'com.google.ads.interactivemedia.v3:interactivemedia:#ima_sdk_version#'","title":"Building with AAR"},{"location":"advertising/google-ima/#assign-an-ad-schedule-to-the-entire-playlist","text":"As of version 2.6.x of the JW Player SDK for Android, you have the option of setting an ad schedule for the entire playlist by creating an ImaAdvertising object. Code Example: // Create your ad schedule List AdBreak adSchedule = new ArrayList (); AdBreak adBreak = new AdBreak( pre , AdSource.IMA, https://pubads.g.doubleclick.net/gampad/ads?sz=640x480 iu=/124319096/external/single_ad_samples ciu_szs=300x250 impl=s gdfp_req=1 env=vp output=vast unviewed_position_start=1 cust_params=deployment%3Ddevsite%26sample_ct%3Dlinear correlator= ); adSchedule.add(adBreak); // Set your ad schedule to your advertising object ImaAdvertising imaAdvertising = new ImaAdvertising(adSchedule); // Create a playlist, you'll need this to build your player config List PlaylistItem playlist = new ArrayList (); PlaylistItem video = new PlaylistItem( http://playertest.longtailvideo.com/adaptive/bipbop/gear4/prog_index.m3u8 ); PlaylistItem video2 = new PlaylistItem( http://playertest.longtailvideo.com/jwpromo/jwpromo.m3u8 ); playlist.add(video); playlist.add(video2); // Create your player config PlayerConfig playerConfig = new PlayerConfig.Builder() .playlist(playlist) .advertising(imaAdvertising) .build(); // Setup your player with the config mPlayerView.setup(playerConfig);","title":"Assign an ad schedule to the entire playlist"},{"location":"advertising/google-ima/#note","text":"The following methods have no effect on the ImaAdvertising object as the IMA advertising UI is inherited by the Google IMA SDK. imaAdvertising.setSkipOffset(3); imaAdvertising.setAdMessage( Text that appears in the control bar ); imaAdvertising.setCueText( Text that appears when you hover over the ad marker ); imaAdvertising.setSkipMessage( Text that appears before skip is available ); imaAdvertising.setSkipText( Text that appears when skip is available );","title":"Note:"},{"location":"advertising/google-ima/#assign-an-ad-schedule-to-a-playlist-item","text":"Setting up an ad schedule for your videos is simple, create the ad, set the AdSource as AdSource.IMA then assign your List AdBreak to your media. Code Example: // Construct a new AdBreak containing the Ad Tag // This AdBreak will play a midroll at 10% AdBreak adBreak = new AdBreak( 10% , AdSource.IMA, https://pubads.g.doubleclick.net/gampad/ads?sz=640x480 iu=/124319096/external/single_ad_samples ciu_szs=300x250 impl=s gdfp_req=1 env=vp output=vast unviewed_position_start=1 cust_params=deployment%3Ddevsite%26sample_ct%3Dlinear correlator= ); // Add the AdBreak to a List List AdBreak adSchedule = new ArrayList (); adSchedule.add(adBreak); // Build a PlaylistItem and assign adSchedule PlaylistItem video = new PlaylistItem.Builder() .file( http://playertest.longtailvideo.com/adaptive/bipbop/gear4/prog_index.m3u8 ) .adSchedule(adSchedule) .build(); // Add the PlaylistItem to a List List PlaylistItem playlist = new ArrayList (); playlist.add(video); // Build the PlayerConfig PlayerConfig playerConfig = new PlayerConfig.Builder() .playlist(playlist) .build(); // Setup the player mPlayerView.setup(playerConfig);","title":"Assign an ad schedule to a playlist item"},{"location":"advertising/google-ima/#custom-parameters","text":"Use the AdBreak object to customize your IMA ad request. Code Example: Map String, String customParams = new HashMap (); customParams.put( age , 18 ); customParams.put( gender , male ); AdBreak adBreak = new AdBreak( pre , AdSource.IMA, YOUR_TAG ); adBreak.setCustomParams(customParams); Alternatively, you can use the adschedule object to customize your IMA request. Code Example: adschedule : { adBreak1 : { offset : pre , custParams : { age : 18 , gender : male }, ad : { source : googima , tag : YOUR_TAG } } }","title":"Custom Parameters"},{"location":"advertising/google-ima/#vmap-advertising","text":"Currently, VMAP advertising schedules can only be assigned to the entire playlist by using our VMAPAdvertising object. The added benefit of using VMAP is the fact that it contains its own ad schedule which can be easily served across different platforms. Code Example: // Create a new ImaVMAPAdvertising ImaVMAPAdvertising imaVMAPAdvertising = new ImaVMAPAdvertising( https://pubads.g.doubleclick.net/gampad/ads?sz=640x480 iu=/124319096/external/ad_rule_samples ciu_szs=300x250 ad_rule=1 impl=s gdfp_req=1 env=vp output=vmap unviewed_position_start=1 cust_params=deployment%3Ddevsite%26sample_ar%3Dpremidpostpod cmsid=496 vid=short_onecue correlator= ); // Construct a PlaylistItem PlaylistItem video = new PlaylistItem( http://playertest.longtailvideo.com/adaptive/bipbop/gear4/prog_index.m3u8 ); // Add the PlaylistItem to a List List PlaylistItem playlist = new ArrayList (); playlist.add(video); // Build the PlayerConfig PlayerConfig playerConfig = new PlayerConfig.Builder() .playlist(playlist) .advertising(imaVMAPAdvertising) .build(); // Setup the player mPlayerView.setup(playerConfig);","title":"VMAP Advertising"},{"location":"advertising/google-ima/#ad-pods","text":"Ad Pods allow ad networks to deliver multiple ads within a single ad break. Code Example: // Create video PlaylistItem video = new PlaylistItem( http://playertest.longtailvideo.com/adaptive/bipbop/gear4/prog_index.m3u8 ); // Set the ad break offset and tag AdBreak adBreak = new AdBreak( pre , AdSource.IMA, http://pubads.g.doubleclick.net/gampad/ads?sz=640x480 iu=/124319096/external/ad_rule_samples ciu_szs=300x250 ad_rule=1 impl=s gdfp_req=1 env=vp output=vmap unviewed_position_start=1 cust_params=sample_ar%3Dpreonlybumper cmsid=496 vid=short_onecue correlator= ); List AdBreak adSchedule = new ArrayList (); adSchedule.add(adBreak); // Set the ad schedule to your video video.setAdSchedule(adSchedule); // Add the PlaylistItem to a List List PlaylistItem playlist = new ArrayList (); playlist.add(video); // Build the PlayerConfig PlayerConfig playerConfig = new PlayerConfig.Builder() .playlist(playlist) .build(); // Setup the player mPlayerView.setup(playerConfig);","title":"Ad Pods"},{"location":"advertising/google-ima/#ima-sdk-settings","text":"As of version 2.6.x of the JW Player SDK for Android, settings for the IMA SDK can be configured by creating a new instance of ImaSdkSettings . Developers can then assigning it to an ImaAdvertising or ImaVMAPAdvertising instance by calling setImaSdkSetting() or by passing it into the constructor. For more information on the ImaSdkSettings class and its features please refer to the official Google documentation: https://developers.google.com/interactive-media-ads/docs/sdks/android/v3/api/reference/com/google/ads/interactivemedia/v3/api/ImaSdkSettings Code Example: // Create two videos with separate ad schedules List AdBreak adSchedule = new ArrayList (); AdBreak adBreak = new AdBreak( pre , AdSource.IMA, https://pubads.g.doubleclick.net/gampad/ads?sz=640x480 iu=/124319096/external/single_ad_samples ciu_szs=300x250 impl=s gdfp_req=1 env=vp output=vast unviewed_position_start=1 cust_params=deployment%3Ddevsite%26sample_ct%3Dlinear correlator= ); adSchedule.add(adBreak); PlaylistItem video = new PlaylistItem( http://playertest.longtailvideo.com/adaptive/bipbop/gear4/prog_index.m3u8 ); video.setAdSchedule(adSchedule); List AdBreak adSchedule2 = new ArrayList (); AdBreak adBreak2 = new AdBreak( pre , AdSource.IMA, https://pubads.g.doubleclick.net/gampad/ads?sz=640x480 iu=/124319096/external/single_ad_samples ciu_szs=300x250 impl=s gdfp_req=1 env=vp output=vast unviewed_position_start=1 cust_params=deployment%3Ddevsite%26sample_ct%3Dskippablelinear correlator= ); adSchedule2.add(adBreak2); PlaylistItem video2 = new PlaylistItem( http://playertest.longtailvideo.com/jwpromo/jwpromo.m3u8 ); video2.setAdSchedule(adSchedule2); // Add your videos to a playlist List PlaylistItem playlist = new ArrayList (); playlist.add(video); playlist.add(video2); // Setup the IMA SDK Settings and localize the advertising UI ImaSdkSettings imaSdkSettings = ImaSdkFactory.getInstance().createImaSdkSettings(); imaSdkSettings.setLanguage( nl ); // Set an empty List AdBreak to ImaAdvertising // This will allow the imaSdkSettings to take effect while having playlist item specific ad schedules // You could set the ad schedule to the ImaAdvertising object if you want the same schedule for each item ImaAdvertising imaAdvertising = new ImaAdvertising(new ArrayList AdBreak (), imaSdkSettings); // Create your player config PlayerConfig playerConfig = new PlayerConfig.Builder() .playlist(playlist) .advertising(imaAdvertising) .build(); // Setup your player with the config mPlayerView.setup(playerConfig);","title":"IMA SDK Settings"},{"location":"advertising/google-ima/#unsupported-features","text":"","title":"Unsupported Features"},{"location":"advertising/google-ima/#ad-tag-waterfalls","text":"When using AdSource.IMA you do not have the ability to define an ad tag waterfall in your code. An ad tag waterfall analog is instead defined in your Google Dashboard.","title":"Ad tag waterfalls"},{"location":"advertising/google-ima/#non-linear-overlay-ads","text":"Non-linear ads are not currently supported via AdSource.IMA . This is a limitation of the Google IMA SDK for Android. For more information please refer to the documentation here: https://developers.google.com/interactive-media-ads/docs/sdks/android/compatibility","title":"Non-linear Overlay Ads"},{"location":"advertising/google-ima/#ad-skip-offset","text":"The ad skip offset is always set within the ad response of a Google IMA ad tag and we do not override the value. To configure your skip offset please contact your ad network.","title":"Ad skip offset"},{"location":"advertising/google-ima/#ad-tag-variables","text":"The ad tag variables specified in our VAST documentation are not supported when using AdSource.IMA . Instead we suggest contacting Google IMA to provide you with a list of ad tag variables supported in the Google IMA SDK.","title":"Ad tag variables"},{"location":"advertising/google-ima/#vpaid","text":"The Google IMA SDK does not support VPAID 1.0 or VPAID 2.0 ads. This is a limitation of the Google IMA SDK for Android. For more information please refer to the documentation here: https://developers.google.com/interactive-media-ads/docs/sdks/android/compatibility","title":"VPAID"},{"location":"advertising/overview/","text":"Advertising Overview In this document we will list all advertising features supported by the JW Player SDK for Android along with some short code examples of the three basic ways you can schedule an advert to play with your content. Supported Features The JW Player SDK for Android supports the following advertising features: VAST 4 Google IMA VMAP Ad Pods FreeWheel VPAID 2.0 (Google IMA Unsupported) Non-Linear Banner Ads (Google IMA Unsupported) Ad Tag Waterfalls Ad Tag Macros Skip Offset For more information on what the Google IMA SDK for Android supports out of the box, please visit: https://developers.google.com/interactive-media-ads/docs/sdks/android/compatibility Scheduling ads for an entire playlist Playlist level advertising allows you to set the same ad schedule for every item in a playlist. When setting up a player for playlist level advertising you have two options: Option 1 Create an Advertising object // Create your ad schedule List AdBreak adSchedule = new ArrayList AdBreak (); AdBreak adBreak = new AdBreak( pre , AdSource.VAST, http://www.adotube.com/php/services/player/OMLService.php?avpid=oRYYzvQ platform_version=vast20 ad_type=linear groupbypass=1 HTTP_REFERER=http://www.longtailvideo.com video_identifier=longtailvideo.com,test ); adSchedule.add(adBreak); // Set your ad schedule to your advertising object Advertising advertising = new Advertising(AdSource.VAST, adSchedule); // Create a playlist, you'll need this to build your player config List PlaylistItem playlist = new ArrayList PlaylistItem (); PlaylistItem video = new PlaylistItem( http://playertest.longtailvideo.com/adaptive/bipbop/gear4/prog_index.m3u8 ); PlaylistItem video2 = new PlaylistItem( http://playertest.longtailvideo.com/jwpromo/jwpromo.m3u8 ); playlist.add(video); playlist.add(video2); // Create your player config PlayerConfig playerConfig = new PlayerConfig.Builder() .playlist(playlist) .advertising(advertising) .build(); // Setup your player with the config mPlayerView.setup(playerConfig); Option 2 Create a VMAPAdvertising object // Set the url to the VMAP tag VMAPAdvertising vmapAdvertising = new VMAPAdvertising(AdSource.VAST, https://playertest.longtailvideo.com/adtags/vmap2.xml ); // Create a playlist, you'll need this to build your player config List PlaylistItem playlist = new ArrayList PlaylistItem (); PlaylistItem video = new PlaylistItem( http://playertest.longtailvideo.com/adaptive/bipbop/gear4/prog_index.m3u8 ); PlaylistItem video2 = new PlaylistItem( http://playertest.longtailvideo.com/jwpromo/jwpromo.m3u8 ); playlist.add(video); playlist.add(video2); // Create your player config PlayerConfig playerConfig = new PlayerConfig.Builder() .playlist(playlist) .advertising(vmapAdvertising) .build(); // Setup your player with the config mPlayerView.setup(playerConfig); Scheduling ads per playlist item Playlist item advertising allows you to set specific ad schedules for each of your playlist items. Code Example: // Create video PlaylistItem video = new PlaylistItem( http://playertest.longtailvideo.com/adaptive/bipbop/gear4/prog_index.m3u8 ); // Create advertising schedule List AdBreak adSchedule = new ArrayList AdBreak (); AdBreak adBreak = new AdBreak( pre , AdSource.VAST, http://www.adotube.com/php/services/player/OMLService.php?avpid=oRYYzvQ platform_version=vast20 ad_type=linear groupbypass=1 HTTP_REFERER=http://www.longtailvideo.com video_identifier=longtailvideo.com,test ); adSchedule.add(adBreak); // Set advertising schedule to your video video.setAdSchedule(adSchedule); // Create second video PlaylistItem video2 = new PlaylistItem( http://playertest.longtailvideo.com/jwpromo/jwpromo.m3u8 ); // Create different advertising schedule List AdBreak adSchedule2 = new ArrayList AdBreak (); AdBreak adBreak2 = new AdBreak( 10 , AdSource.VAST, http://demo.jwplayer.com/android/vast-tags/preroll.xml ); adSchedule2.add(adBreak2); // Set advertising schedule to your video video2.setAdSchedule(adSchedule2); List PlaylistItem playlist = new ArrayList PlaylistItem (); playlist.add(video); playlist.add(video2); // Create your player config PlayerConfig playerConfig = new PlayerConfig.Builder() .playlist(playlist) .build(); // Setup your player with the config mPlayerView.setup(playerConfig); Play ads on the fly during playback Our API also allows developers to insert an ad as the content is playing by calling the playAd() method. For this to work however you must first set an advertising object with an empty List AdBreak to your PlayerConfig to let the player know which AdSource you will be using. Code Example: // Create your empty ad schedule List AdBreak adSchedule = new ArrayList AdBreak (); // Set your ad schedule to your advertising object Advertising advertising = new Advertising(AdSource.VAST, adSchedule); // Create a playlist, you'll need this to build your player config List PlaylistItem playlist = new ArrayList PlaylistItem (); PlaylistItem video = new PlaylistItem( http://playertest.longtailvideo.com/adaptive/bipbop/gear4/prog_index.m3u8 ); playlist.add(video); // Create your player config PlayerConfig playerConfig = new PlayerConfig.Builder() .playlist(playlist) .advertising(advertising) .build(); // Setup your player with the config mPlayerView.setup(playerConfig); // During playback you can now call the playAd() method mPlayerView.playAd( http://www.adotube.com/php/services/player/OMLService.php?avpid=oRYYzvQ platform_version=vast20 ad_type=linear groupbypass=1 HTTP_REFERER=http://www.longtailvideo.com video_identifier=longtailvideo.com,test ); Unsupported Features VPAID 1.0 !!!warning VPAID 1.0 IS NOT SUPPORTED !!! This mode of advertising delivers Flash creatives as the ad content. We do not support Flash playback on Android. Please make sure your ad networks do not serve these type of creatives to your mobile audience as you will lose ad opportunities.","title":"Advertising Overview"},{"location":"advertising/overview/#advertising","text":"","title":"Advertising"},{"location":"advertising/overview/#overview","text":"In this document we will list all advertising features supported by the JW Player SDK for Android along with some short code examples of the three basic ways you can schedule an advert to play with your content.","title":"Overview"},{"location":"advertising/overview/#supported-features","text":"The JW Player SDK for Android supports the following advertising features: VAST 4 Google IMA VMAP Ad Pods FreeWheel VPAID 2.0 (Google IMA Unsupported) Non-Linear Banner Ads (Google IMA Unsupported) Ad Tag Waterfalls Ad Tag Macros Skip Offset For more information on what the Google IMA SDK for Android supports out of the box, please visit: https://developers.google.com/interactive-media-ads/docs/sdks/android/compatibility","title":"Supported Features"},{"location":"advertising/overview/#scheduling-ads-for-an-entire-playlist","text":"Playlist level advertising allows you to set the same ad schedule for every item in a playlist. When setting up a player for playlist level advertising you have two options: Option 1","title":"Scheduling ads for an entire playlist"},{"location":"advertising/overview/#create-an-advertising-object","text":"// Create your ad schedule List AdBreak adSchedule = new ArrayList AdBreak (); AdBreak adBreak = new AdBreak( pre , AdSource.VAST, http://www.adotube.com/php/services/player/OMLService.php?avpid=oRYYzvQ platform_version=vast20 ad_type=linear groupbypass=1 HTTP_REFERER=http://www.longtailvideo.com video_identifier=longtailvideo.com,test ); adSchedule.add(adBreak); // Set your ad schedule to your advertising object Advertising advertising = new Advertising(AdSource.VAST, adSchedule); // Create a playlist, you'll need this to build your player config List PlaylistItem playlist = new ArrayList PlaylistItem (); PlaylistItem video = new PlaylistItem( http://playertest.longtailvideo.com/adaptive/bipbop/gear4/prog_index.m3u8 ); PlaylistItem video2 = new PlaylistItem( http://playertest.longtailvideo.com/jwpromo/jwpromo.m3u8 ); playlist.add(video); playlist.add(video2); // Create your player config PlayerConfig playerConfig = new PlayerConfig.Builder() .playlist(playlist) .advertising(advertising) .build(); // Setup your player with the config mPlayerView.setup(playerConfig); Option 2","title":"Create an Advertising object"},{"location":"advertising/overview/#create-a-vmapadvertising-object","text":"// Set the url to the VMAP tag VMAPAdvertising vmapAdvertising = new VMAPAdvertising(AdSource.VAST, https://playertest.longtailvideo.com/adtags/vmap2.xml ); // Create a playlist, you'll need this to build your player config List PlaylistItem playlist = new ArrayList PlaylistItem (); PlaylistItem video = new PlaylistItem( http://playertest.longtailvideo.com/adaptive/bipbop/gear4/prog_index.m3u8 ); PlaylistItem video2 = new PlaylistItem( http://playertest.longtailvideo.com/jwpromo/jwpromo.m3u8 ); playlist.add(video); playlist.add(video2); // Create your player config PlayerConfig playerConfig = new PlayerConfig.Builder() .playlist(playlist) .advertising(vmapAdvertising) .build(); // Setup your player with the config mPlayerView.setup(playerConfig);","title":"Create a VMAPAdvertising object"},{"location":"advertising/overview/#scheduling-ads-per-playlist-item","text":"Playlist item advertising allows you to set specific ad schedules for each of your playlist items. Code Example: // Create video PlaylistItem video = new PlaylistItem( http://playertest.longtailvideo.com/adaptive/bipbop/gear4/prog_index.m3u8 ); // Create advertising schedule List AdBreak adSchedule = new ArrayList AdBreak (); AdBreak adBreak = new AdBreak( pre , AdSource.VAST, http://www.adotube.com/php/services/player/OMLService.php?avpid=oRYYzvQ platform_version=vast20 ad_type=linear groupbypass=1 HTTP_REFERER=http://www.longtailvideo.com video_identifier=longtailvideo.com,test ); adSchedule.add(adBreak); // Set advertising schedule to your video video.setAdSchedule(adSchedule); // Create second video PlaylistItem video2 = new PlaylistItem( http://playertest.longtailvideo.com/jwpromo/jwpromo.m3u8 ); // Create different advertising schedule List AdBreak adSchedule2 = new ArrayList AdBreak (); AdBreak adBreak2 = new AdBreak( 10 , AdSource.VAST, http://demo.jwplayer.com/android/vast-tags/preroll.xml ); adSchedule2.add(adBreak2); // Set advertising schedule to your video video2.setAdSchedule(adSchedule2); List PlaylistItem playlist = new ArrayList PlaylistItem (); playlist.add(video); playlist.add(video2); // Create your player config PlayerConfig playerConfig = new PlayerConfig.Builder() .playlist(playlist) .build(); // Setup your player with the config mPlayerView.setup(playerConfig);","title":"Scheduling ads per playlist item"},{"location":"advertising/overview/#play-ads-on-the-fly-during-playback","text":"Our API also allows developers to insert an ad as the content is playing by calling the playAd() method. For this to work however you must first set an advertising object with an empty List AdBreak to your PlayerConfig to let the player know which AdSource you will be using. Code Example: // Create your empty ad schedule List AdBreak adSchedule = new ArrayList AdBreak (); // Set your ad schedule to your advertising object Advertising advertising = new Advertising(AdSource.VAST, adSchedule); // Create a playlist, you'll need this to build your player config List PlaylistItem playlist = new ArrayList PlaylistItem (); PlaylistItem video = new PlaylistItem( http://playertest.longtailvideo.com/adaptive/bipbop/gear4/prog_index.m3u8 ); playlist.add(video); // Create your player config PlayerConfig playerConfig = new PlayerConfig.Builder() .playlist(playlist) .advertising(advertising) .build(); // Setup your player with the config mPlayerView.setup(playerConfig); // During playback you can now call the playAd() method mPlayerView.playAd( http://www.adotube.com/php/services/player/OMLService.php?avpid=oRYYzvQ platform_version=vast20 ad_type=linear groupbypass=1 HTTP_REFERER=http://www.longtailvideo.com video_identifier=longtailvideo.com,test );","title":"Play ads on the fly during playback"},{"location":"advertising/overview/#unsupported-features","text":"","title":"Unsupported Features"},{"location":"advertising/overview/#vpaid-10","text":"!!!warning VPAID 1.0 IS NOT SUPPORTED !!! This mode of advertising delivers Flash creatives as the ad content. We do not support Flash playback on Android. Please make sure your ad networks do not serve these type of creatives to your mobile audience as you will lose ad opportunities.","title":"VPAID 1.0"},{"location":"advertising/vast/","text":"VAST Overview The JW Player SDK for Android supports VAST advertising and follows the standards set by the IAB. !!!warning As of version 2.3 of the JW Player SDK for Android, your VAST advertisements must have CORS configured for: Access-Control-Allow-Origin: http://intercept.jw/ This configuration is described in the IAB VAST specification on page 16: http://www.iab.com/wp-content/uploads/2015/06/VASTv3_0.pdf !!! Supported Features VAST 4 Ad Tag Waterfalls Non-Linear Banner Ads Playlist Item Level Advertising Playlist Level Advertising VMAP Ad Pods VPAID 2.0 Ad Tag Variables Skip Offset Ad tag waterfalls When using AdSource.VAST you have the ability to define an ad tag waterfall. Ad tag waterfalls allow you to set several ad tags to a single ad break and the player will play the first ad that returns a valid response. Code Example: // Create waterfall string array String[] waterfall = new String[]{ http://demo.jwplayer.com/android/vast-tags/pbadreroll.xml , http://demo.jwplayer.com/android/vast-tags/preroll.xml }; // Create your ad schedule AdBreak adBreak = new AdBreak( pre , AdSource.VAST, waterfall); List AdBreak adSchedule = new ArrayList AdBreak (); adSchedule.add(adBreak); // Create video PlaylistItem video = new PlaylistItem( http://playertest.longtailvideo.com/adaptive/bipbop/gear4/prog_index.m3u8 ); // Set the ad schedule to your video video.setAdSchedule(adSchedule); // Create a playlist List PlaylistItem playlist = new ArrayList PlaylistItem (); playlist.add(video); // Create your player config PlayerConfig playerConfig = new PlayerConfig.Builder() .playlist(playlist) .build(); // Setup your player with the config mPlayerView.setup(playerConfig); Non-linear Overlay Ads In addition to standard, linear video advertising, JW Player also supports the display of banner ads as an overlay over the video content. This means that advertisements can appear without disrupting playback. This method of advertising is known as a non-linear overlay ads. Non-linear ads are set up just like regular linear ads, with the only difference being that you must call setAdType() on your AdBreak and set it to AdType.NONLINEAR . Code Example: // Create video PlaylistItem video = new PlaylistItem( http://playertest.longtailvideo.com/adaptive/bipbop/gear4/prog_index.m3u8 ); // Set the ad break offset AdBreak adBreak = new AdBreak( pre , AdSource.VAST, http://playertest.longtailvideo.com/adtags/nonlinear.xml ); // Specify the AdType as NONLINEAR adBreak.setAdType(AdType.NONLINEAR); List AdBreak adSchedule = new ArrayList AdBreak (); adSchedule.add(adBreak); // Set the ad schedule to your video video.setAdSchedule(adSchedule); // Create a playlist List PlaylistItem playlist = new ArrayList PlaylistItem (); playlist.add(video); // Create your player config PlayerConfig playerConfig = new PlayerConfig.Builder() .playlist(playlist) .build(); // Setup your player with the config mPlayerView.setup(playerConfig); Assign an ad schedule to a playlist item You can also define playlist item specific ad schedules to further customize your ad strategy. Code Example: // Create video PlaylistItem video = new PlaylistItem( http://playertest.longtailvideo.com/adaptive/bipbop/gear4/prog_index.m3u8 ); // Create advertising schedule List AdBreak adSchedule = new ArrayList AdBreak (); AdBreak adBreak = new AdBreak( pre , AdSource.VAST, http://www.adotube.com/php/services/player/OMLService.php?avpid=oRYYzvQ platform_version=vast20 ad_type=linear groupbypass=1 HTTP_REFERER=http://www.longtailvideo.com video_identifier=longtailvideo.com,test ); adSchedule.add(adBreak); // Set advertising schedule to your video video.setAdSchedule(adSchedule); // Create second video PlaylistItem video2 = new PlaylistItem( http://playertest.longtailvideo.com/jwpromo/jwpromo.m3u8 ); // Create different advertising schedule List AdBreak adSchedule2 = new ArrayList AdBreak (); AdBreak adBreak2 = new AdBreak( 10 , AdSource.VAST, http://demo.jwplayer.com/android/vast-tags/preroll.xml ); adSchedule2.add(adBreak2); // Set advertising schedule to your video video2.setAdSchedule(adSchedule2); List PlaylistItem playlist = new ArrayList PlaylistItem (); playlist.add(video); playlist.add(video2); // Create your player config PlayerConfig playerConfig = new PlayerConfig.Builder() .playlist(playlist) .build(); // Setup your player with the config mPlayerView.setup(playerConfig); Assign an ad schedule to the entire playlist When using AdSource.VAST you have the option of setting an ad schedule for the entire playlist by creating an Advertising object. Code Example: // Create your ad schedule List AdBreak adSchedule = new ArrayList AdBreak (); AdBreak adBreak = new AdBreak( pre , AdSource.VAST, http://www.adotube.com/php/services/player/OMLService.php?avpid=oRYYzvQ platform_version=vast20 ad_type=linear groupbypass=1 HTTP_REFERER=http://www.longtailvideo.com video_identifier=longtailvideo.com,test ); adSchedule.add(adBreak); // Set your ad schedule to your advertising object Advertising advertising = new Advertising(AdSource.VAST, adSchedule); advertising.setSkipOffset(3); advertising.setAdMessage( Text that appears in the control bar ); advertising.setCueText( Text that appears when you hover over the ad marker ); advertising.setSkipMessage( Text that appears before skip is available ); advertising.setSkipText( Text that appears when skip is available ); // Create a playlist, you'll need this to build your player config List PlaylistItem playlist = new ArrayList PlaylistItem (); PlaylistItem video = new PlaylistItem( http://playertest.longtailvideo.com/adaptive/bipbop/gear4/prog_index.m3u8 ); PlaylistItem video2 = new PlaylistItem( http://playertest.longtailvideo.com/jwpromo/jwpromo.m3u8 ); playlist.add(video); playlist.add(video2); // Create your player config PlayerConfig playerConfig = new PlayerConfig.Builder() .playlist(playlist) .advertising(advertising) .build(); // Setup your player with the config mPlayerView.setup(playerConfig); VMAP Advertising Currently, VMAP advertising schedules can only be assigned to the entire playlist using our VMAPAdvertising object. The added benefit of using VMAP is the fact that it contains its own ad schedule which can be served across different platforms. Code Example: // Set the url to the VMAP tag VMAPAdvertising vmapAdvertising = new VMAPAdvertising(AdSource.VAST, https://playertest.longtailvideo.com/adtags/vmap2.xml ); // Create a playlist, you'll need this to build your player config List PlaylistItem playlist = new ArrayList PlaylistItem (); PlaylistItem video = new PlaylistItem( http://playertest.longtailvideo.com/adaptive/bipbop/gear4/prog_index.m3u8 ); PlaylistItem video2 = new PlaylistItem( http://playertest.longtailvideo.com/jwpromo/jwpromo.m3u8 ); playlist.add(video); playlist.add(video2); // Create your player config PlayerConfig playerConfig = new PlayerConfig.Builder() .playlist(playlist) .advertising(vmapAdvertising) .build(); // Setup your player with the config mPlayerView.setup(playerConfig); Ad Pods VAST 3 Ad Pods allow ad networks to deliver multiple ads in a single ad break. !!!warning When configuring ad pods that contain both VPAID 2.0 and regular linear ads it is important that you schedule the VPAID 2.0 ads first, followed by your linear ads. You CANNOT mix the sequence. !!! Code Example: // Create video PlaylistItem video = new PlaylistItem( http://playertest.longtailvideo.com/adaptive/bipbop/gear4/prog_index.m3u8 ); // Set the ad break offset AdBreak adBreak = new AdBreak( pre , AdSource.VAST, https://s3.amazonaws.com/demo.jwplayer.com/advertising/assets/vast3_jw_ads.xml ); List AdBreak adSchedule = new ArrayList AdBreak (); adSchedule.add(adBreak); // Set the ad schedule to your video video.setAdSchedule(adSchedule); // Create a playlist List PlaylistItem playlist = new ArrayList PlaylistItem (); playlist.add(video); // Create your player config PlayerConfig playerConfig = new PlayerConfig.Builder() .playlist(playlist) .build(); // Setup your player with the config mPlayerView.setup(playerConfig); VPAID 2.0 As of version 2.3.0 the JW Player SDK for Android supports VPAID 2 creatives. This version of VPAID can deliver JavaScript ad creatives. Code Example: // Create video PlaylistItem video = new PlaylistItem( http://playertest.longtailvideo.com/adaptive/bipbop/gear4/prog_index.m3u8 ); // Set the ad break offset AdBreak adBreak = new AdBreak( pre , AdSource.VAST, http://search.spotxchange.com/vast/2.00/85394?VPAID=js content_page_url=www.testing123.com cb=__random-number__ device[devicetype]=1 device[dnt]=0 ); List AdBreak adSchedule = new ArrayList AdBreak (); adSchedule.add(adBreak); // Set the ad schedule to your video video.setAdSchedule(adSchedule); // Create a playlist List PlaylistItem playlist = new ArrayList PlaylistItem (); playlist.add(video); // Create your player config PlayerConfig playerConfig = new PlayerConfig.Builder() .playlist(playlist) .build(); // Setup your player with the config mPlayerView.setup(playerConfig); Caution: Only VPAID 2.0 JavaScript creatives are supported . Flash and Silverlight creatives are not supported. HTML5 Fullscreen API's are currently NOT supported since the JW Player SDK for Android has its own fullscreen behavior. Because of this you must make sure that your ad creatives are responsive and are able to handle dynamic changes in width and height, which occur when a user rotates their device. We recommend you to test your VPAID creatives with our SDK before distributing them as they may throw errors or not work as expected when rendered by the JW Player SDK for Android. Ad tag variables Ad tag variables are special macros which expand to provide your ad request additional details about your content such as its title, description or the player's height and width. For a complete list of supported macros please visit: https://support.jwplayer.com/customer/portal/articles/1434340-ad-tag-targeting-macros Code Example // Create video PlaylistItem video = new PlaylistItem( http://playertest.longtailvideo.com/adaptive/bipbop/gear4/prog_index.m3u8 ); // Make sure to set the item information you'll be expanding later video.setDescription( BipBop ); // Set the ad break offset AdBreak adBreak = new AdBreak( pre , AdSource.VAST, https://playertest.longtailvideo.com/adtags/vmap2.xml?descr=__item-description__ height=__player-height__ width=__player-width__ ); List AdBreak adSchedule = new ArrayList AdBreak (); adSchedule.add(adBreak); // Set the ad schedule to your video video.setAdSchedule(adSchedule); // Create a playlist List PlaylistItem playlist = new ArrayList PlaylistItem (); playlist.add(video); // Create your player config PlayerConfig playerConfig = new PlayerConfig.Builder() .playlist(playlist) .build(); // Setup your player with the config mPlayerView.setup(playerConfig); Setting the skip offset When using AdSource.VAST you can set the time it takes to show a skip button for the ad provided. You can set it for both playlist level advertising and playlist item level advertising. Below is a code example for the playlist item level advertising scenario. Code Example: // Construct a new AdBreak containing the Ad tag // This AdBreak will play a midroll at 10% AdBreak adBreak = new AdBreak( 10% , AdSource.VAST, http://demo.jwplayer.com/android/vast-tags/preroll.xml ); // Add the AdBreak to a List List AdBreak adSchedule = new ArrayList (); adSchedule.add(adBreak); // Build a PlaylistItem and assign adSchedule PlaylistItem video = new PlaylistItem.Builder() .file( http://url.with.content/file.mp4 ) .adSchedule(adSchedule) .build(); // Add the PlaylistItem to a List List PlaylistItem playlist = new ArrayList (); playlist.add(video); // Create an empty list for the Advertising object List AdBreak emptyList = new ArrayList (); // Construct the Advertising Object Advertising advertising = new Advertising(AdSource.VAST,emptyList); // Set the skip offset in seconds advertising.setSkipOffset(3); // Build the PlayerConfig PlayerConfig playerConfig = new PlayerConfig.Builder(this) .playlist(playlist) .advertising(advertising) .build(); // Setup the player mPlayerView.setup(playerConfig); Timing your ads Timing your ads is accomplished with the AdBreak object and its offset variable. Values permitted include: pre : specifies that the AdBreak should be played before the video content. post : specifies that the AdBreak should be played after the video content. A time value specified in one of the following formats: Seconds: 50 Fractional seconds: 50.5 Percentage of the entire video: 50% Timecode (hh:mm:ss.mmm): 01:55:30:000","title":"VAST"},{"location":"advertising/vast/#vast","text":"","title":"VAST"},{"location":"advertising/vast/#overview","text":"The JW Player SDK for Android supports VAST advertising and follows the standards set by the IAB. !!!warning As of version 2.3 of the JW Player SDK for Android, your VAST advertisements must have CORS configured for: Access-Control-Allow-Origin: http://intercept.jw/ This configuration is described in the IAB VAST specification on page 16: http://www.iab.com/wp-content/uploads/2015/06/VASTv3_0.pdf !!!","title":"Overview"},{"location":"advertising/vast/#supported-features","text":"VAST 4 Ad Tag Waterfalls Non-Linear Banner Ads Playlist Item Level Advertising Playlist Level Advertising VMAP Ad Pods VPAID 2.0 Ad Tag Variables Skip Offset","title":"Supported Features"},{"location":"advertising/vast/#ad-tag-waterfalls","text":"When using AdSource.VAST you have the ability to define an ad tag waterfall. Ad tag waterfalls allow you to set several ad tags to a single ad break and the player will play the first ad that returns a valid response. Code Example: // Create waterfall string array String[] waterfall = new String[]{ http://demo.jwplayer.com/android/vast-tags/pbadreroll.xml , http://demo.jwplayer.com/android/vast-tags/preroll.xml }; // Create your ad schedule AdBreak adBreak = new AdBreak( pre , AdSource.VAST, waterfall); List AdBreak adSchedule = new ArrayList AdBreak (); adSchedule.add(adBreak); // Create video PlaylistItem video = new PlaylistItem( http://playertest.longtailvideo.com/adaptive/bipbop/gear4/prog_index.m3u8 ); // Set the ad schedule to your video video.setAdSchedule(adSchedule); // Create a playlist List PlaylistItem playlist = new ArrayList PlaylistItem (); playlist.add(video); // Create your player config PlayerConfig playerConfig = new PlayerConfig.Builder() .playlist(playlist) .build(); // Setup your player with the config mPlayerView.setup(playerConfig);","title":"Ad tag waterfalls"},{"location":"advertising/vast/#non-linear-overlay-ads","text":"In addition to standard, linear video advertising, JW Player also supports the display of banner ads as an overlay over the video content. This means that advertisements can appear without disrupting playback. This method of advertising is known as a non-linear overlay ads. Non-linear ads are set up just like regular linear ads, with the only difference being that you must call setAdType() on your AdBreak and set it to AdType.NONLINEAR . Code Example: // Create video PlaylistItem video = new PlaylistItem( http://playertest.longtailvideo.com/adaptive/bipbop/gear4/prog_index.m3u8 ); // Set the ad break offset AdBreak adBreak = new AdBreak( pre , AdSource.VAST, http://playertest.longtailvideo.com/adtags/nonlinear.xml ); // Specify the AdType as NONLINEAR adBreak.setAdType(AdType.NONLINEAR); List AdBreak adSchedule = new ArrayList AdBreak (); adSchedule.add(adBreak); // Set the ad schedule to your video video.setAdSchedule(adSchedule); // Create a playlist List PlaylistItem playlist = new ArrayList PlaylistItem (); playlist.add(video); // Create your player config PlayerConfig playerConfig = new PlayerConfig.Builder() .playlist(playlist) .build(); // Setup your player with the config mPlayerView.setup(playerConfig);","title":"Non-linear Overlay Ads"},{"location":"advertising/vast/#assign-an-ad-schedule-to-a-playlist-item","text":"You can also define playlist item specific ad schedules to further customize your ad strategy. Code Example: // Create video PlaylistItem video = new PlaylistItem( http://playertest.longtailvideo.com/adaptive/bipbop/gear4/prog_index.m3u8 ); // Create advertising schedule List AdBreak adSchedule = new ArrayList AdBreak (); AdBreak adBreak = new AdBreak( pre , AdSource.VAST, http://www.adotube.com/php/services/player/OMLService.php?avpid=oRYYzvQ platform_version=vast20 ad_type=linear groupbypass=1 HTTP_REFERER=http://www.longtailvideo.com video_identifier=longtailvideo.com,test ); adSchedule.add(adBreak); // Set advertising schedule to your video video.setAdSchedule(adSchedule); // Create second video PlaylistItem video2 = new PlaylistItem( http://playertest.longtailvideo.com/jwpromo/jwpromo.m3u8 ); // Create different advertising schedule List AdBreak adSchedule2 = new ArrayList AdBreak (); AdBreak adBreak2 = new AdBreak( 10 , AdSource.VAST, http://demo.jwplayer.com/android/vast-tags/preroll.xml ); adSchedule2.add(adBreak2); // Set advertising schedule to your video video2.setAdSchedule(adSchedule2); List PlaylistItem playlist = new ArrayList PlaylistItem (); playlist.add(video); playlist.add(video2); // Create your player config PlayerConfig playerConfig = new PlayerConfig.Builder() .playlist(playlist) .build(); // Setup your player with the config mPlayerView.setup(playerConfig);","title":"Assign an ad schedule to a playlist item"},{"location":"advertising/vast/#assign-an-ad-schedule-to-the-entire-playlist","text":"When using AdSource.VAST you have the option of setting an ad schedule for the entire playlist by creating an Advertising object. Code Example: // Create your ad schedule List AdBreak adSchedule = new ArrayList AdBreak (); AdBreak adBreak = new AdBreak( pre , AdSource.VAST, http://www.adotube.com/php/services/player/OMLService.php?avpid=oRYYzvQ platform_version=vast20 ad_type=linear groupbypass=1 HTTP_REFERER=http://www.longtailvideo.com video_identifier=longtailvideo.com,test ); adSchedule.add(adBreak); // Set your ad schedule to your advertising object Advertising advertising = new Advertising(AdSource.VAST, adSchedule); advertising.setSkipOffset(3); advertising.setAdMessage( Text that appears in the control bar ); advertising.setCueText( Text that appears when you hover over the ad marker ); advertising.setSkipMessage( Text that appears before skip is available ); advertising.setSkipText( Text that appears when skip is available ); // Create a playlist, you'll need this to build your player config List PlaylistItem playlist = new ArrayList PlaylistItem (); PlaylistItem video = new PlaylistItem( http://playertest.longtailvideo.com/adaptive/bipbop/gear4/prog_index.m3u8 ); PlaylistItem video2 = new PlaylistItem( http://playertest.longtailvideo.com/jwpromo/jwpromo.m3u8 ); playlist.add(video); playlist.add(video2); // Create your player config PlayerConfig playerConfig = new PlayerConfig.Builder() .playlist(playlist) .advertising(advertising) .build(); // Setup your player with the config mPlayerView.setup(playerConfig);","title":"Assign an ad schedule to the entire playlist"},{"location":"advertising/vast/#vmap-advertising","text":"Currently, VMAP advertising schedules can only be assigned to the entire playlist using our VMAPAdvertising object. The added benefit of using VMAP is the fact that it contains its own ad schedule which can be served across different platforms. Code Example: // Set the url to the VMAP tag VMAPAdvertising vmapAdvertising = new VMAPAdvertising(AdSource.VAST, https://playertest.longtailvideo.com/adtags/vmap2.xml ); // Create a playlist, you'll need this to build your player config List PlaylistItem playlist = new ArrayList PlaylistItem (); PlaylistItem video = new PlaylistItem( http://playertest.longtailvideo.com/adaptive/bipbop/gear4/prog_index.m3u8 ); PlaylistItem video2 = new PlaylistItem( http://playertest.longtailvideo.com/jwpromo/jwpromo.m3u8 ); playlist.add(video); playlist.add(video2); // Create your player config PlayerConfig playerConfig = new PlayerConfig.Builder() .playlist(playlist) .advertising(vmapAdvertising) .build(); // Setup your player with the config mPlayerView.setup(playerConfig);","title":"VMAP Advertising"},{"location":"advertising/vast/#ad-pods","text":"VAST 3 Ad Pods allow ad networks to deliver multiple ads in a single ad break. !!!warning When configuring ad pods that contain both VPAID 2.0 and regular linear ads it is important that you schedule the VPAID 2.0 ads first, followed by your linear ads. You CANNOT mix the sequence. !!! Code Example: // Create video PlaylistItem video = new PlaylistItem( http://playertest.longtailvideo.com/adaptive/bipbop/gear4/prog_index.m3u8 ); // Set the ad break offset AdBreak adBreak = new AdBreak( pre , AdSource.VAST, https://s3.amazonaws.com/demo.jwplayer.com/advertising/assets/vast3_jw_ads.xml ); List AdBreak adSchedule = new ArrayList AdBreak (); adSchedule.add(adBreak); // Set the ad schedule to your video video.setAdSchedule(adSchedule); // Create a playlist List PlaylistItem playlist = new ArrayList PlaylistItem (); playlist.add(video); // Create your player config PlayerConfig playerConfig = new PlayerConfig.Builder() .playlist(playlist) .build(); // Setup your player with the config mPlayerView.setup(playerConfig);","title":"Ad Pods"},{"location":"advertising/vast/#vpaid-20","text":"As of version 2.3.0 the JW Player SDK for Android supports VPAID 2 creatives. This version of VPAID can deliver JavaScript ad creatives. Code Example: // Create video PlaylistItem video = new PlaylistItem( http://playertest.longtailvideo.com/adaptive/bipbop/gear4/prog_index.m3u8 ); // Set the ad break offset AdBreak adBreak = new AdBreak( pre , AdSource.VAST, http://search.spotxchange.com/vast/2.00/85394?VPAID=js content_page_url=www.testing123.com cb=__random-number__ device[devicetype]=1 device[dnt]=0 ); List AdBreak adSchedule = new ArrayList AdBreak (); adSchedule.add(adBreak); // Set the ad schedule to your video video.setAdSchedule(adSchedule); // Create a playlist List PlaylistItem playlist = new ArrayList PlaylistItem (); playlist.add(video); // Create your player config PlayerConfig playerConfig = new PlayerConfig.Builder() .playlist(playlist) .build(); // Setup your player with the config mPlayerView.setup(playerConfig); Caution: Only VPAID 2.0 JavaScript creatives are supported . Flash and Silverlight creatives are not supported. HTML5 Fullscreen API's are currently NOT supported since the JW Player SDK for Android has its own fullscreen behavior. Because of this you must make sure that your ad creatives are responsive and are able to handle dynamic changes in width and height, which occur when a user rotates their device. We recommend you to test your VPAID creatives with our SDK before distributing them as they may throw errors or not work as expected when rendered by the JW Player SDK for Android.","title":"VPAID 2.0"},{"location":"advertising/vast/#ad-tag-variables","text":"Ad tag variables are special macros which expand to provide your ad request additional details about your content such as its title, description or the player's height and width. For a complete list of supported macros please visit: https://support.jwplayer.com/customer/portal/articles/1434340-ad-tag-targeting-macros Code Example // Create video PlaylistItem video = new PlaylistItem( http://playertest.longtailvideo.com/adaptive/bipbop/gear4/prog_index.m3u8 ); // Make sure to set the item information you'll be expanding later video.setDescription( BipBop ); // Set the ad break offset AdBreak adBreak = new AdBreak( pre , AdSource.VAST, https://playertest.longtailvideo.com/adtags/vmap2.xml?descr=__item-description__ height=__player-height__ width=__player-width__ ); List AdBreak adSchedule = new ArrayList AdBreak (); adSchedule.add(adBreak); // Set the ad schedule to your video video.setAdSchedule(adSchedule); // Create a playlist List PlaylistItem playlist = new ArrayList PlaylistItem (); playlist.add(video); // Create your player config PlayerConfig playerConfig = new PlayerConfig.Builder() .playlist(playlist) .build(); // Setup your player with the config mPlayerView.setup(playerConfig);","title":"Ad tag variables"},{"location":"advertising/vast/#setting-the-skip-offset","text":"When using AdSource.VAST you can set the time it takes to show a skip button for the ad provided. You can set it for both playlist level advertising and playlist item level advertising. Below is a code example for the playlist item level advertising scenario. Code Example: // Construct a new AdBreak containing the Ad tag // This AdBreak will play a midroll at 10% AdBreak adBreak = new AdBreak( 10% , AdSource.VAST, http://demo.jwplayer.com/android/vast-tags/preroll.xml ); // Add the AdBreak to a List List AdBreak adSchedule = new ArrayList (); adSchedule.add(adBreak); // Build a PlaylistItem and assign adSchedule PlaylistItem video = new PlaylistItem.Builder() .file( http://url.with.content/file.mp4 ) .adSchedule(adSchedule) .build(); // Add the PlaylistItem to a List List PlaylistItem playlist = new ArrayList (); playlist.add(video); // Create an empty list for the Advertising object List AdBreak emptyList = new ArrayList (); // Construct the Advertising Object Advertising advertising = new Advertising(AdSource.VAST,emptyList); // Set the skip offset in seconds advertising.setSkipOffset(3); // Build the PlayerConfig PlayerConfig playerConfig = new PlayerConfig.Builder(this) .playlist(playlist) .advertising(advertising) .build(); // Setup the player mPlayerView.setup(playerConfig);","title":"Setting the skip offset"},{"location":"advertising/vast/#timing-your-ads","text":"Timing your ads is accomplished with the AdBreak object and its offset variable. Values permitted include: pre : specifies that the AdBreak should be played before the video content. post : specifies that the AdBreak should be played after the video content. A time value specified in one of the following formats: Seconds: 50 Fractional seconds: 50.5 Percentage of the entire video: 50% Timecode (hh:mm:ss.mmm): 01:55:30:000","title":"Timing your ads"},{"location":"chromecast/customization/","text":"Customize Chromecast Dialog You can customize the appearance of the VideoMediaRouteControllerDialog which appears when you click on the MediaRouteButton when casting. You can do this by overriding the custom_media_route_controller_controls_dialog.xml layout file. As an example, here is the custom_media_route_controller_controls_dialog.xml that we use in our demo app: ?xml version= 1.0 encoding= utf-8 ? !-- Copyright 2015 Google Inc. All rights reserved. Licensed under the Apache License, Version 2.0 (the License ); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. -- RelativeLayout xmlns:android= http://schemas.android.com/apk/res/android android:layout_width= wrap_content android:layout_height= wrap_content android:paddingLeft= 24dp android:paddingRight= 24dp RelativeLayout android:id= @+id/iconContainer android:layout_width= 68dp android:layout_height= 68dp android:layout_alignParentLeft= true ImageView android:id= @+id/iconView android:layout_width= wrap_content android:layout_height= wrap_content android:adjustViewBounds= false android:cropToPadding= false android:scaleType= centerCrop android:src= @drawable/album_art_placeholder / /RelativeLayout ImageView android:id= @+id/playPauseView android:layout_width= wrap_content android:layout_height= wrap_content android:layout_alignParentRight= true android:layout_centerVertical= true android:src= @drawable/ic_av_pause_sm_dark / ProgressBar android:id= @+id/loadingView android:layout_width= wrap_content android:layout_height= wrap_content android:layout_alignBottom= @+id/playPauseView android:layout_alignLeft= @+id/playPauseView android:layout_alignRight= @+id/playPauseView android:layout_alignTop= @+id/playPauseView android:layout_centerVertical= true android:visibility= gone / LinearLayout android:id= @+id/textContainer android:layout_width= wrap_content android:layout_height= wrap_content android:layout_centerVertical= true android:layout_marginLeft= 5dp android:layout_marginRight= 10dp android:layout_toLeftOf= @+id/playPauseView android:layout_toRightOf= @+id/iconContainer android:orientation= vertical TextView android:id= @+id/titleView android:layout_width= fill_parent android:layout_height= wrap_content android:layout_alignTop= @+id/iconContainer android:layout_marginLeft= 10dp android:layout_marginRight= 5dp android:layout_marginTop= 6dp android:layout_toLeftOf= @+id/playPauseView android:layout_toRightOf= @+id/iconContainer android:ellipsize= end android:maxLines= 1 android:textColor= @color/ccl_mr_custom_line_1 android:textSize= 15sp / TextView android:id= @+id/subTitleView android:layout_width= fill_parent android:layout_height= wrap_content android:layout_alignBottom= @+id/iconContainer android:layout_marginBottom= 7dp android:layout_marginLeft= 10dp android:layout_marginRight= 5dp android:layout_toLeftOf= @+id/playPauseView android:layout_toRightOf= @+id/iconContainer android:ellipsize= end android:maxLines= 1 android:textColor= @color/ccl_mr_custom_line_2 android:textSize= 13sp / /LinearLayout TextView android:id= @+id/emptyView android:layout_width= fill_parent android:layout_height= wrap_content android:ellipsize= end android:gravity= center android:maxLines= 1 android:paddingBottom= 10dp android:paddingTop= 10dp android:text= @string/ccl_no_media_info android:textAlignment= center android:textColor= @color/ccl_mr_custom_line_1 android:textSize= 15sp android:visibility= gone / /RelativeLayout","title":"Customization"},{"location":"chromecast/customization/#customize-chromecast-dialog","text":"You can customize the appearance of the VideoMediaRouteControllerDialog which appears when you click on the MediaRouteButton when casting. You can do this by overriding the custom_media_route_controller_controls_dialog.xml layout file. As an example, here is the custom_media_route_controller_controls_dialog.xml that we use in our demo app: ?xml version= 1.0 encoding= utf-8 ? !-- Copyright 2015 Google Inc. All rights reserved. Licensed under the Apache License, Version 2.0 (the License ); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. -- RelativeLayout xmlns:android= http://schemas.android.com/apk/res/android android:layout_width= wrap_content android:layout_height= wrap_content android:paddingLeft= 24dp android:paddingRight= 24dp RelativeLayout android:id= @+id/iconContainer android:layout_width= 68dp android:layout_height= 68dp android:layout_alignParentLeft= true ImageView android:id= @+id/iconView android:layout_width= wrap_content android:layout_height= wrap_content android:adjustViewBounds= false android:cropToPadding= false android:scaleType= centerCrop android:src= @drawable/album_art_placeholder / /RelativeLayout ImageView android:id= @+id/playPauseView android:layout_width= wrap_content android:layout_height= wrap_content android:layout_alignParentRight= true android:layout_centerVertical= true android:src= @drawable/ic_av_pause_sm_dark / ProgressBar android:id= @+id/loadingView android:layout_width= wrap_content android:layout_height= wrap_content android:layout_alignBottom= @+id/playPauseView android:layout_alignLeft= @+id/playPauseView android:layout_alignRight= @+id/playPauseView android:layout_alignTop= @+id/playPauseView android:layout_centerVertical= true android:visibility= gone / LinearLayout android:id= @+id/textContainer android:layout_width= wrap_content android:layout_height= wrap_content android:layout_centerVertical= true android:layout_marginLeft= 5dp android:layout_marginRight= 10dp android:layout_toLeftOf= @+id/playPauseView android:layout_toRightOf= @+id/iconContainer android:orientation= vertical TextView android:id= @+id/titleView android:layout_width= fill_parent android:layout_height= wrap_content android:layout_alignTop= @+id/iconContainer android:layout_marginLeft= 10dp android:layout_marginRight= 5dp android:layout_marginTop= 6dp android:layout_toLeftOf= @+id/playPauseView android:layout_toRightOf= @+id/iconContainer android:ellipsize= end android:maxLines= 1 android:textColor= @color/ccl_mr_custom_line_1 android:textSize= 15sp / TextView android:id= @+id/subTitleView android:layout_width= fill_parent android:layout_height= wrap_content android:layout_alignBottom= @+id/iconContainer android:layout_marginBottom= 7dp android:layout_marginLeft= 10dp android:layout_marginRight= 5dp android:layout_toLeftOf= @+id/playPauseView android:layout_toRightOf= @+id/iconContainer android:ellipsize= end android:maxLines= 1 android:textColor= @color/ccl_mr_custom_line_2 android:textSize= 13sp / /LinearLayout TextView android:id= @+id/emptyView android:layout_width= fill_parent android:layout_height= wrap_content android:ellipsize= end android:gravity= center android:maxLines= 1 android:paddingBottom= 10dp android:paddingTop= 10dp android:text= @string/ccl_no_media_info android:textAlignment= center android:textColor= @color/ccl_mr_custom_line_1 android:textSize= 15sp android:visibility= gone / /RelativeLayout","title":"Customize Chromecast Dialog"},{"location":"chromecast/getting-started/","text":"Chromecast Overview Enabling Chromecast functionality for your Android application using the JW Player SDK is simple. There are 6 steps to complete: (Not required for Maven users) Include Google's CastCompanionLibrary in your project. Initialize JW Player's CastManager at the Application level Create an activity that is a descendant of FragmentActivity from the android.support.v4 support library Add a JWPlayerFragment or a JWPlayerView to your Activity Add a MediaRouteButton to the ActionBar or to your Activity's layout Connect your device to the same WiFi network as your Chromecast Now you can cast compatible media formats that are currently playing in your application to the big screen! Including Google's CastCompanionLibrary (not required if your app uses mvn.jwplayer.com to add the JW Player SDK dependencies) Since JW Player's SDK was built using version #cast_companion_version# of Google's CastCompanionLibrary In your app's build.gradle, add the library from jCenter repo by adding the following line to your project's dependencies: dependencies { ... compile 'com.google.android.libraries.cast.companionlibrary:ccl:#cast_companion_version#' } Initializing the CastManager Connecting to Chromecast devices is managed by the CastManager class. The CastManager is a singleton class that must be initialized in the onCreate() method of the application. Initialization Create a new class that extends from Android's Application class, and override the onCreate() method as shown below public class MyApplication extends Application { @Override public void onCreate() { super.onCreate(); /* * We need to initialize singletons in the global application object to prevent issues * with garbage collection. */ CastManager.initialize(this); // You can now get a reference to the singleton by calling CastManager.getInstance(); } } After you creating your MyApplication class, you should modify the AndroidManifest.xml and set the fully qualified name within the application tag. application android:icon= @drawable/ic_launcher android:label= @string/app_name android:theme= @style/Theme.AppCompat android:name= com.longtailvideo.jwplayer.example.MyApplication ... /application Configuring your Activity To enable casting, the activity in which JW Player exists must be a descendant of FragmentActivity of the android.support.v4 support library. In our example we will be using AppCompatActivity from the android.support.v7 support library, which satisfies the criteria. public class ChromecastActivity extends AppCompatActivity { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_chromecast); } } You now have two options Option A: Use JWPlayerFragment The fastest way to get Chromecast up and running is by using the JWPlayerFragment or JWPlayerSupportFragment . The JWPlayerFragment will take care of adding the MediaRouteButton to your action bar which allows users to begin casting. As a refresher, here's how to add a JWPlayerFragment to your Activity. As soon as you completed the above steps and added the JWPlayerFragment to your Activity's layout you should now be ready to start Casting, just make sure you are on the same network as your casting device and the Cast button will appear on your ActionBar . Option B: Use JWPlayerView Using JWPlayerView allows more granular control over the player and the MediaRouteButton As a refresher, here's how to add a JWPlayerView to your Activity. As soon as you completed the above steps and added the JWPlayerView to your activity you should now be ready to add your MediaRouteButton . Adding the MediaRouteButton The MediaRouteButton allows users to select which device they'd like to start casting to. During the cast session it provides a customizable dialog that allows users to play, pause or cease casting at any time. Below we'll describe two ways of adding the MediaRouteButton to you application, either to the ActionBar or to your Activity's layout. Adding a MediaRouteButton to the ActionBar You will only have to add the MediaRouteButton to your ActionBar when using the JWPlayerView as this is the default location of the MediaRouteButton when using the JWPlayerFragment . There are two ways to add the MediaRouteButton to your ActionBar Add to ActionBar via XML Add the following item to your Activity's menu_main.xml : item android:id= @+id/media_route_menu_item android:title= @string/media_route_menu_title app:actionProviderClass= android.support.v7.app.MediaRouteActionProvider app:showAsAction= always / In your Activity override onCreateOptionsMenu() : @Override public boolean onCreateOptionsMenu(Menu menu) { super.onCreateOptionsMenu(menu); // Inflate the menu getMenuInflater().inflate(R.menu.menu_main, menu); // Register the MediaRouterButton on the JWPlayer SDK CastManager.getInstance().addMediaRouterButton(menu, R.id.media_route_menu_item); return true; } Add to ActionBar Programmatically It is also possible to add the MediaRouteButton to your ActionBar programmatically. In your Activity override onCreateOptionsMenu() as shown below @Override public boolean onCreateOptionsMenu(Menu menu) { super.onCreateOptionsMenu(menu); // Create the button MenuItem castButton = menu.add(Menu.NONE, R.id.media_route_menu_item, Menu.NONE, R.string.ccl_media_route_menu_title); // Make the button always visible MenuItemCompat.setShowAsAction(castButton, MenuItemCompat.SHOW_AS_ACTION_ALWAYS); // Set the action provider to MediaRouteActionProvider MenuItemCompat.setActionProvider(castButton, new MediaRouteActionProvider(getActivity())); // Register the MediaRouterButton on the JW Player SDK CastManager.getInstance().addMediaRouterButton(menu, R.id.media_route_menu_item); return true; } The Cast button will now appear when your device is on the same wifi network as a Chromecast device. !!!warning Note: Since the ActionBar is usually hidden when in fullscreen mode, you may want to include the MediaRouteButton in your Activity's layout instead to allow users to begin casting when in fullscreen. !!! Adding a MediaRouteButton to your ViewGroup As mentioned in the above note, in some cases, you may want to add your MediaRouteButton to a ViewGroup rather than an ActionBar . Add to ViewGroup via XML Add the code below to your xml layout android.support.v7.app.MediaRouteButton android:id= @+id/chromecast_btn android:layout_width= 50dp android:layout_height= 50dp / Then add this to your Activity MediaRouteButton chromecastBtn = (MediaRouteButton) findViewById(R.id.chromecast_btn); CastManager.getInstance().addMediaRouterButton(chromecastBtn); Add to ViewGroup Programmatically Once you assign an id to your ViewGroup you can easily add the MediaRouteButton to your layout as shown below ViewGroup container = (ViewGroup) findViewById(R.id.player_container); MediaRouteButton chromecastBtn = new MediaRouteButton(this); container.addView(chromecastBtn); CastManager.getInstance().addMediaRouterButton(chromecastBtn); Ready to start casting At this point your application is ready to start casting. Just make sure you are on the same WiFi network as your Chromecast device. Prerequisites The JW Player SDK supports casting to the Default Media Receiver and to Styled Media Receivers. Custom Receivers are not yet officially supported, but may work if the video playback implements the same interface used in the Default Media Receiver. To specify a receiver, specify a Media Receiver Application ID when initializing the CastManager.","title":"Getting started"},{"location":"chromecast/getting-started/#chromecast","text":"","title":"Chromecast"},{"location":"chromecast/getting-started/#overview","text":"Enabling Chromecast functionality for your Android application using the JW Player SDK is simple. There are 6 steps to complete: (Not required for Maven users) Include Google's CastCompanionLibrary in your project. Initialize JW Player's CastManager at the Application level Create an activity that is a descendant of FragmentActivity from the android.support.v4 support library Add a JWPlayerFragment or a JWPlayerView to your Activity Add a MediaRouteButton to the ActionBar or to your Activity's layout Connect your device to the same WiFi network as your Chromecast Now you can cast compatible media formats that are currently playing in your application to the big screen!","title":"Overview"},{"location":"chromecast/getting-started/#including-googles-castcompanionlibrary-not-required-if-your-app-uses-mvnjwplayercom-to-add-the-jw-player-sdk-dependencies","text":"Since JW Player's SDK was built using version #cast_companion_version# of Google's CastCompanionLibrary In your app's build.gradle, add the library from jCenter repo by adding the following line to your project's dependencies: dependencies { ... compile 'com.google.android.libraries.cast.companionlibrary:ccl:#cast_companion_version#' }","title":"Including Google's CastCompanionLibrary (not required if your app uses mvn.jwplayer.com to add the JW Player SDK dependencies)"},{"location":"chromecast/getting-started/#initializing-the-castmanager","text":"Connecting to Chromecast devices is managed by the CastManager class. The CastManager is a singleton class that must be initialized in the onCreate() method of the application.","title":"Initializing the CastManager"},{"location":"chromecast/getting-started/#initialization","text":"Create a new class that extends from Android's Application class, and override the onCreate() method as shown below public class MyApplication extends Application { @Override public void onCreate() { super.onCreate(); /* * We need to initialize singletons in the global application object to prevent issues * with garbage collection. */ CastManager.initialize(this); // You can now get a reference to the singleton by calling CastManager.getInstance(); } } After you creating your MyApplication class, you should modify the AndroidManifest.xml and set the fully qualified name within the application tag. application android:icon= @drawable/ic_launcher android:label= @string/app_name android:theme= @style/Theme.AppCompat android:name= com.longtailvideo.jwplayer.example.MyApplication ... /application","title":"Initialization"},{"location":"chromecast/getting-started/#configuring-your-activity","text":"To enable casting, the activity in which JW Player exists must be a descendant of FragmentActivity of the android.support.v4 support library. In our example we will be using AppCompatActivity from the android.support.v7 support library, which satisfies the criteria. public class ChromecastActivity extends AppCompatActivity { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_chromecast); } } You now have two options","title":"Configuring your Activity"},{"location":"chromecast/getting-started/#option-a-use-jwplayerfragment","text":"The fastest way to get Chromecast up and running is by using the JWPlayerFragment or JWPlayerSupportFragment . The JWPlayerFragment will take care of adding the MediaRouteButton to your action bar which allows users to begin casting. As a refresher, here's how to add a JWPlayerFragment to your Activity. As soon as you completed the above steps and added the JWPlayerFragment to your Activity's layout you should now be ready to start Casting, just make sure you are on the same network as your casting device and the Cast button will appear on your ActionBar .","title":"Option A: Use JWPlayerFragment"},{"location":"chromecast/getting-started/#option-b-use-jwplayerview","text":"Using JWPlayerView allows more granular control over the player and the MediaRouteButton As a refresher, here's how to add a JWPlayerView to your Activity. As soon as you completed the above steps and added the JWPlayerView to your activity you should now be ready to add your MediaRouteButton .","title":"Option B: Use JWPlayerView"},{"location":"chromecast/getting-started/#adding-the-mediaroutebutton","text":"The MediaRouteButton allows users to select which device they'd like to start casting to. During the cast session it provides a customizable dialog that allows users to play, pause or cease casting at any time. Below we'll describe two ways of adding the MediaRouteButton to you application, either to the ActionBar or to your Activity's layout.","title":"Adding the MediaRouteButton"},{"location":"chromecast/getting-started/#adding-a-mediaroutebutton-to-the-actionbar","text":"You will only have to add the MediaRouteButton to your ActionBar when using the JWPlayerView as this is the default location of the MediaRouteButton when using the JWPlayerFragment . There are two ways to add the MediaRouteButton to your ActionBar","title":"Adding a MediaRouteButton to the ActionBar"},{"location":"chromecast/getting-started/#add-to-actionbar-via-xml","text":"Add the following item to your Activity's menu_main.xml : item android:id= @+id/media_route_menu_item android:title= @string/media_route_menu_title app:actionProviderClass= android.support.v7.app.MediaRouteActionProvider app:showAsAction= always / In your Activity override onCreateOptionsMenu() : @Override public boolean onCreateOptionsMenu(Menu menu) { super.onCreateOptionsMenu(menu); // Inflate the menu getMenuInflater().inflate(R.menu.menu_main, menu); // Register the MediaRouterButton on the JWPlayer SDK CastManager.getInstance().addMediaRouterButton(menu, R.id.media_route_menu_item); return true; }","title":"Add to ActionBar via XML"},{"location":"chromecast/getting-started/#add-to-actionbar-programmatically","text":"It is also possible to add the MediaRouteButton to your ActionBar programmatically. In your Activity override onCreateOptionsMenu() as shown below @Override public boolean onCreateOptionsMenu(Menu menu) { super.onCreateOptionsMenu(menu); // Create the button MenuItem castButton = menu.add(Menu.NONE, R.id.media_route_menu_item, Menu.NONE, R.string.ccl_media_route_menu_title); // Make the button always visible MenuItemCompat.setShowAsAction(castButton, MenuItemCompat.SHOW_AS_ACTION_ALWAYS); // Set the action provider to MediaRouteActionProvider MenuItemCompat.setActionProvider(castButton, new MediaRouteActionProvider(getActivity())); // Register the MediaRouterButton on the JW Player SDK CastManager.getInstance().addMediaRouterButton(menu, R.id.media_route_menu_item); return true; } The Cast button will now appear when your device is on the same wifi network as a Chromecast device. !!!warning Note: Since the ActionBar is usually hidden when in fullscreen mode, you may want to include the MediaRouteButton in your Activity's layout instead to allow users to begin casting when in fullscreen. !!!","title":"Add to ActionBar Programmatically"},{"location":"chromecast/getting-started/#adding-a-mediaroutebutton-to-your-viewgroup","text":"As mentioned in the above note, in some cases, you may want to add your MediaRouteButton to a ViewGroup rather than an ActionBar .","title":"Adding a MediaRouteButton to your ViewGroup"},{"location":"chromecast/getting-started/#add-to-viewgroup-via-xml","text":"Add the code below to your xml layout android.support.v7.app.MediaRouteButton android:id= @+id/chromecast_btn android:layout_width= 50dp android:layout_height= 50dp / Then add this to your Activity MediaRouteButton chromecastBtn = (MediaRouteButton) findViewById(R.id.chromecast_btn); CastManager.getInstance().addMediaRouterButton(chromecastBtn);","title":"Add to ViewGroup via XML"},{"location":"chromecast/getting-started/#add-to-viewgroup-programmatically","text":"Once you assign an id to your ViewGroup you can easily add the MediaRouteButton to your layout as shown below ViewGroup container = (ViewGroup) findViewById(R.id.player_container); MediaRouteButton chromecastBtn = new MediaRouteButton(this); container.addView(chromecastBtn); CastManager.getInstance().addMediaRouterButton(chromecastBtn);","title":"Add to ViewGroup Programmatically"},{"location":"chromecast/getting-started/#ready-to-start-casting","text":"At this point your application is ready to start casting. Just make sure you are on the same WiFi network as your Chromecast device.","title":"Ready to start casting"},{"location":"chromecast/getting-started/#prerequisites","text":"The JW Player SDK supports casting to the Default Media Receiver and to Styled Media Receivers. Custom Receivers are not yet officially supported, but may work if the video playback implements the same interface used in the Default Media Receiver. To specify a receiver, specify a Media Receiver Application ID when initializing the CastManager.","title":"Prerequisites"},{"location":"chromecast/known-issues/","text":"Known Issues Current Limitations Chromecast support was added in version 2.1 of the JW Player SDK for Android. At this moment the Chromecast support is still in beta and the API for Chromecast will be subject to changes in the future. Our implementation of Google Casting is at the player level (for convenience), not at the application-level recommended by Google's Casting UI/UX guidelines . For more involved casting requirements, we recommend implementing Google's Cast SDK directly at the application-level instead. Advertisements are not supported when Casting. Multiple AudioTracks or AudioTrack switching is not supported when casting. Multiple players won't play well with Casting, at this moment we advise you not to use multiple players when casting. Only WebVTT captions are supported, support for other formats will be added in the future. At this moment the JW Player SDK does not support Casting control through a built in notification, if you really want this you should be able to implement it yourself though, as long as you manage to keep a reference to the JWPlayerView . Currently we do not support casting of live streams. Chromecast does currently not support DRM. Chromecast requires that CORS has been configured for resources - headers must be present on playlists, segments and text tracks. Currently we are using the Default Media Receiver for playback on the Cast device and therefore can only support playback of certain media formats. If you are already using a different version of Cast Companion library in your application you will need to add -dontwarn com.longtailvideo.jwplayer.cast.* to your ProGuard configuration.","title":"Known issues"},{"location":"chromecast/known-issues/#known-issues","text":"","title":"Known Issues"},{"location":"chromecast/known-issues/#current-limitations","text":"Chromecast support was added in version 2.1 of the JW Player SDK for Android. At this moment the Chromecast support is still in beta and the API for Chromecast will be subject to changes in the future. Our implementation of Google Casting is at the player level (for convenience), not at the application-level recommended by Google's Casting UI/UX guidelines . For more involved casting requirements, we recommend implementing Google's Cast SDK directly at the application-level instead. Advertisements are not supported when Casting. Multiple AudioTracks or AudioTrack switching is not supported when casting. Multiple players won't play well with Casting, at this moment we advise you not to use multiple players when casting. Only WebVTT captions are supported, support for other formats will be added in the future. At this moment the JW Player SDK does not support Casting control through a built in notification, if you really want this you should be able to implement it yourself though, as long as you manage to keep a reference to the JWPlayerView . Currently we do not support casting of live streams. Chromecast does currently not support DRM. Chromecast requires that CORS has been configured for resources - headers must be present on playlists, segments and text tracks. Currently we are using the Default Media Receiver for playback on the Cast device and therefore can only support playback of certain media formats. If you are already using a different version of Cast Companion library in your application you will need to add -dontwarn com.longtailvideo.jwplayer.cast.* to your ProGuard configuration.","title":"Current Limitations"},{"location":"chromecast/supported-media/","text":"Supported Media Since we are currently using Google's Default Media Receiver, we do not support all media formats when casting. You can find the supported media formats of the Default Media Receiver here .","title":"Supported Media"},{"location":"chromecast/supported-media/#supported-media","text":"Since we are currently using Google's Default Media Receiver, we do not support all media formats when casting. You can find the supported media formats of the Default Media Receiver here .","title":"Supported Media"},{"location":"customization/css-skins/","text":"Skinning Overview JW Player skins change the appearance of the player, adding a customizable interactive layer to your player. All visual components of the player (the controlbar, display, tooltip, dock and playlist) can be skinned in accordance to our Skin Reference page. Additional details can be found in our Creating a Skin guide. In order to use a custom skin you must set the skin name and URL during configuration of the player. SkinConfig skinConfig = new SkinConfig.Builder() .name( skinName ) .url( http://mysite.com/skins/myskin.css ) .build(); PlayerConfig playerConfig = new PlayerConfig.Builder(this) .file( http://mysite.com/videos/myVideo.mp4 ) .skinConfig(skinConfig) .build(); You could also configure the the skin in the XML layout of your JWPlayerView by adding the attributes jw_skin_url jw_skin_name jw_skin_controlbar_text jw_skin_controlbar_icons jw_skin_controlbar_iconsActive jw_skin_controlbar_background jw_skin_timeslider_progress jw_skin_timeslider_rail jw_skin_menus_text jw_skin_menus_textActive jw_skin_menus_background jw_skin_tooltips_text jw_skin_tooltips_background","title":"CSS Skins"},{"location":"customization/css-skins/#skinning-overview","text":"JW Player skins change the appearance of the player, adding a customizable interactive layer to your player. All visual components of the player (the controlbar, display, tooltip, dock and playlist) can be skinned in accordance to our Skin Reference page. Additional details can be found in our Creating a Skin guide. In order to use a custom skin you must set the skin name and URL during configuration of the player. SkinConfig skinConfig = new SkinConfig.Builder() .name( skinName ) .url( http://mysite.com/skins/myskin.css ) .build(); PlayerConfig playerConfig = new PlayerConfig.Builder(this) .file( http://mysite.com/videos/myVideo.mp4 ) .skinConfig(skinConfig) .build(); You could also configure the the skin in the XML layout of your JWPlayerView by adding the attributes jw_skin_url jw_skin_name jw_skin_controlbar_text jw_skin_controlbar_icons jw_skin_controlbar_iconsActive jw_skin_controlbar_background jw_skin_timeslider_progress jw_skin_timeslider_rail jw_skin_menus_text jw_skin_menus_textActive jw_skin_menus_background jw_skin_tooltips_text jw_skin_tooltips_background","title":"Skinning Overview"},{"location":"customization/localization/","text":"Localization Overview The JW Player SDK for Android supports localizing error strings and setting the language in the IMA SDK. Localized Error Messages The following default error messages can be overridden by defining string resources in your application's strings.xml file. String ID Description jw_error_unrecognized_input_format_exception Displayed when the content URL doesn't point to video, or is being redirected to a WiFi portal or proxy. jw_error_decoder_initialization_exception Displayed when the device does not have a hardware decoder that can decode the video content. jw_error_io_exception Displayed when any IO exception occurs - e.g. interrupted stream, failed to read local file. jw_error_illegal_argument_exception Displayed when an illegal argument is passed to ExoPlayer. jw_error_invalid_response_code_exception Displayed when an HTTP request recieves an unsupported response code - e.g. 500, 404. jw_error_http_data_source_exception Displayed when ExoPlayer fails to fetch a segment of content - e.g. attempting to buffer while offline. jw_error_cast_media_format_unsupported Displayed when casting is attempted with an unsupported media type. jw_error_cast_loading_failed Displayed when loading fails during casting. jw_error_cast_loading_failed_with_status_code Displayed when loading failed during casting and a status code is available. jw_error_cast_loading_failed_no_connection Displayed when connecting to Chromecast fails ImaSdkSettings To localize the language used during IMA ads: ImaSdkSettings imaSdkSettings = new ImaSdkSettings(); // Use the 2-letter ISO 639-1 language code for your desired language imaSdkSettings.setLanguage( NL ); ImaAdvertising imaAdvertising = new ImaAdvertising(schedule, imaSdkSettings); playerConfig.setAdvertising(imaAdvertising);","title":"Localization"},{"location":"customization/localization/#localization-overview","text":"The JW Player SDK for Android supports localizing error strings and setting the language in the IMA SDK.","title":"Localization Overview"},{"location":"customization/localization/#localized-error-messages","text":"The following default error messages can be overridden by defining string resources in your application's strings.xml file. String ID Description jw_error_unrecognized_input_format_exception Displayed when the content URL doesn't point to video, or is being redirected to a WiFi portal or proxy. jw_error_decoder_initialization_exception Displayed when the device does not have a hardware decoder that can decode the video content. jw_error_io_exception Displayed when any IO exception occurs - e.g. interrupted stream, failed to read local file. jw_error_illegal_argument_exception Displayed when an illegal argument is passed to ExoPlayer. jw_error_invalid_response_code_exception Displayed when an HTTP request recieves an unsupported response code - e.g. 500, 404. jw_error_http_data_source_exception Displayed when ExoPlayer fails to fetch a segment of content - e.g. attempting to buffer while offline. jw_error_cast_media_format_unsupported Displayed when casting is attempted with an unsupported media type. jw_error_cast_loading_failed Displayed when loading fails during casting. jw_error_cast_loading_failed_with_status_code Displayed when loading failed during casting and a status code is available. jw_error_cast_loading_failed_no_connection Displayed when connecting to Chromecast fails","title":"Localized Error Messages"},{"location":"customization/localization/#imasdksettings","text":"To localize the language used during IMA ads: ImaSdkSettings imaSdkSettings = new ImaSdkSettings(); // Use the 2-letter ISO 639-1 language code for your desired language imaSdkSettings.setLanguage( NL ); ImaAdvertising imaAdvertising = new ImaAdvertising(schedule, imaSdkSettings); playerConfig.setAdvertising(imaAdvertising);","title":"ImaSdkSettings"},{"location":"customization/xml-options-and-playerconfig/","text":"XML Attributes The JWPlayerView supports the following (optional) custom XML attributes: Attribute Description jw_file URL to a single video file, audio file or live stream to play jw_image URL to a poster image to display before playback starts. For audio-only media, the poster image stays visible during playback. jw_mute Whether the player should be muted initially. jw_autostart Automatically start playing the video can be false or true jw_repeat Whether to loop playback of the playlist or not. Can be true (keep playing forever) or false (stop playback when completed). Defaults to false. jw_controls Whether to display the video controls, can be false or true jw_display_title Configures if the title of a media file should be displayed. jw_display_description Configures if the description title of a media file should be displayed. jw_stretching Resize images and video to fit player dimensions. Must be: \"uniform\", \"exactfit\", \"fill\", or \"none\" jw_nextUpDisplay Configures whether the Next Up modal is displayed. jw_preload Tells the player if content should be loaded prior to playback. Useful for faster playback speed. jw_captions_color Sets the caption color (hex code) jw_captions_fontSize Sets the font size of the captions jw_captions_fontFamily Sets the font family of the captions jw_captions_fontOpacity Sets the opacity of the font of the captions jw_captions_backgroundColor Sets the background color of the captions jw_captions_backgroundOpacity Sets the background opacity of the captions jw_captions_edgeStyle Sets the edge style of the captions jw_captions_windowColor Sets the window color of the captions jw_captions_windowOpacity Sets the window opacity of the captions jw_logo_file Location of an external JPG, PNG or GIF image to be used as watermark. We recommend using 24 bit PNG images with transparency, since they blend nicely with the video. jw_logo_hide By default (false), the logo remains visible all the time. When this option is set to true, the logo will automatically show and hide along with the other player controls. jw_logo_link HTTP URL to jump to when the watermark image is clicked (e.g. http://example.com/). If it is not set, a click on the watermark does nothing in particular. jw_logo_margin The distance of the logo from the edges of the display. The default is 8 pixels. jw_logo_position This sets the corner in which to display the watermark. Can be \"top-left\" (default), \"top-right\", \"bottom-left\", \"bottom-right\", or \"control-bar\". Note the default position is preferred, since the logo won't interfere with the controlbar, captions, overlay ads and dock buttons. jw_skin_name The skin to use for styling the player. If not configured, we'll default our player to use the seven skin. jw_skin_url If using an external CSS file to style your player, this can be specified here. Note that with this configuration: * You will still need to specify the name of your skin. * This may negatively impact the speed which your JW Player loads jw_skin_controlbar_text The color of any plain text in the control bar, such as the time. jw_skin_controlbar_icons The default, inactive color of all icons in the control bar. This option also controls the color of the play, pause, and replay icons in the inactive and complete states. jw_skin_controlbar_iconsActive The color of hovered or selected icons in the control bar. jw_skin_controlbar_background The background color of the control bar and the volume slider. The default background is transparent. jw_skin_timeslider_progress The color of the bar in the time slider filled in from the beginning of the video through the current position. The buffer region of the control bar is 50% of the opacity of this color. The color of the volume slider is also controlled by this option. jw_skin_timeslider_rail The color of the base of the timeslider, known as the rail. jw_skin_menus_text The color of inactive, default text in menus and the Next Up overlay. jw_skin_menus_textActive The color of hovered or selected text in menus. This option also controls the text color in the Discover overlay and the hover state text color in the Next Up overlay. jw_skin_menus_background The background color of menus and the Next Up overlay. jw_skin_tooltips_text The text color of tooltips. jw_skin_tooltips_background The background color of tooltips. jw_related_file Location of an RSS or JSON file containing a feed of related videos. jw_related_displayMode Configure the recommendations user interface. Does not apply to manual playlists. Must be: \"overlay\", or \"shelf\" jw_related_onComplete The behavior of our related videos overlay when a single video or playlist is completed. Must be: \"hide\", \"show\", or \"autoplay\" jw_related_onClick \"The behavior when a related video is selected. Must be: \"play\", or \"link\" jw_related_autoplayMessage A custom message that appears during autoplay. xx will be replaced by the countdown timer. title will be replaced by the next title in the related feed. jw_related_autoplayTimer The number of seconds to wait before playing the next related video in your content list. Set to 0 to have your next related content to play immediately. jw_sharing_link URL to display in the video link field. jw_sharing_code Embed code to display in the embed code field. If no code is set, the field is not shown. jw_sharing_heading Short, instructive text to display at the top of the sharing screen. PlayerConfig Besides adding the JWPlayerView to your layout it is also possible to programmatically instantiate a JWPlayerView Programmatically instantiating requires that you build a player config first: PlayerConfig playerConfig = new PlayerConfig.Builder() .logoConfig(new LogoConfig.Builder() .file( jw_logo.png ) .link( http://jwplayer.com ) .build()) .autostart(false) .repeat(false) .build(); After instantiating the playerConfig it's possible to construct the JWPlayerView JWPlayerView playerView = new JWPlayerView(context, playerConfig); Now you have a handle to the playerView you can attach it to a ViewGroup, i.e. a FrameLayout: ViewGroup jwPlayerViewContainer = (ViewGroup) findViewById(R.id.jwPlayerContainer); jwPlayerViewContainer.addView(p);","title":"XML Options and PlayerConfig"},{"location":"customization/xml-options-and-playerconfig/#xml-attributes","text":"The JWPlayerView supports the following (optional) custom XML attributes: Attribute Description jw_file URL to a single video file, audio file or live stream to play jw_image URL to a poster image to display before playback starts. For audio-only media, the poster image stays visible during playback. jw_mute Whether the player should be muted initially. jw_autostart Automatically start playing the video can be false or true jw_repeat Whether to loop playback of the playlist or not. Can be true (keep playing forever) or false (stop playback when completed). Defaults to false. jw_controls Whether to display the video controls, can be false or true jw_display_title Configures if the title of a media file should be displayed. jw_display_description Configures if the description title of a media file should be displayed. jw_stretching Resize images and video to fit player dimensions. Must be: \"uniform\", \"exactfit\", \"fill\", or \"none\" jw_nextUpDisplay Configures whether the Next Up modal is displayed. jw_preload Tells the player if content should be loaded prior to playback. Useful for faster playback speed. jw_captions_color Sets the caption color (hex code) jw_captions_fontSize Sets the font size of the captions jw_captions_fontFamily Sets the font family of the captions jw_captions_fontOpacity Sets the opacity of the font of the captions jw_captions_backgroundColor Sets the background color of the captions jw_captions_backgroundOpacity Sets the background opacity of the captions jw_captions_edgeStyle Sets the edge style of the captions jw_captions_windowColor Sets the window color of the captions jw_captions_windowOpacity Sets the window opacity of the captions jw_logo_file Location of an external JPG, PNG or GIF image to be used as watermark. We recommend using 24 bit PNG images with transparency, since they blend nicely with the video. jw_logo_hide By default (false), the logo remains visible all the time. When this option is set to true, the logo will automatically show and hide along with the other player controls. jw_logo_link HTTP URL to jump to when the watermark image is clicked (e.g. http://example.com/). If it is not set, a click on the watermark does nothing in particular. jw_logo_margin The distance of the logo from the edges of the display. The default is 8 pixels. jw_logo_position This sets the corner in which to display the watermark. Can be \"top-left\" (default), \"top-right\", \"bottom-left\", \"bottom-right\", or \"control-bar\". Note the default position is preferred, since the logo won't interfere with the controlbar, captions, overlay ads and dock buttons. jw_skin_name The skin to use for styling the player. If not configured, we'll default our player to use the seven skin. jw_skin_url If using an external CSS file to style your player, this can be specified here. Note that with this configuration: * You will still need to specify the name of your skin. * This may negatively impact the speed which your JW Player loads jw_skin_controlbar_text The color of any plain text in the control bar, such as the time. jw_skin_controlbar_icons The default, inactive color of all icons in the control bar. This option also controls the color of the play, pause, and replay icons in the inactive and complete states. jw_skin_controlbar_iconsActive The color of hovered or selected icons in the control bar. jw_skin_controlbar_background The background color of the control bar and the volume slider. The default background is transparent. jw_skin_timeslider_progress The color of the bar in the time slider filled in from the beginning of the video through the current position. The buffer region of the control bar is 50% of the opacity of this color. The color of the volume slider is also controlled by this option. jw_skin_timeslider_rail The color of the base of the timeslider, known as the rail. jw_skin_menus_text The color of inactive, default text in menus and the Next Up overlay. jw_skin_menus_textActive The color of hovered or selected text in menus. This option also controls the text color in the Discover overlay and the hover state text color in the Next Up overlay. jw_skin_menus_background The background color of menus and the Next Up overlay. jw_skin_tooltips_text The text color of tooltips. jw_skin_tooltips_background The background color of tooltips. jw_related_file Location of an RSS or JSON file containing a feed of related videos. jw_related_displayMode Configure the recommendations user interface. Does not apply to manual playlists. Must be: \"overlay\", or \"shelf\" jw_related_onComplete The behavior of our related videos overlay when a single video or playlist is completed. Must be: \"hide\", \"show\", or \"autoplay\" jw_related_onClick \"The behavior when a related video is selected. Must be: \"play\", or \"link\" jw_related_autoplayMessage A custom message that appears during autoplay. xx will be replaced by the countdown timer. title will be replaced by the next title in the related feed. jw_related_autoplayTimer The number of seconds to wait before playing the next related video in your content list. Set to 0 to have your next related content to play immediately. jw_sharing_link URL to display in the video link field. jw_sharing_code Embed code to display in the embed code field. If no code is set, the field is not shown. jw_sharing_heading Short, instructive text to display at the top of the sharing screen.","title":"XML Attributes"},{"location":"customization/xml-options-and-playerconfig/#playerconfig","text":"Besides adding the JWPlayerView to your layout it is also possible to programmatically instantiate a JWPlayerView Programmatically instantiating requires that you build a player config first: PlayerConfig playerConfig = new PlayerConfig.Builder() .logoConfig(new LogoConfig.Builder() .file( jw_logo.png ) .link( http://jwplayer.com ) .build()) .autostart(false) .repeat(false) .build(); After instantiating the playerConfig it's possible to construct the JWPlayerView JWPlayerView playerView = new JWPlayerView(context, playerConfig); Now you have a handle to the playerView you can attach it to a ViewGroup, i.e. a FrameLayout: ViewGroup jwPlayerViewContainer = (ViewGroup) findViewById(R.id.jwPlayerContainer); jwPlayerViewContainer.addView(p);","title":"PlayerConfig"},{"location":"drm/custom-http-headers/","text":"Custom HTTP Headers The JW Player SDK for Android supports passing through custom HTTP headers along with the requests for manifests and media. In order to configure a stream to use custom HTTP headers follow the example below. // Create a list to contain the PlaylistItems List PlaylistItem playlist = new ArrayList (); // Example 1: Create key-value map for the HTTP headers Map String, String httpHeaders = new HashMap (); httpHeaders.put( cookie , abcd1234 ); // Example 1: Add a PlaylistItem pointing to the first piece of content PlaylistItem content = new PlaylistItem.Builder() .file( http://content/http-header-protected-content.m3u8 ) .httpHeaders(httpHeaders) .build(); // Example 1: Add the content to the playlist playlist.add(content); // Example 2: Create key-value map for the HTTP headers for individual sources Map String, String httpHeadersSD = new HashMap (); httpHeaders.put( cookie , XYZ123 ); Map String, String httpHeadersHD = new HashMap (); httpHeaders.put( cookie , QWERTY999 ); // Example 2: Create individual MediaSources MediaSource mediaSD = new MediaSource.Builder() .file( http://content/http-header-protected-sd.mp4 ) .httpHeaders(httpHeadersSD) .build(); MediaSource mediaHD = new MediaSource.Builder() .file( http://content/http-header-protected-hd.mp4 ) .httpHeaders(httpHeadersHD) .build(); List MediaSource mediasources = new ArrayList (); mediasources.add(mediaSD); mediasources.add(mediaHD); // Example 2: Add another PlaylistItem pointing to the second piece of content // This one will use multiple sources playlist.add(new PlaylistItem.Builder() .sources(mediasources) .image( http://content/tv-show-poster-image.jpg ) .description( A good TV show (SD HD) ) .build()); // Load the playlist into the player player.load(playlist);","title":"Custom HTTP headers"},{"location":"drm/custom-http-headers/#custom-http-headers","text":"The JW Player SDK for Android supports passing through custom HTTP headers along with the requests for manifests and media. In order to configure a stream to use custom HTTP headers follow the example below. // Create a list to contain the PlaylistItems List PlaylistItem playlist = new ArrayList (); // Example 1: Create key-value map for the HTTP headers Map String, String httpHeaders = new HashMap (); httpHeaders.put( cookie , abcd1234 ); // Example 1: Add a PlaylistItem pointing to the first piece of content PlaylistItem content = new PlaylistItem.Builder() .file( http://content/http-header-protected-content.m3u8 ) .httpHeaders(httpHeaders) .build(); // Example 1: Add the content to the playlist playlist.add(content); // Example 2: Create key-value map for the HTTP headers for individual sources Map String, String httpHeadersSD = new HashMap (); httpHeaders.put( cookie , XYZ123 ); Map String, String httpHeadersHD = new HashMap (); httpHeaders.put( cookie , QWERTY999 ); // Example 2: Create individual MediaSources MediaSource mediaSD = new MediaSource.Builder() .file( http://content/http-header-protected-sd.mp4 ) .httpHeaders(httpHeadersSD) .build(); MediaSource mediaHD = new MediaSource.Builder() .file( http://content/http-header-protected-hd.mp4 ) .httpHeaders(httpHeadersHD) .build(); List MediaSource mediasources = new ArrayList (); mediasources.add(mediaSD); mediasources.add(mediaHD); // Example 2: Add another PlaylistItem pointing to the second piece of content // This one will use multiple sources playlist.add(new PlaylistItem.Builder() .sources(mediasources) .image( http://content/tv-show-poster-image.jpg ) .description( A good TV show (SD HD) ) .build()); // Load the playlist into the player player.load(playlist);","title":"Custom HTTP Headers"},{"location":"drm/drm-protected-playback/","text":"Digital Rights Management On Android 4.3 and higher the JW Player SDK for Android supports Digital Rights Management (DRM) protected playback. The JW Player SDK for Android supports any DRM scheme for which a modular DRM component exists on the device. All Android devices are required to support Widevine modular DRM (with L3 security, although many devices also support L1). Some devices may support additional schemes such as PlayReady. Playing DRM protected content In order to play DRM protected content you are required to attach a MediaDrmCallback to a PlaylistItem . The MediaDrmCallback is responsible for making provisioning and key requests. You should implement this interface to make network requests to your DRM license server in order to obtain the required keys. Example MediaDrmCallback implementation: @TargetApi(18) public class WidevineMediaDrmCallback implements MediaDrmCallback { private static final String WIDEVINE_LICENSE_SERVER_BASE_URI = https://URL-TO-YOUR-LICENSE-SERVER ; private final String defaultUri; public WidevineMediaDrmCallback(String contentId, String provider) { String params = ?video_id= + contentId + provider= + provider; defaultUri = WIDEVINE_LICENSE_SERVER_BASE_URI + params; } @Override public byte[] executeProvisionRequest(UUID uuid, ProvisionRequest request) throws IOException { String url = request.getDefaultUrl() + signedRequest= + new String(request.getData()); return executePost(url, null, null); } @Override public byte[] executeKeyRequest(UUID uuid, KeyRequest request) throws IOException { String url = request.getDefaultUrl(); if (TextUtils.isEmpty(url)) { url = defaultUri; } return executePost(url, request.getData(), null); } /** * Executes a post request using {@link HttpURLConnection}. * * @param url The request URL. * @param data The request body, or null. * @param requestProperties Request properties, or null. * @return The response body. * @throws IOException If an error occurred making the request. */ public static byte[] executePost(String url, byte[] data, Map String, String requestProperties) throws IOException { HttpURLConnection urlConnection = null; try { urlConnection = (HttpURLConnection) new URL(url).openConnection(); urlConnection.setRequestMethod( POST ); urlConnection.setDoOutput(data != null); urlConnection.setDoInput(true); if (requestProperties != null) { for (Map.Entry String, String requestProperty : requestProperties.entrySet()) { urlConnection.setRequestProperty(requestProperty.getKey(), requestProperty.getValue()); } } // Write the request body, if there is one. if (data != null) { OutputStream out = urlConnection.getOutputStream(); try { out.write(data); } finally { out.close(); } } // Read and return the response body. InputStream inputStream = urlConnection.getInputStream(); try { return toByteArray(inputStream); } finally { inputStream.close(); } } finally { if (urlConnection != null) { urlConnection.disconnect(); } } } Considerations Please note that not all Android devices may have secure decoders for every video codec. You can use Android's MediaCodecList class to find out if secure playback for a particular codec is supported on a device.","title":"Playing secure content"},{"location":"drm/drm-protected-playback/#digital-rights-management","text":"On Android 4.3 and higher the JW Player SDK for Android supports Digital Rights Management (DRM) protected playback. The JW Player SDK for Android supports any DRM scheme for which a modular DRM component exists on the device. All Android devices are required to support Widevine modular DRM (with L3 security, although many devices also support L1). Some devices may support additional schemes such as PlayReady.","title":"Digital Rights Management"},{"location":"drm/drm-protected-playback/#playing-drm-protected-content","text":"In order to play DRM protected content you are required to attach a MediaDrmCallback to a PlaylistItem . The MediaDrmCallback is responsible for making provisioning and key requests. You should implement this interface to make network requests to your DRM license server in order to obtain the required keys. Example MediaDrmCallback implementation: @TargetApi(18) public class WidevineMediaDrmCallback implements MediaDrmCallback { private static final String WIDEVINE_LICENSE_SERVER_BASE_URI = https://URL-TO-YOUR-LICENSE-SERVER ; private final String defaultUri; public WidevineMediaDrmCallback(String contentId, String provider) { String params = ?video_id= + contentId + provider= + provider; defaultUri = WIDEVINE_LICENSE_SERVER_BASE_URI + params; } @Override public byte[] executeProvisionRequest(UUID uuid, ProvisionRequest request) throws IOException { String url = request.getDefaultUrl() + signedRequest= + new String(request.getData()); return executePost(url, null, null); } @Override public byte[] executeKeyRequest(UUID uuid, KeyRequest request) throws IOException { String url = request.getDefaultUrl(); if (TextUtils.isEmpty(url)) { url = defaultUri; } return executePost(url, request.getData(), null); } /** * Executes a post request using {@link HttpURLConnection}. * * @param url The request URL. * @param data The request body, or null. * @param requestProperties Request properties, or null. * @return The response body. * @throws IOException If an error occurred making the request. */ public static byte[] executePost(String url, byte[] data, Map String, String requestProperties) throws IOException { HttpURLConnection urlConnection = null; try { urlConnection = (HttpURLConnection) new URL(url).openConnection(); urlConnection.setRequestMethod( POST ); urlConnection.setDoOutput(data != null); urlConnection.setDoInput(true); if (requestProperties != null) { for (Map.Entry String, String requestProperty : requestProperties.entrySet()) { urlConnection.setRequestProperty(requestProperty.getKey(), requestProperty.getValue()); } } // Write the request body, if there is one. if (data != null) { OutputStream out = urlConnection.getOutputStream(); try { out.write(data); } finally { out.close(); } } // Read and return the response body. InputStream inputStream = urlConnection.getInputStream(); try { return toByteArray(inputStream); } finally { inputStream.close(); } } finally { if (urlConnection != null) { urlConnection.disconnect(); } } }","title":"Playing DRM protected content"},{"location":"drm/drm-protected-playback/#considerations","text":"Please note that not all Android devices may have secure decoders for every video codec. You can use Android's MediaCodecList class to find out if secure playback for a particular codec is supported on a device.","title":"Considerations"},{"location":"getting-started/configure-proguard/","text":"Configure ProGuard Last updated: January 8, 2019 !!! If you used the Gradle or Demo approach to import the JW Player SDK for Android or the JW Player SDK for Android Open Source Demo, JW Player's consumer-proguard.pro configuration has been applied automatically. You can skip this article and configure your project . !!! If you used the Local approach, no ProGuard configuration has been added. If you choose to obfuscate your code with ProGuard, add the following ProGuard configuration. This suggested ProGuard configuration ensures that the JW Player SDK for Android will work as intended. ProGuard Configuration -keepclassmembers class com.longtailvideo.jwplayer.** { @android.webkit.JavascriptInterface *; } # Block warnings about missing module classes -dontwarn com.longtailvideo.jwplayer.** -dontwarn com.google.ads.interactivemedia.** # Classes get rejected without this when running the app if the app has been run through ProGuard -keepattributes InnerClasses,EnclosingMethod # Keep module indicator classes -keep class com.longtailvideo.jwplayer.modules.** { *; } You can now configure your project . Use this form to provide your feedback. var mff60sc1xnn4cu;(function(d, t) { var s = d.createElement(t), options = { 'userName':'jwplayerdocs', 'formHash':'mff60sc1xnn4cu', 'autoResize':true, 'height':'288', 'async':true, 'host':'wufoo.com', 'header':'show', 'ssl':true, 'defaultValues': 'field118=' + location.pathname}; s.src = ('https:' == d.location.protocol ? 'https://' : 'http://') + 'www.wufoo.com/scripts/embed/form.js'; s.onload = s.onreadystatechange = function() { var rs = this.readyState; if (rs) if (rs != 'complete') if (rs != 'loaded') return; try { mff60sc1xnn4cu = new WufooForm();mff60sc1xnn4cu.initialize(options);mff60sc1xnn4cu.display(); } catch (e) {}}; var scr = d.getElementsByTagName(t)[0], par = scr.parentNode; par.insertBefore(s, scr); })(document, 'script');","title":"Configure ProGuard"},{"location":"getting-started/configure-proguard/#configure-proguard","text":"Last updated: January 8, 2019 !!! If you used the Gradle or Demo approach to import the JW Player SDK for Android or the JW Player SDK for Android Open Source Demo, JW Player's consumer-proguard.pro configuration has been applied automatically. You can skip this article and configure your project . !!! If you used the Local approach, no ProGuard configuration has been added. If you choose to obfuscate your code with ProGuard, add the following ProGuard configuration. This suggested ProGuard configuration ensures that the JW Player SDK for Android will work as intended. ProGuard Configuration -keepclassmembers class com.longtailvideo.jwplayer.** { @android.webkit.JavascriptInterface *; } # Block warnings about missing module classes -dontwarn com.longtailvideo.jwplayer.** -dontwarn com.google.ads.interactivemedia.** # Classes get rejected without this when running the app if the app has been run through ProGuard -keepattributes InnerClasses,EnclosingMethod # Keep module indicator classes -keep class com.longtailvideo.jwplayer.modules.** { *; } You can now configure your project . Use this form to provide your feedback. var mff60sc1xnn4cu;(function(d, t) { var s = d.createElement(t), options = { 'userName':'jwplayerdocs', 'formHash':'mff60sc1xnn4cu', 'autoResize':true, 'height':'288', 'async':true, 'host':'wufoo.com', 'header':'show', 'ssl':true, 'defaultValues': 'field118=' + location.pathname}; s.src = ('https:' == d.location.protocol ? 'https://' : 'http://') + 'www.wufoo.com/scripts/embed/form.js'; s.onload = s.onreadystatechange = function() { var rs = this.readyState; if (rs) if (rs != 'complete') if (rs != 'loaded') return; try { mff60sc1xnn4cu = new WufooForm();mff60sc1xnn4cu.initialize(options);mff60sc1xnn4cu.display(); } catch (e) {}}; var scr = d.getElementsByTagName(t)[0], par = scr.parentNode; par.insertBefore(s, scr); })(document, 'script');","title":"Configure ProGuard"},{"location":"getting-started/configure-project/","text":"Configure project Last updated: January 8, 2019 To complete the SDK import process, you must configure your project. Open the AndroidManifest.xml. In the application element, use a meta-data/ element to add your JW Player license key. If you are using the Demo app, be sure to uncomment the meta-data/ element. In all activity elements that will contain a player, add android:configChanges=\"keyboard|keyboardHidden|orientation|screenSize\" . This prevents the Activity from being destroyed when rotated. If you are using the Demo app, this is already included. (Optional) If your app reads media content from the user's device, add uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\"/ . Request App Permissions explains how requesting permissions works. application ... meta-data android:name= JW_LICENSE_KEY android:value= abcD1234edf56GHiJK789lm0N / activity ... android:configChanges= keyboard|keyboardHidden|orientation|screenSize ... /activity /application You have configured your project. Use this form to provide your feedback. var mff60sc1xnn4cu;(function(d, t) { var s = d.createElement(t), options = { 'userName':'jwplayerdocs', 'formHash':'mff60sc1xnn4cu', 'autoResize':true, 'height':'288', 'async':true, 'host':'wufoo.com', 'header':'show', 'ssl':true, 'defaultValues': 'field118=' + location.pathname}; s.src = ('https:' == d.location.protocol ? 'https://' : 'http://') + 'www.wufoo.com/scripts/embed/form.js'; s.onload = s.onreadystatechange = function() { var rs = this.readyState; if (rs) if (rs != 'complete') if (rs != 'loaded') return; try { mff60sc1xnn4cu = new WufooForm();mff60sc1xnn4cu.initialize(options);mff60sc1xnn4cu.display(); } catch (e) {}}; var scr = d.getElementsByTagName(t)[0], par = scr.parentNode; par.insertBefore(s, scr); })(document, 'script');","title":"Configure project"},{"location":"getting-started/configure-project/#configure-project","text":"Last updated: January 8, 2019 To complete the SDK import process, you must configure your project. Open the AndroidManifest.xml. In the application element, use a meta-data/ element to add your JW Player license key. If you are using the Demo app, be sure to uncomment the meta-data/ element. In all activity elements that will contain a player, add android:configChanges=\"keyboard|keyboardHidden|orientation|screenSize\" . This prevents the Activity from being destroyed when rotated. If you are using the Demo app, this is already included. (Optional) If your app reads media content from the user's device, add uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\"/ . Request App Permissions explains how requesting permissions works. application ... meta-data android:name= JW_LICENSE_KEY android:value= abcD1234edf56GHiJK789lm0N / activity ... android:configChanges= keyboard|keyboardHidden|orientation|screenSize ... /activity /application You have configured your project. Use this form to provide your feedback. var mff60sc1xnn4cu;(function(d, t) { var s = d.createElement(t), options = { 'userName':'jwplayerdocs', 'formHash':'mff60sc1xnn4cu', 'autoResize':true, 'height':'288', 'async':true, 'host':'wufoo.com', 'header':'show', 'ssl':true, 'defaultValues': 'field118=' + location.pathname}; s.src = ('https:' == d.location.protocol ? 'https://' : 'http://') + 'www.wufoo.com/scripts/embed/form.js'; s.onload = s.onreadystatechange = function() { var rs = this.readyState; if (rs) if (rs != 'complete') if (rs != 'loaded') return; try { mff60sc1xnn4cu = new WufooForm();mff60sc1xnn4cu.initialize(options);mff60sc1xnn4cu.display(); } catch (e) {}}; var scr = d.getElementsByTagName(t)[0], par = scr.parentNode; par.insertBefore(s, scr); })(document, 'script');","title":"Configure project"},{"location":"getting-started/download-sdk/","text":"Download SDK Last updated: January 8, 2019 !!!important If you are using JW Player SDK for Android 2.x.x, use this SDK documentation . !!! To add a player to your app, you must import the JW Player SDK for Android and then configure your project. You can choose one of three approaches to complete these tasks. In the following table, several notes about each approach are listed. Read each approach and click the GET STARTED link for the approach that suits your implementation needs. Approach Notes Gradle - No SDK download is required. - Core and optional modules must be added to your app. - ProGuard automatically applied. ProGuard protects the SDK classes. - An existing app is required. - Either the standard SDK repository or SDK with Amazon Fire (Fire OS 5+) support repository can be accessed. GET STARTED Local - JW Player SDK for Android must be downloaded and unzipped. - Core and optional modules must be imported. - ProGuard must be configured. ProGuard protects the SDK classes. - An existing app is required. GET STARTED Demo - JW Player SDK for Android Open Source Demo must be downloaded. - All modules are included. No modules need to be imported or set as dependencies. - ProGuard automatically applied. ProGuard protects the SDK classes. - An existing app is not required. The open source demo is a basic demonstration app that allows you to experiment with the SDK. GET STARTED Gradle In the following subsections, you will learn how to complete these tasks: Get required items . Import SDK . If you have problems completing any of these tasks, please log a support ticket for assistance. Get required items Before you begin the Gradle approach to add the SDK to your project, you need the items in the table below from JW Player. Item Acquisition process Enterprise or Developer license JW Player SDK for Android requires an Enterprise or Developer license. Android Studio 1. Download Android Studio . 2. Install Android Studio . License key 1. From your JW Player dashboard , click PUBLISH Tools . 2. In the Downloads section, copy the LICENSE KEY for the Android SDK. Import SDK Now that you have the required items listed in the previous subsection, you can import the JW Player SDK for Android to your project and add dependencies. Add SDK to your project From within Android Studio, open your app. Open the build.gradle file for your project. Add the JW Player Maven repository URL to your project. You can choose on one of two repositories: - For the standard JW Player SDK for Android, add https://mvn.jwplayer.com/content/repositories/releases/ to your project. - For the JW Player SDK for Android with Amazon Fire support, add https://mvn.jwplayer.com/content/repositories/amazon/ to your project. allprojects { repositories { ... maven { url 'https://mvn.jwplayer.com/content/repositories/releases/' } } } Add SDK dependencies Open the build.gradle file for your app. Add the com.longtailvideo.jwplayer:jwplayer-core and com.longtailvideo.jwplayer:jwplayer-common dependencies. Sync Gradle. dependencies { ... implementation 'com.longtailvideo.jwplayer:jwplayer-core:#sdk_version_simple#' implementation 'com.longtailvideo.jwplayer:jwplayer-common:#sdk_version_simple#' } You have retrieved your JW Player license key and imported the JW Player SDK for Android into your project. You can now configure your project . Local In the following subsections, you will learn how to complete these tasks: Get required items . Import SDK . If you have problems completing any of these tasks, please log a support ticket for assistance. Get required items Before you begin the Local approach to add the SDK to your project, you need the items in the table below from JW Player. Item Acquisition process Enterprise or Developer license JW Player SDK for Android requires an Enterprise or Developer license. Android Studio 1. Download Android Studio . 2. Install Android Studio . JW Player SDK for Android and license key 1. From your JW Player dashboard , click PUBLISH Tools . 2. In the Downloads section, select a VERSION of the Android SDK from the dropdown menu. 3. Click the DOWNLOAD icon. 4. Copy the LICENSE KEY for the Android SDK. 5. On your computer, unzip the SDK ZIP file. Import SDK Now that you have the required items listed in the previous subsection, you can add JW Player SDK for Android modules to your project and add dependencies. Add module to your project From within Android Studio, open your app. Click File New New Module... Import .JAR / .AAR Package . Click Next . Select jwplayer-core-#sdk_version_simple#.aar from your computer. Click Finish . Repeat the previous steps and add jwplayer-common-#sdk_version_simple#.aar. Add SDK dependencies Click File Project Structure... Dependencies . Under Modules , be sure that your app is selected. Click the plus sign in the main panel. Select Module dependency . Select jwplayer-core-#sdk_version_simple# and jwplayer-common-#sdk_version_simple#. Click OK . You have retrieved your JW Player license key and imported the JW Player SDK for Android into your project. You can now configure your project . If necessary, you can also configure ProGuard . Demo The JW Player SDK for Android Open Source Demo is a basic demonstration app. In the following subsection, you will learn how to get required items. If you have problems completing any of these tasks, please log a support ticket for assistance. Get required items Before you can start experimenting with the JW Player SDK for Android Open Source Demo, you need the items in the table below from JW Player. Item Acquisition process Enterprise or Developer license JW Player SDK for Android requires an Enterprise or Developer license. Android Studio 1. Download Android Studio . 2. Install Android Studio . JW Player SDK for Android Open Source Demo and license key 1. Clone the repository into your Android Studio workspace: git clone git@github.com:jwplayer/jwplayer-sdk-android-demo.git . 2. From your JW Player dashboard , click PUBLISH Tools . 3. In the Downloads section, copy the LICENSE KEY for the Android SDK. You have retrieved your JW Player license key and imported the JW Player SDK for Android Open Source Demo into Android Studio. You can now configure your project . Use this form to provide your feedback. var mff60sc1xnn4cu;(function(d, t) { var s = d.createElement(t), options = { 'userName':'jwplayerdocs', 'formHash':'mff60sc1xnn4cu', 'autoResize':true, 'height':'288', 'async':true, 'host':'wufoo.com', 'header':'show', 'ssl':true, 'defaultValues': 'field118=' + location.pathname}; s.src = ('https:' == d.location.protocol ? 'https://' : 'http://') + 'www.wufoo.com/scripts/embed/form.js'; s.onload = s.onreadystatechange = function() { var rs = this.readyState; if (rs) if (rs != 'complete') if (rs != 'loaded') return; try { mff60sc1xnn4cu = new WufooForm();mff60sc1xnn4cu.initialize(options);mff60sc1xnn4cu.display(); } catch (e) {}}; var scr = d.getElementsByTagName(t)[0], par = scr.parentNode; par.insertBefore(s, scr); })(document, 'script');","title":"Download SDK"},{"location":"getting-started/download-sdk/#download-sdk","text":"Last updated: January 8, 2019 !!!important If you are using JW Player SDK for Android 2.x.x, use this SDK documentation . !!! To add a player to your app, you must import the JW Player SDK for Android and then configure your project. You can choose one of three approaches to complete these tasks. In the following table, several notes about each approach are listed. Read each approach and click the GET STARTED link for the approach that suits your implementation needs. Approach Notes Gradle - No SDK download is required. - Core and optional modules must be added to your app. - ProGuard automatically applied. ProGuard protects the SDK classes. - An existing app is required. - Either the standard SDK repository or SDK with Amazon Fire (Fire OS 5+) support repository can be accessed. GET STARTED Local - JW Player SDK for Android must be downloaded and unzipped. - Core and optional modules must be imported. - ProGuard must be configured. ProGuard protects the SDK classes. - An existing app is required. GET STARTED Demo - JW Player SDK for Android Open Source Demo must be downloaded. - All modules are included. No modules need to be imported or set as dependencies. - ProGuard automatically applied. ProGuard protects the SDK classes. - An existing app is not required. The open source demo is a basic demonstration app that allows you to experiment with the SDK. GET STARTED","title":"Download SDK"},{"location":"getting-started/download-sdk/#gradle","text":"In the following subsections, you will learn how to complete these tasks: Get required items . Import SDK . If you have problems completing any of these tasks, please log a support ticket for assistance.","title":"Gradle"},{"location":"getting-started/download-sdk/#get-required-items","text":"Before you begin the Gradle approach to add the SDK to your project, you need the items in the table below from JW Player. Item Acquisition process Enterprise or Developer license JW Player SDK for Android requires an Enterprise or Developer license. Android Studio 1. Download Android Studio . 2. Install Android Studio . License key 1. From your JW Player dashboard , click PUBLISH Tools . 2. In the Downloads section, copy the LICENSE KEY for the Android SDK.","title":"Get required items"},{"location":"getting-started/download-sdk/#import-sdk","text":"Now that you have the required items listed in the previous subsection, you can import the JW Player SDK for Android to your project and add dependencies.","title":"Import SDK"},{"location":"getting-started/download-sdk/#add-sdk-to-your-project","text":"From within Android Studio, open your app. Open the build.gradle file for your project. Add the JW Player Maven repository URL to your project. You can choose on one of two repositories: - For the standard JW Player SDK for Android, add https://mvn.jwplayer.com/content/repositories/releases/ to your project. - For the JW Player SDK for Android with Amazon Fire support, add https://mvn.jwplayer.com/content/repositories/amazon/ to your project. allprojects { repositories { ... maven { url 'https://mvn.jwplayer.com/content/repositories/releases/' } } }","title":"Add SDK to your project"},{"location":"getting-started/download-sdk/#add-sdk-dependencies","text":"Open the build.gradle file for your app. Add the com.longtailvideo.jwplayer:jwplayer-core and com.longtailvideo.jwplayer:jwplayer-common dependencies. Sync Gradle. dependencies { ... implementation 'com.longtailvideo.jwplayer:jwplayer-core:#sdk_version_simple#' implementation 'com.longtailvideo.jwplayer:jwplayer-common:#sdk_version_simple#' } You have retrieved your JW Player license key and imported the JW Player SDK for Android into your project. You can now configure your project .","title":"Add SDK dependencies"},{"location":"getting-started/download-sdk/#local","text":"In the following subsections, you will learn how to complete these tasks: Get required items . Import SDK . If you have problems completing any of these tasks, please log a support ticket for assistance.","title":"Local"},{"location":"getting-started/download-sdk/#get-required-items_1","text":"Before you begin the Local approach to add the SDK to your project, you need the items in the table below from JW Player. Item Acquisition process Enterprise or Developer license JW Player SDK for Android requires an Enterprise or Developer license. Android Studio 1. Download Android Studio . 2. Install Android Studio . JW Player SDK for Android and license key 1. From your JW Player dashboard , click PUBLISH Tools . 2. In the Downloads section, select a VERSION of the Android SDK from the dropdown menu. 3. Click the DOWNLOAD icon. 4. Copy the LICENSE KEY for the Android SDK. 5. On your computer, unzip the SDK ZIP file.","title":"Get required items"},{"location":"getting-started/download-sdk/#import-sdk_1","text":"Now that you have the required items listed in the previous subsection, you can add JW Player SDK for Android modules to your project and add dependencies.","title":"Import SDK"},{"location":"getting-started/download-sdk/#add-module-to-your-project","text":"From within Android Studio, open your app. Click File New New Module... Import .JAR / .AAR Package . Click Next . Select jwplayer-core-#sdk_version_simple#.aar from your computer. Click Finish . Repeat the previous steps and add jwplayer-common-#sdk_version_simple#.aar.","title":"Add module to your project"},{"location":"getting-started/download-sdk/#add-sdk-dependencies_1","text":"Click File Project Structure... Dependencies . Under Modules , be sure that your app is selected. Click the plus sign in the main panel. Select Module dependency . Select jwplayer-core-#sdk_version_simple# and jwplayer-common-#sdk_version_simple#. Click OK . You have retrieved your JW Player license key and imported the JW Player SDK for Android into your project. You can now configure your project . If necessary, you can also configure ProGuard .","title":"Add SDK dependencies"},{"location":"getting-started/download-sdk/#demo","text":"The JW Player SDK for Android Open Source Demo is a basic demonstration app. In the following subsection, you will learn how to get required items. If you have problems completing any of these tasks, please log a support ticket for assistance.","title":"Demo"},{"location":"getting-started/download-sdk/#get-required-items_2","text":"Before you can start experimenting with the JW Player SDK for Android Open Source Demo, you need the items in the table below from JW Player. Item Acquisition process Enterprise or Developer license JW Player SDK for Android requires an Enterprise or Developer license. Android Studio 1. Download Android Studio . 2. Install Android Studio . JW Player SDK for Android Open Source Demo and license key 1. Clone the repository into your Android Studio workspace: git clone git@github.com:jwplayer/jwplayer-sdk-android-demo.git . 2. From your JW Player dashboard , click PUBLISH Tools . 3. In the Downloads section, copy the LICENSE KEY for the Android SDK. You have retrieved your JW Player license key and imported the JW Player SDK for Android Open Source Demo into Android Studio. You can now configure your project . Use this form to provide your feedback. var mff60sc1xnn4cu;(function(d, t) { var s = d.createElement(t), options = { 'userName':'jwplayerdocs', 'formHash':'mff60sc1xnn4cu', 'autoResize':true, 'height':'288', 'async':true, 'host':'wufoo.com', 'header':'show', 'ssl':true, 'defaultValues': 'field118=' + location.pathname}; s.src = ('https:' == d.location.protocol ? 'https://' : 'http://') + 'www.wufoo.com/scripts/embed/form.js'; s.onload = s.onreadystatechange = function() { var rs = this.readyState; if (rs) if (rs != 'complete') if (rs != 'loaded') return; try { mff60sc1xnn4cu = new WufooForm();mff60sc1xnn4cu.initialize(options);mff60sc1xnn4cu.display(); } catch (e) {}}; var scr = d.getElementsByTagName(t)[0], par = scr.parentNode; par.insertBefore(s, scr); })(document, 'script');","title":"Get required items"},{"location":"integration/analytics/","text":"Analytics The setAnalyticsListener function exposes ExoPlayer\u2019s AnalyticsListener . With access to the AnalyticsListener, plug-in developers can listen for analytics events. Code Example: player.setAnalyticsListener(new AnalyticsListener() { ... });","title":"Analytics"},{"location":"integration/analytics/#analytics","text":"The setAnalyticsListener function exposes ExoPlayer\u2019s AnalyticsListener . With access to the AnalyticsListener, plug-in developers can listen for analytics events. Code Example: player.setAnalyticsListener(new AnalyticsListener() { ... });","title":"Analytics"},{"location":"interaction/advertising/","text":"Advertising API Advertising Callbacks Callbacks Callback Description onBeforePlay( BeforePlayEvent beforePlayEvent) Fired just before the player begins playing. onBeforeComplete( BeforeCompleteEvent beforeCompleteEvent) Fired just before the player completes playing. onAdStarted( AdStartedEvent adStartedEvent) VPAID-only This API will trigger when a VPAID ad creative signals to our player that it is starting. onAdClick( AdClickEvent adClickEvent) Fired whenever a user clicks an ad to be redirected to its landing page. onAdSchedule( AdScheduleEvent adScheduleEvent) VAST only. Fires when the ad schedule is loaded and parsed by the plugin. onAdCompanions( AdCompanionsEvent adCompanionsEvent) VAST and IMA. Fired whenever an ad contains companions. onAdRequest( AdRequestEvent adRequestEvent) VAST only. Fired whenever an ad is requested by the player. onAdImpression( AdImpressionEvent adImpressionEvent) Fired based on the IAB definition of an ad impression. onAdComplete( AdCompleteEvent adCompleteEvent) Fired whenever an ad has completed playback. onAdSkipped( AdSkippedEvent adSkippedEvent) Fired whenever an ad has been skipped. onAdRequest( AdRequestEvent adRequestEvent) Fired whenever an ad is requested by the player. onAdTime( AdTimeEvent adTimeEvent) Fired while ad playback is in progress. onAdPause( AdPauseEvent adPauseEvent) Fired whenever an ad is paused. onAdPlay( AdPlayEvent adPlayEvent) Fired whenever an ad starts playing or when an ad is unpaused. onAdError( AdErrorEvent adErrorEvent) Fired whenever an error prevents the ad from playing. Supported for VAST and IMA.","title":"Advertising API"},{"location":"interaction/advertising/#advertising-api","text":"","title":"Advertising API"},{"location":"interaction/advertising/#advertising-callbacks","text":"","title":"Advertising Callbacks"},{"location":"interaction/advertising/#callbacks","text":"Callback Description onBeforePlay( BeforePlayEvent beforePlayEvent) Fired just before the player begins playing. onBeforeComplete( BeforeCompleteEvent beforeCompleteEvent) Fired just before the player completes playing. onAdStarted( AdStartedEvent adStartedEvent) VPAID-only This API will trigger when a VPAID ad creative signals to our player that it is starting. onAdClick( AdClickEvent adClickEvent) Fired whenever a user clicks an ad to be redirected to its landing page. onAdSchedule( AdScheduleEvent adScheduleEvent) VAST only. Fires when the ad schedule is loaded and parsed by the plugin. onAdCompanions( AdCompanionsEvent adCompanionsEvent) VAST and IMA. Fired whenever an ad contains companions. onAdRequest( AdRequestEvent adRequestEvent) VAST only. Fired whenever an ad is requested by the player. onAdImpression( AdImpressionEvent adImpressionEvent) Fired based on the IAB definition of an ad impression. onAdComplete( AdCompleteEvent adCompleteEvent) Fired whenever an ad has completed playback. onAdSkipped( AdSkippedEvent adSkippedEvent) Fired whenever an ad has been skipped. onAdRequest( AdRequestEvent adRequestEvent) Fired whenever an ad is requested by the player. onAdTime( AdTimeEvent adTimeEvent) Fired while ad playback is in progress. onAdPause( AdPauseEvent adPauseEvent) Fired whenever an ad is paused. onAdPlay( AdPlayEvent adPlayEvent) Fired whenever an ad starts playing or when an ad is unpaused. onAdError( AdErrorEvent adErrorEvent) Fired whenever an error prevents the ad from playing. Supported for VAST and IMA.","title":"Callbacks"},{"location":"interaction/audio/","text":"AudioTrack The AudioTrack class represents an audio track in an HLS, SmoothStreaming, or DASH stream. Audio tracks are sent to the developer via the onAudioTracks() callback. At this moment Audio Track switching is only supported for DASH and SmoothStreaming streams. Audio API Methods Method Description List AudioTrack getAudioTracks() Returns a List with audio tracks from the player. int getCurrentAudioTrack() Returns the index of the currently active audio track. setCurrentAudioTrack(int index) Change the audio track to the provided index. The index must be within the list provided by getAudioTracks() . Audio Callbacks Callback Description onAudioTracks( AudioTracksEvent audioTracksEvent) Fired when the list of available audio tracks is updated. Happens shortly after a playlist item starts playing. onAudioTrackChanged( AudioTrackChangedEvent audioTrackChangedEvent) Fired when the active audio track is changed. Happens in response to a user clicking the audio tracks menu or a call to setCurrentAudioTrack() Background Audio The JW Player allows you to keep continuing audio playback when your app has been backgrounded. You can enable background audio playback by calling setBackgroundAudio(true) on the JWPlayerView.","title":"Audio API"},{"location":"interaction/audio/#audiotrack","text":"The AudioTrack class represents an audio track in an HLS, SmoothStreaming, or DASH stream. Audio tracks are sent to the developer via the onAudioTracks() callback. At this moment Audio Track switching is only supported for DASH and SmoothStreaming streams.","title":"AudioTrack"},{"location":"interaction/audio/#audio-api-methods","text":"Method Description List AudioTrack getAudioTracks() Returns a List with audio tracks from the player. int getCurrentAudioTrack() Returns the index of the currently active audio track. setCurrentAudioTrack(int index) Change the audio track to the provided index. The index must be within the list provided by getAudioTracks() .","title":"Audio API Methods"},{"location":"interaction/audio/#audio-callbacks","text":"Callback Description onAudioTracks( AudioTracksEvent audioTracksEvent) Fired when the list of available audio tracks is updated. Happens shortly after a playlist item starts playing. onAudioTrackChanged( AudioTrackChangedEvent audioTrackChangedEvent) Fired when the active audio track is changed. Happens in response to a user clicking the audio tracks menu or a call to setCurrentAudioTrack()","title":"Audio Callbacks"},{"location":"interaction/audio/#background-audio","text":"The JW Player allows you to keep continuing audio playback when your app has been backgrounded. You can enable background audio playback by calling setBackgroundAudio(true) on the JWPlayerView.","title":"Background Audio"},{"location":"interaction/captions/","text":"Captions The Caption class represents a caption track. Caption tracks can be attached to a PlaylistItem as detailed below. Adding Captions to PlaylistItem To add a Caption track to an existing PlaylistItem follow the example below // Create a PlaylistItem pointing to some content PlaylistItem item = new PlaylistItem( http://media.source/file.m3u8 ); // Create a list of Caption objects to represent the captions tracks List Caption captionTracks = new ArrayList (); // Create a Caption pointing to English subtitles and add it to the list Caption captionEn = new Caption( file_en.srt ); captionTracks.add(captionEng); // Create a Caption pointing to Spanish subtitles, this time using the Builder Caption captionSp = new Caption.Builder().file( file_sp.srt ).label( Espa\u00f1ol ).build(); captionTracks.add(captionSp); // Add the Caption tracks to the PlaylistItem item.setCaptions(captionTracks); Captions API Methods Method Description List Caption getCaptionsList() Returns a List with captions tracks from the player int getCurrentCaptions() Returns the index of the currently active captions track. Note the captions are Off if the index is 0 setCurrentCaptions(int index) Change the visible captions track to the provided index. The index must be within the list provided by getCaptionsList() . Captions Callbacks Callback Description onCaptionsList( CaptionsListEvent captionsListEvent) Fired when the list of available captions tracks is updated. onCaptionsChanged( CaptionsChangedEvent captionsChangedEvent) Fired when the active captions track is changed. Happens in response to a user clicking the controlbar CC menu or a call to setCurrentCaptions() .","title":"Captions API"},{"location":"interaction/captions/#captions","text":"The Caption class represents a caption track. Caption tracks can be attached to a PlaylistItem as detailed below.","title":"Captions"},{"location":"interaction/captions/#adding-captions-to-playlistitem","text":"To add a Caption track to an existing PlaylistItem follow the example below // Create a PlaylistItem pointing to some content PlaylistItem item = new PlaylistItem( http://media.source/file.m3u8 ); // Create a list of Caption objects to represent the captions tracks List Caption captionTracks = new ArrayList (); // Create a Caption pointing to English subtitles and add it to the list Caption captionEn = new Caption( file_en.srt ); captionTracks.add(captionEng); // Create a Caption pointing to Spanish subtitles, this time using the Builder Caption captionSp = new Caption.Builder().file( file_sp.srt ).label( Espa\u00f1ol ).build(); captionTracks.add(captionSp); // Add the Caption tracks to the PlaylistItem item.setCaptions(captionTracks);","title":"Adding Captions to PlaylistItem"},{"location":"interaction/captions/#captions-api-methods","text":"Method Description List Caption getCaptionsList() Returns a List with captions tracks from the player int getCurrentCaptions() Returns the index of the currently active captions track. Note the captions are Off if the index is 0 setCurrentCaptions(int index) Change the visible captions track to the provided index. The index must be within the list provided by getCaptionsList() .","title":"Captions API Methods"},{"location":"interaction/captions/#captions-callbacks","text":"Callback Description onCaptionsList( CaptionsListEvent captionsListEvent) Fired when the list of available captions tracks is updated. onCaptionsChanged( CaptionsChangedEvent captionsChangedEvent) Fired when the active captions track is changed. Happens in response to a user clicking the controlbar CC menu or a call to setCurrentCaptions() .","title":"Captions Callbacks"},{"location":"interaction/exoplayer/","text":"ExoPlayer customization To customize the ExoPlayer , use the ExoPlayerSettings reference that can be retrieved from JWPlayerView . Look-Ahead buffer customization To customize the look-ahead buffer size, you can create an object that implements com.google.android.exoplayer2.LoadControl and pass that object through ExoPlayerSettings Example of usage // Create a LoadControl object LoadControl loadControl = new LoadControl() { @Override public void onPrepared() { } @Override public void onTracksSelected(Renderer[] renderers, TrackGroupArray trackGroups, TrackSelectionArray trackSelections) { } @Override public void onStopped() { } @Override public void onReleased() { } @Override public Allocator getAllocator() { return null; } @Override public long getBackBufferDurationUs() { return 0; } @Override public boolean retainBackBufferFromKeyframe() { return false; } @Override public boolean shouldContinueLoading(long bufferedDurationUs, float playbackSpeed) { return false; } @Override public boolean shouldStartPlayback(long bufferedDurationUs, float playbackSpeed, boolean rebuffering) { return false; } }; // Set it up to the player right before JWPlayer#setup() is called player.getExoPlayerSettings().setLoadControl(loadControl); // Setup the player config PlayerConfig playerConfig = new PlayerConfig.Builder() //... .build(); player.setup(playerConfig); Chunk less preparation To enable chunk less preparation use the ExoPlayerSettings reference that can be retrieved from JWPlayerView . Chunk less preparation is disabled by default. Example of usage player.getExoPlayerSettings().enableChunkLessPreparation(); // Setup the player config PlayerConfig playerConfig = new PlayerConfig.Builder() //... .build(); player.setup(playerConfig);","title":"ExoPlayer API"},{"location":"interaction/exoplayer/#exoplayer-customization","text":"To customize the ExoPlayer , use the ExoPlayerSettings reference that can be retrieved from JWPlayerView .","title":"ExoPlayer customization"},{"location":"interaction/exoplayer/#look-ahead-buffer-customization","text":"To customize the look-ahead buffer size, you can create an object that implements com.google.android.exoplayer2.LoadControl and pass that object through ExoPlayerSettings","title":"Look-Ahead buffer customization"},{"location":"interaction/exoplayer/#example-of-usage","text":"// Create a LoadControl object LoadControl loadControl = new LoadControl() { @Override public void onPrepared() { } @Override public void onTracksSelected(Renderer[] renderers, TrackGroupArray trackGroups, TrackSelectionArray trackSelections) { } @Override public void onStopped() { } @Override public void onReleased() { } @Override public Allocator getAllocator() { return null; } @Override public long getBackBufferDurationUs() { return 0; } @Override public boolean retainBackBufferFromKeyframe() { return false; } @Override public boolean shouldContinueLoading(long bufferedDurationUs, float playbackSpeed) { return false; } @Override public boolean shouldStartPlayback(long bufferedDurationUs, float playbackSpeed, boolean rebuffering) { return false; } }; // Set it up to the player right before JWPlayer#setup() is called player.getExoPlayerSettings().setLoadControl(loadControl); // Setup the player config PlayerConfig playerConfig = new PlayerConfig.Builder() //... .build(); player.setup(playerConfig);","title":"Example of usage"},{"location":"interaction/exoplayer/#chunk-less-preparation","text":"To enable chunk less preparation use the ExoPlayerSettings reference that can be retrieved from JWPlayerView . Chunk less preparation is disabled by default.","title":"Chunk less preparation"},{"location":"interaction/exoplayer/#example-of-usage_1","text":"player.getExoPlayerSettings().enableChunkLessPreparation(); // Setup the player config PlayerConfig playerConfig = new PlayerConfig.Builder() //... .build(); player.setup(playerConfig);","title":"Example of usage"},{"location":"interaction/javadocs/","text":"","title":"JavaDocs"},{"location":"interaction/multiwindow/","text":"Multi-window mode To ensure that your app supports multi-window mode, make the following changes to your code: Add JWPlayerView#onStart() / JWPlayerView#onResume() / JWPlayerView#onPause() / JWPlayerView#onStop() invocations into your Activity 's or Fragment 's lifecycle. Add configChanges to all activities that are registered in your AndroidManifest.xml . xml activity android:name=\".MainActivity\" android:configChanges=\"keyboard|keyboardHidden|orientation|screenSize|smallestScreenSize|screenLayout\" / For more information about multi-window mode please visit Android Developers .","title":"Multi-Window Mode"},{"location":"interaction/multiwindow/#multi-window-mode","text":"To ensure that your app supports multi-window mode, make the following changes to your code: Add JWPlayerView#onStart() / JWPlayerView#onResume() / JWPlayerView#onPause() / JWPlayerView#onStop() invocations into your Activity 's or Fragment 's lifecycle. Add configChanges to all activities that are registered in your AndroidManifest.xml . xml activity android:name=\".MainActivity\" android:configChanges=\"keyboard|keyboardHidden|orientation|screenSize|smallestScreenSize|screenLayout\" / For more information about multi-window mode please visit Android Developers .","title":"Multi-window mode"},{"location":"interaction/playback/","text":"Loading a file into JW Player There are several ways to create a PlaylistItem or list of PlaylistItem s as shown below: Simple Playback // Create a PlaylistItem that points to your content PlaylistItem item = new PlaylistItem( http://url.with.content/file.mp4 ); // Load the PlaylistItem into the player player.load(item); Playback with Multiple Sources // Create an empty PlaylistItem PlaylistItem item = new PlaylistItem(); // Create a list of media sources and add High Definition and Standard Definition variants of the stream List MediaSource mediaSources = new ArrayList (); mediaSources.add(new MediaSource( http://content/movie-hd.mp4 )); mediaSources.add(new MediaSource( http://content/movie-sd.mp4 )); // Assign the sources to the PlaylistItem item.setSources(mediaSources); // Load the PlaylistItem into the player player.load(item); Playback Using a Builder // Create a new PlaylistItem using the Builder PlaylistItem item = new PlaylistItem.Builder() .file( http://url.with.content/file.mp4 ) .image( http://poster.image/poster.jpg ) .description( Some really great content ) .title( Title in the Playlist ) .build(); // Load the PlaylistItem into the player player.load(item); Playback Using TextureView We give developers the ability to use either TextureView or SurfaceView . However, TextureView should be used only if SurfaceView does not meet your needs. One example is where smooth animations or scrolling of the video surface is required prior to Android N version. In this case, please ensure that SDK_INT is less than 24 (Android N), otherwise use SurfaceView . SurfaceView is a default option and you don't need to make any extra configurations. To use TextureView please see the example below: // Create a new PlayerConfig using the Builder PlayerConfig playerConfig = new PlayerConfig.Builder() .useTextureView(true) .build(); // Load the PlaylistItem into the player player.load(item); Playback Rate float[] playbackRates = new float[] { 0.5f, 1f, 2f }; // To setup custom playback rates PlayerConfig playerConfig = new PlayerConfig.Builder() .playbackRates(PlaybackRateConfig.Factory.createPlaybackRateConfig(playbackRates)) .build(); // To use default playback rates PlayerConfig playerConfig = new PlayerConfig.Builder() .playbackRates(PlaybackRateConfig.Factory.createPlaybackRateConfig(true)) .build(); getPlayer().setup(playerConfig); Playback API Methods Method Description void load(List PlaylistItem playlist, AdvertisingBase advertising) Loads a new playlist and advertising options into the player. void load(List PlaylistItem playlist) Loads a new playlist into the player. void load(PlaylistItem playlistItem) Loads media into the player. PlayerState getState() Returns the player's current playback state void play() Starts playback. void pause() Pauses playback. void stop() Stops the player and unloads the currently playing media file void seek(double position) Seeks the currently playing media to the specified position, in seconds. double getPosition() Returns the current playback position in seconds. double getDuration() Returns the duration of the current media in seconds. void next() Tells JW Player to immediately play the next playlist item. void playlistItem(int index) Start playback of the playlist item at the specified index. Playback Callbacks Callback Description onPlay( PlayEvent playEvent) Fired when the player enters the PLAYING state. onPause( PauseEvent pauseEvent) Fired when the player enters the PAUSED state. onBuffer( BufferEvent bufferEvent) Fired when the player enters the BUFFERING state. onIdle( IdleEvent idleEvent) Fired when the player enters the IDLE state. onFirstFrame( FirstFrameEvent firstFrameEvent) Fired when playback begins. onSeek( SeekEvent seekEvent) Fired after a seek has been requested either by scrubbing the controlbar or through the API. onSeeked( SeekedEvent seekedEvent) Fired after a seek operation has completed. onTime( TimeEvent timeEvent) While the player is playing, this event is fired as the playback position gets updated. This may occur as frequently as 10 times per second. onDisplayClick( DisplayClickEvent displayClickEvent) Fired when the user clicks or taps the video display.","title":"Playback API"},{"location":"interaction/playback/#loading-a-file-into-jw-player","text":"There are several ways to create a PlaylistItem or list of PlaylistItem s as shown below:","title":"Loading a file into JW Player"},{"location":"interaction/playback/#simple-playback","text":"// Create a PlaylistItem that points to your content PlaylistItem item = new PlaylistItem( http://url.with.content/file.mp4 ); // Load the PlaylistItem into the player player.load(item);","title":"Simple Playback"},{"location":"interaction/playback/#playback-with-multiple-sources","text":"// Create an empty PlaylistItem PlaylistItem item = new PlaylistItem(); // Create a list of media sources and add High Definition and Standard Definition variants of the stream List MediaSource mediaSources = new ArrayList (); mediaSources.add(new MediaSource( http://content/movie-hd.mp4 )); mediaSources.add(new MediaSource( http://content/movie-sd.mp4 )); // Assign the sources to the PlaylistItem item.setSources(mediaSources); // Load the PlaylistItem into the player player.load(item);","title":"Playback with Multiple Sources"},{"location":"interaction/playback/#playback-using-a-builder","text":"// Create a new PlaylistItem using the Builder PlaylistItem item = new PlaylistItem.Builder() .file( http://url.with.content/file.mp4 ) .image( http://poster.image/poster.jpg ) .description( Some really great content ) .title( Title in the Playlist ) .build(); // Load the PlaylistItem into the player player.load(item);","title":"Playback Using a Builder"},{"location":"interaction/playback/#playback-using-textureview","text":"We give developers the ability to use either TextureView or SurfaceView . However, TextureView should be used only if SurfaceView does not meet your needs. One example is where smooth animations or scrolling of the video surface is required prior to Android N version. In this case, please ensure that SDK_INT is less than 24 (Android N), otherwise use SurfaceView . SurfaceView is a default option and you don't need to make any extra configurations. To use TextureView please see the example below: // Create a new PlayerConfig using the Builder PlayerConfig playerConfig = new PlayerConfig.Builder() .useTextureView(true) .build(); // Load the PlaylistItem into the player player.load(item);","title":"Playback Using TextureView"},{"location":"interaction/playback/#playback-rate","text":"float[] playbackRates = new float[] { 0.5f, 1f, 2f }; // To setup custom playback rates PlayerConfig playerConfig = new PlayerConfig.Builder() .playbackRates(PlaybackRateConfig.Factory.createPlaybackRateConfig(playbackRates)) .build(); // To use default playback rates PlayerConfig playerConfig = new PlayerConfig.Builder() .playbackRates(PlaybackRateConfig.Factory.createPlaybackRateConfig(true)) .build(); getPlayer().setup(playerConfig);","title":"Playback Rate"},{"location":"interaction/playback/#playback-api-methods","text":"Method Description void load(List PlaylistItem playlist, AdvertisingBase advertising) Loads a new playlist and advertising options into the player. void load(List PlaylistItem playlist) Loads a new playlist into the player. void load(PlaylistItem playlistItem) Loads media into the player. PlayerState getState() Returns the player's current playback state void play() Starts playback. void pause() Pauses playback. void stop() Stops the player and unloads the currently playing media file void seek(double position) Seeks the currently playing media to the specified position, in seconds. double getPosition() Returns the current playback position in seconds. double getDuration() Returns the duration of the current media in seconds. void next() Tells JW Player to immediately play the next playlist item. void playlistItem(int index) Start playback of the playlist item at the specified index.","title":"Playback API Methods"},{"location":"interaction/playback/#playback-callbacks","text":"Callback Description onPlay( PlayEvent playEvent) Fired when the player enters the PLAYING state. onPause( PauseEvent pauseEvent) Fired when the player enters the PAUSED state. onBuffer( BufferEvent bufferEvent) Fired when the player enters the BUFFERING state. onIdle( IdleEvent idleEvent) Fired when the player enters the IDLE state. onFirstFrame( FirstFrameEvent firstFrameEvent) Fired when playback begins. onSeek( SeekEvent seekEvent) Fired after a seek has been requested either by scrubbing the controlbar or through the API. onSeeked( SeekedEvent seekedEvent) Fired after a seek operation has completed. onTime( TimeEvent timeEvent) While the player is playing, this event is fired as the playback position gets updated. This may occur as frequently as 10 times per second. onDisplayClick( DisplayClickEvent displayClickEvent) Fired when the user clicks or taps the video display.","title":"Playback Callbacks"},{"location":"interaction/playlists/","text":"Creating a Playlist Multiple pieces of content can be sent into the player as a playlist as shown below. // Create a list to contain the PlaylistItems List PlaylistItem playlist = new ArrayList (); // Add a PlaylistItem pointing to the first piece of content playlist.add(new PlaylistItem( http://content/tv-show-pilot-adaptive.m3u8 )); // Add another PlaylistItem pointing to the second piece of content // This time using the Builder playlist.add(new PlaylistItem.Builder() .file( http://content/tv-show-ep2.mp4 ) .image( http://content/tv-show-poster-image.jpg ) .description( A good TV show ) .build()); // Add a final piece of content playlist.add(new PlaylistItem( http://content/tv-show-ep3.mp4 )); // Load the playlist into the player player.load(playlist); Playlist API Methods Method Description List PlaylistItem getPlaylist() Returns the player's current playlist int getPlaylistIndex() Returns the index of the currently active item in the playlist PlaylistItem getPlaylistItem(int index) Returns the currently playing PlaylistItem Playlist Callbacks Callback Description onPlaylist( PlaylistEvent playlistEvent) Fired when a new playlist has been loaded into the player. onPlaylistItem( PlaylistItemEvent playlistItemEvent) Fired when the playlist index changes to a new playlist item. onPlaylistComplete( PlaylistCompleteEvent playlistCompleteEvent) Fired when the player is done playing all items in the playlist. However, if the repeat option is set true, this is never fired.","title":"Playlists"},{"location":"interaction/playlists/#creating-a-playlist","text":"Multiple pieces of content can be sent into the player as a playlist as shown below. // Create a list to contain the PlaylistItems List PlaylistItem playlist = new ArrayList (); // Add a PlaylistItem pointing to the first piece of content playlist.add(new PlaylistItem( http://content/tv-show-pilot-adaptive.m3u8 )); // Add another PlaylistItem pointing to the second piece of content // This time using the Builder playlist.add(new PlaylistItem.Builder() .file( http://content/tv-show-ep2.mp4 ) .image( http://content/tv-show-poster-image.jpg ) .description( A good TV show ) .build()); // Add a final piece of content playlist.add(new PlaylistItem( http://content/tv-show-ep3.mp4 )); // Load the playlist into the player player.load(playlist);","title":"Creating a Playlist"},{"location":"interaction/playlists/#playlist-api-methods","text":"Method Description List PlaylistItem getPlaylist() Returns the player's current playlist int getPlaylistIndex() Returns the index of the currently active item in the playlist PlaylistItem getPlaylistItem(int index) Returns the currently playing PlaylistItem","title":"Playlist API Methods"},{"location":"interaction/playlists/#playlist-callbacks","text":"Callback Description onPlaylist( PlaylistEvent playlistEvent) Fired when a new playlist has been loaded into the player. onPlaylistItem( PlaylistItemEvent playlistItemEvent) Fired when the playlist index changes to a new playlist item. onPlaylistComplete( PlaylistCompleteEvent playlistCompleteEvent) Fired when the player is done playing all items in the playlist. However, if the repeat option is set true, this is never fired.","title":"Playlist Callbacks"},{"location":"interaction/quality/","text":"QualityLevel The QualityLevel class represents a quality variant in a HLS or DASH stream. Quality levels are sent to the developer via the onQualityLevels() callback. Quality API Methods Method Description List QualityLevel getQualityLevels() Returns a list of the currently available quality levels int getCurrentQuality() Returns the index of the current quality level in the List returned by getQualityLevels() setCurrentQuality(int index) Sets the quality level to the provided index Quality Callbacks Callback Description onLevels( LevelsEvent levelsEvent) Fired when the list of quality levels is updated. Happens shortly after an item starts playing. onLevelsChanged( LevelsChangedEvent levelsChangedEvent) Fired when the active quality level is changed. Happens in response to a user clicking the control bar or a call to setCurrentQuality()","title":"Quality API"},{"location":"interaction/quality/#qualitylevel","text":"The QualityLevel class represents a quality variant in a HLS or DASH stream. Quality levels are sent to the developer via the onQualityLevels() callback.","title":"QualityLevel"},{"location":"interaction/quality/#quality-api-methods","text":"Method Description List QualityLevel getQualityLevels() Returns a list of the currently available quality levels int getCurrentQuality() Returns the index of the current quality level in the List returned by getQualityLevels() setCurrentQuality(int index) Sets the quality level to the provided index","title":"Quality API Methods"},{"location":"interaction/quality/#quality-callbacks","text":"Callback Description onLevels( LevelsEvent levelsEvent) Fired when the list of quality levels is updated. Happens shortly after an item starts playing. onLevelsChanged( LevelsChangedEvent levelsChangedEvent) Fired when the active quality level is changed. Happens in response to a user clicking the control bar or a call to setCurrentQuality()","title":"Quality Callbacks"},{"location":"interaction/related/","text":"Related Content Overlay As of JW Player SDK for Android 2.5.+ related content overlay is supported. Read more about Related Videos . Related Overlay API Methods Method Description openRelatedOverlay() Opens the related videos overlay if the current video/playlist has a related feed enabled. If the video is still playing it will pause closeRelatedOverlay() Closes the related videos overlay if the current video/playlist has a related feed enabled and is shown Related Overlay Callbacks Callback Description onRelatedOpen( RelatedOpenEvent relatedOpenEvent) Triggers when the related overlay is opened. onRelatedClose( RelatedCloseEvent relatedCloseEvent) Triggers when the related plugin is closed. onRelatedPlay( RelatedPlayEvent relatedPlayEvent) Triggers when a user selects an object in a related feed or the first item starts playing","title":"Related Feed API"},{"location":"interaction/related/#related-content-overlay","text":"As of JW Player SDK for Android 2.5.+ related content overlay is supported. Read more about Related Videos .","title":"Related Content Overlay"},{"location":"interaction/related/#related-overlay-api-methods","text":"Method Description openRelatedOverlay() Opens the related videos overlay if the current video/playlist has a related feed enabled. If the video is still playing it will pause closeRelatedOverlay() Closes the related videos overlay if the current video/playlist has a related feed enabled and is shown","title":"Related Overlay API Methods"},{"location":"interaction/related/#related-overlay-callbacks","text":"Callback Description onRelatedOpen( RelatedOpenEvent relatedOpenEvent) Triggers when the related overlay is opened. onRelatedClose( RelatedCloseEvent relatedCloseEvent) Triggers when the related plugin is closed. onRelatedPlay( RelatedPlayEvent relatedPlayEvent) Triggers when a user selects an object in a related feed or the first item starts playing","title":"Related Overlay Callbacks"},{"location":"migration/api-methods/","text":"Added API Methods Method Description int getPlaylistIndex() Returns the index of the currently playing PlaylistItem. PlaylistItem getPlaylistItem(int index) Returns the PlaylistItem at the provided index. List Caption getCaptionsList() Returns the list of currently available captions tracks. int getCurrentCaptions() Returns the index of the currently selected captions track. setCurrentCaptions(int index) Sets which captions track to display. setSkin(Skin skin) Sets the player skin from the stock set of skins. setSkin(String skinUrl) Sets the player skin to the provided URL. onDestroy() Called from Activity.onDestroy() or Fragment.onDestroy(), handles resource cleanup. Modified API Methods Setup Related Methods Setup is primarly used to change the player configuration programmatically. It is also possible to update the playlist and advertising settings alongside other configuration changes. In order to get the current player configuration simply call: getConfig() - which will return the current configuration. Modify the configuration as you see fit and then load it into the player using setup() Load Related Methods If you would only like to change the playlist and advertising options without affecting any other settings use the load() methods, they are as follows: Method Description load(List PlaylistItem playlist, Advertising advertising) Used to load a playlist along with advertising options and an ad schedule. load(List PlaylistItem playlist) Used to load a playlist, note that each playlist item can have an advertising schedule. load(PlaylistItem playlistItem) Used to load a single playlist item. Return Types for Getters Method Description public List QualityLevel getQualityLevels() Switched to List from array. public List PlaylistItem getPlayList() Removed Playlist object in favor of List List AudioTrack getAudioTracks() Switched to List from array. long getPosition() getPosition now returns a long instead of an int. long getDuration() getDuration now returns a long instead of an int. Renamed Methods Method Description public void setControls(boolean controls) Method name changed from setControlBarVisibility() Method Signature Changes Method Description playAd(String... vasts) playAd() can now take multiple ad tags, if one ad tag fails to load the next will be attempted. Removed API Methods Method Description setEnableSetSystemUiVisibility(boolean enableSetSystemUiVisibility) Replaced with extending FullscreenHandler and setFullscreenHandler(). boolean isAutoStart() AutoStart is now controlled at the Playlist level. setAutoStart(boolean autoStart) AutoStart is now controlled at the Playlist level. boolean isRepeat() AutoRepeat is not controlled at the Playlist level. setRepeat(boolean repeat) AutoRepeat is not controlled at the Playlist level. release() No longer necessary, use onPause() , onResume() , and, onDestroy() Changes to Media Classes The names of some media classes have changed and some of their structures have been altered. The new names are: 1.x 2.x Description of Changes PlayerConfig This is a new class, it represents a player configuration and can include: controlbar, caption styling, logo, skin, and advertising settings. SingleSource and MultipleQualityMediaSource PlaylistItem This is the root class for a single piece of media in JW Player. It can contain URLs to captions tracks, media sources, and an ad schedule for this playlist item. MediaSource Used for multiple-source media, any number of these can be assigned to a single PlaylistItem Subtitle Caption Represents a caption track, any number of these can be assigned to a single PlaylistItem AdBreak AdBreak Represents an advertising break, contains a playback offset (pre, post, static midroll, or midroll %) and an Ad . Ad Has an AdSource of either VAST or IMA and contains any number of tags. Multiple tags are waterfalled - if one fails the next is attempted. Advertising Advertising or VMAPAdvertising these classes contain advertising-related settings (e.g. skip message) and can contain an advertising schedule that is applied to the entire playlist. Builders It is now possible to instantiate JWPlayerView and other Media Classes via a builder. Builders cover all of the configuration options that are possible for a class. And in case of the JWPlayerView the builder also supports all the possible XML attributes. Example: PlayerConfig playerConfig = new PlayerConfig.Builder() .logoFile( jw_logo.png ) .logoLink( http://jwplayer.com ) .autostart(true) .repeat(true) .build(); JWPlayerView p = new JWPlayerView(this, playerConfig); Will create a JW Player instance with a clickable logo, and autostart and autorepeat enabled. There are also builders for the Caption , MediaSource , and PlaylistItem classes.","title":"Added API Methods"},{"location":"migration/api-methods/#added-api-methods","text":"Method Description int getPlaylistIndex() Returns the index of the currently playing PlaylistItem. PlaylistItem getPlaylistItem(int index) Returns the PlaylistItem at the provided index. List Caption getCaptionsList() Returns the list of currently available captions tracks. int getCurrentCaptions() Returns the index of the currently selected captions track. setCurrentCaptions(int index) Sets which captions track to display. setSkin(Skin skin) Sets the player skin from the stock set of skins. setSkin(String skinUrl) Sets the player skin to the provided URL. onDestroy() Called from Activity.onDestroy() or Fragment.onDestroy(), handles resource cleanup.","title":"Added API Methods"},{"location":"migration/api-methods/#modified-api-methods","text":"","title":"Modified API Methods"},{"location":"migration/api-methods/#setup-related-methods","text":"Setup is primarly used to change the player configuration programmatically. It is also possible to update the playlist and advertising settings alongside other configuration changes. In order to get the current player configuration simply call: getConfig() - which will return the current configuration. Modify the configuration as you see fit and then load it into the player using setup()","title":"Setup Related Methods"},{"location":"migration/api-methods/#load-related-methods","text":"If you would only like to change the playlist and advertising options without affecting any other settings use the load() methods, they are as follows: Method Description load(List PlaylistItem playlist, Advertising advertising) Used to load a playlist along with advertising options and an ad schedule. load(List PlaylistItem playlist) Used to load a playlist, note that each playlist item can have an advertising schedule. load(PlaylistItem playlistItem) Used to load a single playlist item.","title":"Load Related Methods"},{"location":"migration/api-methods/#return-types-for-getters","text":"Method Description public List QualityLevel getQualityLevels() Switched to List from array. public List PlaylistItem getPlayList() Removed Playlist object in favor of List List AudioTrack getAudioTracks() Switched to List from array. long getPosition() getPosition now returns a long instead of an int. long getDuration() getDuration now returns a long instead of an int.","title":"Return Types for Getters"},{"location":"migration/api-methods/#renamed-methods","text":"Method Description public void setControls(boolean controls) Method name changed from setControlBarVisibility()","title":"Renamed Methods"},{"location":"migration/api-methods/#method-signature-changes","text":"Method Description playAd(String... vasts) playAd() can now take multiple ad tags, if one ad tag fails to load the next will be attempted.","title":"Method Signature Changes"},{"location":"migration/api-methods/#removed-api-methods","text":"Method Description setEnableSetSystemUiVisibility(boolean enableSetSystemUiVisibility) Replaced with extending FullscreenHandler and setFullscreenHandler(). boolean isAutoStart() AutoStart is now controlled at the Playlist level. setAutoStart(boolean autoStart) AutoStart is now controlled at the Playlist level. boolean isRepeat() AutoRepeat is not controlled at the Playlist level. setRepeat(boolean repeat) AutoRepeat is not controlled at the Playlist level. release() No longer necessary, use onPause() , onResume() , and, onDestroy()","title":"Removed API Methods"},{"location":"migration/api-methods/#changes-to-media-classes","text":"The names of some media classes have changed and some of their structures have been altered. The new names are: 1.x 2.x Description of Changes PlayerConfig This is a new class, it represents a player configuration and can include: controlbar, caption styling, logo, skin, and advertising settings. SingleSource and MultipleQualityMediaSource PlaylistItem This is the root class for a single piece of media in JW Player. It can contain URLs to captions tracks, media sources, and an ad schedule for this playlist item. MediaSource Used for multiple-source media, any number of these can be assigned to a single PlaylistItem Subtitle Caption Represents a caption track, any number of these can be assigned to a single PlaylistItem AdBreak AdBreak Represents an advertising break, contains a playback offset (pre, post, static midroll, or midroll %) and an Ad . Ad Has an AdSource of either VAST or IMA and contains any number of tags. Multiple tags are waterfalled - if one fails the next is attempted. Advertising Advertising or VMAPAdvertising these classes contain advertising-related settings (e.g. skip message) and can contain an advertising schedule that is applied to the entire playlist.","title":"Changes to Media Classes"},{"location":"migration/api-methods/#builders","text":"It is now possible to instantiate JWPlayerView and other Media Classes via a builder. Builders cover all of the configuration options that are possible for a class. And in case of the JWPlayerView the builder also supports all the possible XML attributes. Example: PlayerConfig playerConfig = new PlayerConfig.Builder() .logoFile( jw_logo.png ) .logoLink( http://jwplayer.com ) .autostart(true) .repeat(true) .build(); JWPlayerView p = new JWPlayerView(this, playerConfig); Will create a JW Player instance with a clickable logo, and autostart and autorepeat enabled. There are also builders for the Caption , MediaSource , and PlaylistItem classes.","title":"Builders"},{"location":"migration/configuration-options/","text":"Added Configuration Options XML Attribute Description jw_captions_color Hex color of the captions text. Is ffffff by default. jw_captions_fontSize Size of the captions text. Is 15 points by default. jw_captions_fontFamily Family of the captions text. Is sans by default. jw_captions_fontOpacity Alpha value of the captions text. Is 100 by default. jw_captions_backgroundColor Hex color of the caption characters background. Is 000000 by default. jw_captions_backgroundOpacity Alpha value of the caption characters background. Is 75 by default. jw_captions_edgeStyle Method by which the captions characters are separated from their background. jw_captions_windowColor Hex color of the background of the entire captions area. Is 000000 by default. jw_captions_windowOpacity Alpha value of the background of the entire captions area. Is 0 by default. jw_logo_file Location of an external JPG, PNG or GIF image to be used as watermark. We recommend using 24 bit PNG images with transparency, since they blend nicely with the video. jw_logo_hide By default (false), the logo remains visible all the time. When this option is set to true, the logo will automatically show and hide along with the other player controls. jw_logo_link HTTP URL to jump to when the watermark image is clicked (e.g. http://example.com/). If it is not set, a click on the watermark does nothing in particular. jw_logo_margin The distance of the logo from the edges of the display. The default is 8 pixels. jw_logo_position This sets the corner in which to display the watermark. Uses an enum that can be TOP_RIGHT (the default), TOP_LEFT, BOTTOM_RIGHT or BOTTOM_LEFT. Note the default position is preferred, since the logo won't interfere with the controlbar, captions, overlay ads and dock buttons. jw_skin_name The skin to use for styling the player. If not configured, we'll default our player to use the seven skin. Other available premade skins include six, five, beelden, vapor, roundster, bekle, stormtrooper, and glow. A live example showing each of these, as well as a deeper explanation of custom colors, can be found on our JW Player skin configuration page. jw_skin_active The color of active skin elements. This should be entered in either hex or x11 color format. jw_skin_inactive The color of inactive skin elements. Like the above active config, this should be entered in either hex or x11 color format. jw_skin_background The color of a skin's background portion. Like the above active config, this should be entered in either hex or x11 color format. jw_skin_url If using an external CSS file to style your player, this can be specified here. Note that with this configuration you will still need to specify the name of your skin and this may negatively impact the speed which your JW Player loads Modified Configuration Options 1.x 2.x Description of Changes jw_autoStart jw_autostart Start changed to lower case jw_posterURL jw_image Renamed Removed Configuration Options XML Attribute jw_controlsFullscreen jw_controlsQuality jw_controlsTimePlayed jw_controlsTotalDuration jw_controlsSeekEnabled jw_replayButtonEnabled jw_posterDrawable","title":"Added Configuration Options"},{"location":"migration/configuration-options/#added-configuration-options","text":"XML Attribute Description jw_captions_color Hex color of the captions text. Is ffffff by default. jw_captions_fontSize Size of the captions text. Is 15 points by default. jw_captions_fontFamily Family of the captions text. Is sans by default. jw_captions_fontOpacity Alpha value of the captions text. Is 100 by default. jw_captions_backgroundColor Hex color of the caption characters background. Is 000000 by default. jw_captions_backgroundOpacity Alpha value of the caption characters background. Is 75 by default. jw_captions_edgeStyle Method by which the captions characters are separated from their background. jw_captions_windowColor Hex color of the background of the entire captions area. Is 000000 by default. jw_captions_windowOpacity Alpha value of the background of the entire captions area. Is 0 by default. jw_logo_file Location of an external JPG, PNG or GIF image to be used as watermark. We recommend using 24 bit PNG images with transparency, since they blend nicely with the video. jw_logo_hide By default (false), the logo remains visible all the time. When this option is set to true, the logo will automatically show and hide along with the other player controls. jw_logo_link HTTP URL to jump to when the watermark image is clicked (e.g. http://example.com/). If it is not set, a click on the watermark does nothing in particular. jw_logo_margin The distance of the logo from the edges of the display. The default is 8 pixels. jw_logo_position This sets the corner in which to display the watermark. Uses an enum that can be TOP_RIGHT (the default), TOP_LEFT, BOTTOM_RIGHT or BOTTOM_LEFT. Note the default position is preferred, since the logo won't interfere with the controlbar, captions, overlay ads and dock buttons. jw_skin_name The skin to use for styling the player. If not configured, we'll default our player to use the seven skin. Other available premade skins include six, five, beelden, vapor, roundster, bekle, stormtrooper, and glow. A live example showing each of these, as well as a deeper explanation of custom colors, can be found on our JW Player skin configuration page. jw_skin_active The color of active skin elements. This should be entered in either hex or x11 color format. jw_skin_inactive The color of inactive skin elements. Like the above active config, this should be entered in either hex or x11 color format. jw_skin_background The color of a skin's background portion. Like the above active config, this should be entered in either hex or x11 color format. jw_skin_url If using an external CSS file to style your player, this can be specified here. Note that with this configuration you will still need to specify the name of your skin and this may negatively impact the speed which your JW Player loads","title":"Added Configuration Options"},{"location":"migration/configuration-options/#modified-configuration-options","text":"1.x 2.x Description of Changes jw_autoStart jw_autostart Start changed to lower case jw_posterURL jw_image Renamed","title":"Modified Configuration Options"},{"location":"migration/configuration-options/#removed-configuration-options","text":"XML Attribute jw_controlsFullscreen jw_controlsQuality jw_controlsTimePlayed jw_controlsTotalDuration jw_controlsSeekEnabled jw_replayButtonEnabled jw_posterDrawable","title":"Removed Configuration Options"},{"location":"migration/event-callbacks/","text":"Added Callbacks Callback Description onCaptionsList(List Caption tracks) Fired when captions tracks are available. onSetupError(String message) Fired when an error occurs during player setup. onPlaylist(List PlaylistItem playlist) Fired when a Playlist is loaded into the player. onPlaylistItem(int index, PlaylistItem playlistItem) Fired when a PlaylistItem begins playing. onPlaylistComplete() Fired when the last item in a playlist finishes playing. onBeforePlay() Fired immediately after the user clicks Play but before playback begins. onBeforeComplete() Fired immediately before content finishes playing. Modified Callbacks 1.x 2.x Description of Changes onQualityLevels(QualityLevel[] levels) onQualityLevels(final List QualityLevel levels) Quality levels changed from array to List. onQualityChange(QualityLevel currentQuality) onQualityChange(int currentQuality) Quality level parameter changed from QualityLevel to index. onAudioTracks(AudioTrackLevel[] tracksLevels) onAudioTracks(final List AudioTrack audioTracks) Audio tracks changed from array to List. onAudioTrackChange(AudioTrackLevel currentAudioTrackLevel) onAudioTrackChange(int currentTrack) Audio track parameter changed from track to index. onSubtitleSelected(Subtitle subtitle) onCaptionsChange(int track, List Caption captions) Name changed from onSubtitleSelected(), track index added. onTime(int position, int duration) onTime(long position, long duration) Position and duration types changed from int to long. onFullscreen(boolean state, boolean userRequest) onFullscreen(boolean fullscreen) userRequest parameter removed. onMeta(Map String, String metaMap) onMeta(Metadata meta) Metadata is now returned using the Metadata class. onAdTime(String adTag, int position, int duration) onAdTime(String tag, long position, long duration, int sequence) Position and duration types changed from int to long. Sequence parameter added. onAdImpression(String adTag) onAdImpression(String tag, String creativeType, String adPosition) Added creativeType and adPosition parameters. onAdClick(String adTag, String url) onAdClick(String tag) Removed the URL parameter. onBuffer() onBuffer(PlayerState oldState) onBuffer now reports the state the player switched from. onIdle() onIdle(PlayerState oldState) onIdle now reports the state the player switched from. onPause() onPause(PlayerState oldState) onPause now reports the state the player switched from. onPlay() onPlay(PlayerState oldState) onPlay now reports the state the player switched from. onAdPlay(String adTag) onAdPlay(String tag, PlayerState oldState) onAdPlay now reports the state the player switched from. onAdPause(String adTag) onAdPause(String tag, PlayerState oldState) onAdPause now reports the state the player switched from. Removed Callbacks Callback Description onSubtitle(String subtitle) Display of individual subtitles is no longer reported. onAdFullscreen(boolean state, boolean userRequest) All fullscreen state changes are now reported through onFullscreen() onAdMeta(Map String, String metaMap) All metadata is now reported through onMeta() onAdBuffer(String adTag) onAdIdle(String adTag) onMediaSelected()","title":"Added Callbacks"},{"location":"migration/event-callbacks/#added-callbacks","text":"Callback Description onCaptionsList(List Caption tracks) Fired when captions tracks are available. onSetupError(String message) Fired when an error occurs during player setup. onPlaylist(List PlaylistItem playlist) Fired when a Playlist is loaded into the player. onPlaylistItem(int index, PlaylistItem playlistItem) Fired when a PlaylistItem begins playing. onPlaylistComplete() Fired when the last item in a playlist finishes playing. onBeforePlay() Fired immediately after the user clicks Play but before playback begins. onBeforeComplete() Fired immediately before content finishes playing.","title":"Added Callbacks"},{"location":"migration/event-callbacks/#modified-callbacks","text":"1.x 2.x Description of Changes onQualityLevels(QualityLevel[] levels) onQualityLevels(final List QualityLevel levels) Quality levels changed from array to List. onQualityChange(QualityLevel currentQuality) onQualityChange(int currentQuality) Quality level parameter changed from QualityLevel to index. onAudioTracks(AudioTrackLevel[] tracksLevels) onAudioTracks(final List AudioTrack audioTracks) Audio tracks changed from array to List. onAudioTrackChange(AudioTrackLevel currentAudioTrackLevel) onAudioTrackChange(int currentTrack) Audio track parameter changed from track to index. onSubtitleSelected(Subtitle subtitle) onCaptionsChange(int track, List Caption captions) Name changed from onSubtitleSelected(), track index added. onTime(int position, int duration) onTime(long position, long duration) Position and duration types changed from int to long. onFullscreen(boolean state, boolean userRequest) onFullscreen(boolean fullscreen) userRequest parameter removed. onMeta(Map String, String metaMap) onMeta(Metadata meta) Metadata is now returned using the Metadata class. onAdTime(String adTag, int position, int duration) onAdTime(String tag, long position, long duration, int sequence) Position and duration types changed from int to long. Sequence parameter added. onAdImpression(String adTag) onAdImpression(String tag, String creativeType, String adPosition) Added creativeType and adPosition parameters. onAdClick(String adTag, String url) onAdClick(String tag) Removed the URL parameter. onBuffer() onBuffer(PlayerState oldState) onBuffer now reports the state the player switched from. onIdle() onIdle(PlayerState oldState) onIdle now reports the state the player switched from. onPause() onPause(PlayerState oldState) onPause now reports the state the player switched from. onPlay() onPlay(PlayerState oldState) onPlay now reports the state the player switched from. onAdPlay(String adTag) onAdPlay(String tag, PlayerState oldState) onAdPlay now reports the state the player switched from. onAdPause(String adTag) onAdPause(String tag, PlayerState oldState) onAdPause now reports the state the player switched from.","title":"Modified Callbacks"},{"location":"migration/event-callbacks/#removed-callbacks","text":"Callback Description onSubtitle(String subtitle) Display of individual subtitles is no longer reported. onAdFullscreen(boolean state, boolean userRequest) All fullscreen state changes are now reported through onFullscreen() onAdMeta(Map String, String metaMap) All metadata is now reported through onMeta() onAdBuffer(String adTag) onAdIdle(String adTag) onMediaSelected()","title":"Removed Callbacks"},{"location":"migration/examples/","text":"Examples These examples assume that you have a reference to a JWPlayerView called player. Loading a Single Stream 1.x 2.x Description of Changes player.load(new SingleSource(\"http://url-pointing-to/file.m3u8\")); player.load(new PlaylistItem(\"http://url-pointing-to/file.m3u8\")); Class names changed for SingleSource vs. PlaylistItem Loading a Playlist 1.x 2.x Description of Changes List JWMediaSource pl = new ArrayList (); pl.add(new SingleSource(\"http://url-pointing-to/first_stream.m3u8\")); pl.add(new SingleSource(\"http://url-pointing-to/second_stream.m3u8\")); player.load(pl); Playlist playlist = p.getPlayList(); List PlaylistItem playlist = new ArrayList (); playlist.add(new PlaylistItem(\"http://url-pointing-to/first_stream.m3u8\")); playlist.add(new PlaylistItem(\"http://url-pointing-to/second_stream.m3u8\")); player.load(playlist); Playlist class was removed in favor of a simple List Loading a Stream with an Advertising Schedule Loading a stream with an advertising schedule containing one preroll and one midroll at 50%. 1.x 2.x SingleSource item = new SingleSource(\"http://url-to/media.m3u8\"); List AdBreak adSchedule = new ArrayList (); adSchedule.add(new AdBreak(AdBreak.PRE_ROLL, \"http://url-to/preroll.xml\")); adSchedule.add(new AdBreak(AdBreak.MID_ROLL, \"50%\", \"http://url-to/midroll.xml\")); Advertising advertising = new Advertising(); advertising.setListOfBreaks(adSchedule); item.setAdvertising(advertising); player.load(item); PlaylistItem plItem = new PlaylistItem(\"http://url-to/media.m3u8\"); List AdBreak adSchedule = new ArrayList (); adSchedule.add(new AdBreak(\"pre\", new Ad(AdSource.VAST, \"http://url-to/preroll.xml\"))); adSchedule.add(new AdBreak(\"50%\", new Ad(AdSource.VAST, \"http://url-to/midroll.xml\"))); plItem.setAdSchedule(adSchedule); player.load(plItem); Loading a Playlist with an Advertising Schedule for the Entire Playlist Loading a playlist with an advertising schedule for the entire playlist where the schedule contains one midroll at 10% and one at 30 seconds. 1.x 2.x List AdBreak adSchedule = new ArrayList (); adSchedule.add(new AdBreak(AdBreak.MID_ROLL, \"10%\", \"http://url-to/midroll1.xml\")); adSchedule.add(new AdBreak(AdBreak.MID_ROLL, \"30\", \"http://url-to/midroll2.xml\")); Advertising advertising = new Advertising(); advertising.setListOfBreaks(adSchedule); SingleSource item1 = new SingleSource(\"http://url-to/media.m3u8\"); item1.setAdvertising(advertising); SingleSource item2 = new SingleSource(\"http://url-to/second-media.m3u8\"); item2.setAdvertising(advertising); List JWMediaSource playlist = new ArrayList (); playlist.add(item1); playlist.add(item2); player.load(playlist); List PlaylistItem playlist = new ArrayList (); playlist.add(new PlaylistItem(\"http://url-to/media.m3u8\")); playlist.add(new PlaylistItem(\"http://url-to/second-media.m3u8\")); List AdBreak adSchedule = new ArrayList (); adSchedule.add(new AdBreak(\"10%\", new Ad(AdSource.VAST, \"http://url-to/midroll1.xml\"))); adSchedule.add(new AdBreak(\"30\", new Ad(AdSource.VAST, \"http://url-to/midroll2.xml\"))); Advertising advertising = new Advertising(AdSource.VAST, adSchedule); player.load(playlist, advertising);","title":"Examples"},{"location":"migration/examples/#examples","text":"These examples assume that you have a reference to a JWPlayerView called player.","title":"Examples"},{"location":"migration/examples/#loading-a-single-stream","text":"1.x 2.x Description of Changes player.load(new SingleSource(\"http://url-pointing-to/file.m3u8\")); player.load(new PlaylistItem(\"http://url-pointing-to/file.m3u8\")); Class names changed for SingleSource vs. PlaylistItem","title":"Loading a Single Stream"},{"location":"migration/examples/#loading-a-playlist","text":"1.x 2.x Description of Changes List JWMediaSource pl = new ArrayList (); pl.add(new SingleSource(\"http://url-pointing-to/first_stream.m3u8\")); pl.add(new SingleSource(\"http://url-pointing-to/second_stream.m3u8\")); player.load(pl); Playlist playlist = p.getPlayList(); List PlaylistItem playlist = new ArrayList (); playlist.add(new PlaylistItem(\"http://url-pointing-to/first_stream.m3u8\")); playlist.add(new PlaylistItem(\"http://url-pointing-to/second_stream.m3u8\")); player.load(playlist); Playlist class was removed in favor of a simple List","title":"Loading a Playlist"},{"location":"migration/examples/#loading-a-stream-with-an-advertising-schedule","text":"Loading a stream with an advertising schedule containing one preroll and one midroll at 50%. 1.x 2.x SingleSource item = new SingleSource(\"http://url-to/media.m3u8\"); List AdBreak adSchedule = new ArrayList (); adSchedule.add(new AdBreak(AdBreak.PRE_ROLL, \"http://url-to/preroll.xml\")); adSchedule.add(new AdBreak(AdBreak.MID_ROLL, \"50%\", \"http://url-to/midroll.xml\")); Advertising advertising = new Advertising(); advertising.setListOfBreaks(adSchedule); item.setAdvertising(advertising); player.load(item); PlaylistItem plItem = new PlaylistItem(\"http://url-to/media.m3u8\"); List AdBreak adSchedule = new ArrayList (); adSchedule.add(new AdBreak(\"pre\", new Ad(AdSource.VAST, \"http://url-to/preroll.xml\"))); adSchedule.add(new AdBreak(\"50%\", new Ad(AdSource.VAST, \"http://url-to/midroll.xml\"))); plItem.setAdSchedule(adSchedule); player.load(plItem);","title":"Loading a Stream with an Advertising Schedule"},{"location":"migration/examples/#loading-a-playlist-with-an-advertising-schedule-for-the-entire-playlist","text":"Loading a playlist with an advertising schedule for the entire playlist where the schedule contains one midroll at 10% and one at 30 seconds. 1.x 2.x List AdBreak adSchedule = new ArrayList (); adSchedule.add(new AdBreak(AdBreak.MID_ROLL, \"10%\", \"http://url-to/midroll1.xml\")); adSchedule.add(new AdBreak(AdBreak.MID_ROLL, \"30\", \"http://url-to/midroll2.xml\")); Advertising advertising = new Advertising(); advertising.setListOfBreaks(adSchedule); SingleSource item1 = new SingleSource(\"http://url-to/media.m3u8\"); item1.setAdvertising(advertising); SingleSource item2 = new SingleSource(\"http://url-to/second-media.m3u8\"); item2.setAdvertising(advertising); List JWMediaSource playlist = new ArrayList (); playlist.add(item1); playlist.add(item2); player.load(playlist); List PlaylistItem playlist = new ArrayList (); playlist.add(new PlaylistItem(\"http://url-to/media.m3u8\")); playlist.add(new PlaylistItem(\"http://url-to/second-media.m3u8\")); List AdBreak adSchedule = new ArrayList (); adSchedule.add(new AdBreak(\"10%\", new Ad(AdSource.VAST, \"http://url-to/midroll1.xml\"))); adSchedule.add(new AdBreak(\"30\", new Ad(AdSource.VAST, \"http://url-to/midroll2.xml\"))); Advertising advertising = new Advertising(AdSource.VAST, adSchedule); player.load(playlist, advertising);","title":"Loading a Playlist with an Advertising Schedule for the Entire Playlist"},{"location":"migration/fullscreen-handler/","text":"Fullscreen Handler It is possible to override the default fullscreen behavior. To do this simply implement the FullscreenHandler interface or extend the DefaultFullscreenHandler class and override any or all of these methods: Method Description onFullscreenRequested() Called when the player should enter fullscreen. onFullscreenExitRequested() Called when the player should exit fullscreen. onResume() Called when the activity containing the JWPlayerView is resumed. You could use this to register Orientation listeners. onPause() Called when the activity containing the JWPlayerView is paused. You could use this to unregister Orientation listeners. onDestroy() Called when the activity containing the JWPlayerView is destroyed. You could use this to release resources that the FullscreenHandler holds on to. onAllowRotationChanged(boolean allowRotation) Called when the \"allow rotation\" property of the JWPlayerView has changed, use this to determine whether your FullscreenHandler implementation should listen for device orientation changes. updateLayoutParams(ViewGroup.LayoutParams layoutParms) Called when the layout parameters of the JWPlayerView have been updated. You could use these to restore the player when exiting fullscreen. setUseFullscreenLayoutFlags(boolean flags) Called when JWPlayerView#setUseFullscreenLayoutFlags is called, use this to determine whether you should use the SYSTEM_UI_FLAG_FULLSCREEN and SYSTEM_UI_FLAG_HIDE_NAVIGATION flags in calls to setSystemUiVisibility. We also offer an alternative FullscreenHandler implementation MaximizingFullscreenHandler , if the DefaultFullscreenHandler does not fit your use-case you may want to try the MaximizingFullscreenHandler before writing your own implementation. For more information see the Javadocs .","title":"Fullscreen Handler"},{"location":"migration/fullscreen-handler/#fullscreen-handler","text":"It is possible to override the default fullscreen behavior. To do this simply implement the FullscreenHandler interface or extend the DefaultFullscreenHandler class and override any or all of these methods: Method Description onFullscreenRequested() Called when the player should enter fullscreen. onFullscreenExitRequested() Called when the player should exit fullscreen. onResume() Called when the activity containing the JWPlayerView is resumed. You could use this to register Orientation listeners. onPause() Called when the activity containing the JWPlayerView is paused. You could use this to unregister Orientation listeners. onDestroy() Called when the activity containing the JWPlayerView is destroyed. You could use this to release resources that the FullscreenHandler holds on to. onAllowRotationChanged(boolean allowRotation) Called when the \"allow rotation\" property of the JWPlayerView has changed, use this to determine whether your FullscreenHandler implementation should listen for device orientation changes. updateLayoutParams(ViewGroup.LayoutParams layoutParms) Called when the layout parameters of the JWPlayerView have been updated. You could use these to restore the player when exiting fullscreen. setUseFullscreenLayoutFlags(boolean flags) Called when JWPlayerView#setUseFullscreenLayoutFlags is called, use this to determine whether you should use the SYSTEM_UI_FLAG_FULLSCREEN and SYSTEM_UI_FLAG_HIDE_NAVIGATION flags in calls to setSystemUiVisibility. We also offer an alternative FullscreenHandler implementation MaximizingFullscreenHandler , if the DefaultFullscreenHandler does not fit your use-case you may want to try the MaximizingFullscreenHandler before writing your own implementation. For more information see the Javadocs .","title":"Fullscreen Handler"},{"location":"migration/intro/","text":"Introduction This short guide will walk you through migrating your implementation of the JW Player SDK for Android 1.x to the latest version.","title":"Introduction"},{"location":"migration/intro/#introduction","text":"This short guide will walk you through migrating your implementation of the JW Player SDK for Android 1.x to the latest version.","title":"Introduction"},{"location":"migration/license-key/","text":"License Key Your 1.x license key will not work with the JW Player SDK for Android 2.0 and above. You can get your new mobile-only license key from the JW Player Dashboard.","title":"License Key"},{"location":"migration/license-key/#license-key","text":"Your 1.x license key will not work with the JW Player SDK for Android 2.0 and above. You can get your new mobile-only license key from the JW Player Dashboard.","title":"License Key"},{"location":"migration/media-classes/","text":"","title":"Media classes"},{"location":"migration/v2-8/","text":"JW Player SDK for Android Migration from v2.7 to v2.8 (Feb 22 2018) Beginning with JW Player SDK for Android version 2.8.0, we have upgraded to ExoPlayer v2 . In updating ExoPlayer from version 1.x to 2.x, we made an effort to keep most of the changes under the hood and the interfaces unchanged. Nevertheless, there are still some code-changes that are required for the following scenarios: 1. If you use the method JWPlayerView.addOnMetaListener() please note the import changes below: ExoPlayer v1.x ExoPlayer v2.x import com.google.android.exoplayer.metadata.id3.BinaryFrame; import com.google.android. exoplayer2 .metadata.id3.BinaryFrame; import com.google.android.exoplayer.metadata.id3.GeobFrame; import com.google.android. exoplayer2 .metadata.id3.GeobFrame; import com.google.android.exoplayer.metadata.id3.Id3Frame; import com.google.android. exoplayer2 .metadata.id3.Id3Frame; import com.google.android.exoplayer.metadata.id3.PrivFrame; import com.google.android. exoplayer2 .metadata.id3.PrivFrame; import com.google.android.exoplayer.metadata.id3.TxxxFrame; import com.google.android.exoplayer2.metadata.id3.TextInformationFrame; Please be aware that TxxxFrame was renamed to TextInformationFrame. 2. If you use MediaDrmCallback please note the object import changes according to the table below: ExoPlayer v1.x ExoPlayer v2.x import android.media.MediaDrm.KeyRequest; import com.google.android.exoplayer2.drm.ExoMediaDrm; import android.media.MediaDrm.ProvisionRequest; import com.google.android.exoplayer2.drm.ExoMediaDrm; Please note that com.google.android.exoplayer.util.Util is no longer available in ExoPlayer v2.x. You may add it to your code manually if required. Please refer to our demo app Required for Everyone If the two conditions described above do not apply to your application, then neither changes to code or configuration files are required. Just change the JW Player SDK version in your dependencies (from 2.7.x to 2.8.x) and enjoy all the benefits of ExoPlayer v2!","title":"Migration from v2.7 to v2.8 (Feb 22 2018)"},{"location":"migration/v2-8/#jw-player-sdk-for-android-migration-from-v27-to-v28-feb-22-2018","text":"Beginning with JW Player SDK for Android version 2.8.0, we have upgraded to ExoPlayer v2 . In updating ExoPlayer from version 1.x to 2.x, we made an effort to keep most of the changes under the hood and the interfaces unchanged. Nevertheless, there are still some code-changes that are required for the following scenarios:","title":"JW Player SDK for Android Migration from v2.7 to v2.8 (Feb 22 2018)"},{"location":"migration/v2-8/#1-if-you-use-the-method-jwplayerviewaddonmetalistener-please-note-the-import-changes-below","text":"ExoPlayer v1.x ExoPlayer v2.x import com.google.android.exoplayer.metadata.id3.BinaryFrame; import com.google.android. exoplayer2 .metadata.id3.BinaryFrame; import com.google.android.exoplayer.metadata.id3.GeobFrame; import com.google.android. exoplayer2 .metadata.id3.GeobFrame; import com.google.android.exoplayer.metadata.id3.Id3Frame; import com.google.android. exoplayer2 .metadata.id3.Id3Frame; import com.google.android.exoplayer.metadata.id3.PrivFrame; import com.google.android. exoplayer2 .metadata.id3.PrivFrame; import com.google.android.exoplayer.metadata.id3.TxxxFrame; import com.google.android.exoplayer2.metadata.id3.TextInformationFrame; Please be aware that TxxxFrame was renamed to TextInformationFrame.","title":"1. If you use the method JWPlayerView.addOnMetaListener() please note the import changes below:"},{"location":"migration/v2-8/#2-if-you-use-mediadrmcallback-please-note-the-object-import-changes-according-to-the-table-below","text":"ExoPlayer v1.x ExoPlayer v2.x import android.media.MediaDrm.KeyRequest; import com.google.android.exoplayer2.drm.ExoMediaDrm; import android.media.MediaDrm.ProvisionRequest; import com.google.android.exoplayer2.drm.ExoMediaDrm; Please note that com.google.android.exoplayer.util.Util is no longer available in ExoPlayer v2.x. You may add it to your code manually if required. Please refer to our demo app","title":"2. If you use MediaDrmCallback please note the object import changes according to the table below:"},{"location":"migration/v2-8/#required-for-everyone","text":"If the two conditions described above do not apply to your application, then neither changes to code or configuration files are required. Just change the JW Player SDK version in your dependencies (from 2.7.x to 2.8.x) and enjoy all the benefits of ExoPlayer v2!","title":"Required for Everyone"},{"location":"migration/v2/","text":"JW Player SDK for Android Migration from v1.x to v2.x (Nov 17 2015) This Migration Guide will walk you through all major changes from the 1.x versions of the JW Player SDK for Android. License Key Your 1.x license key will not work with the JW Player SDK for Android 2.0 and above. You can get your new mobile-only license key from the JW Player Dashboard. Added API Methods Method Description int getPlaylistIndex() Returns the index of the currently playing PlaylistItem. PlaylistItem getPlaylistItem(int index) Returns the PlaylistItem at the provided index. List Caption getCaptionsList() Returns the list of currently available captions tracks. int getCurrentCaptions() Returns the index of the currently selected captions track. setCurrentCaptions(int index) Sets which captions track to display. setSkin(Skin skin) Sets the player skin from the stock set of skins. setSkin(String skinUrl) Sets the player skin to the provided URL. onDestroy() Called from Activity.onDestroy() or Fragment.onDestroy(), handles resource cleanup. Modified API Methods Setup Related Methods Setup is primarly used to change the player configuration programmatically. It is also possible to update the playlist and advertising settings alongside other configuration changes. In order to get the current player configuration simply call: getConfig() - which will return the current configuration. Modify the configuration as you see fit and then load it into the player using setup() Load Related Methods If you would only like to change the playlist and advertising options without affecting any other settings use the load() methods, they are as follows: Method Description load(List PlaylistItem playlist, Advertising advertising) Used to load a playlist along with advertising options and an ad schedule. load(List PlaylistItem playlist) Used to load a playlist, note that each playlist item can have an advertising schedule. load(PlaylistItem playlistItem) Used to load a single playlist item. Return Types for Getters Method Description public List QualityLevel getQualityLevels() Switched to List from array. public List PlaylistItem getPlayList() Removed Playlist object in favor of List List AudioTrack getAudioTracks() Switched to List from array. long getPosition() getPosition now returns a long instead of an int. long getDuration() getDuration now returns a long instead of an int. Renamed Methods Method Description public void setControls(boolean controls) Method name changed from setControlBarVisibility() Method Signature Changes Method Description playAd(String... vasts) playAd() can now take multiple ad tags, if one ad tag fails to load the next will be attempted. Removed API Methods Method Description setEnableSetSystemUiVisibility(boolean enableSetSystemUiVisibility) Replaced with extending FullscreenHandler and setFullscreenHandler(). boolean isAutoStart() AutoStart is now controlled at the Playlist level. setAutoStart(boolean autoStart) AutoStart is now controlled at the Playlist level. boolean isRepeat() AutoRepeat is not controlled at the Playlist level. setRepeat(boolean repeat) AutoRepeat is not controlled at the Playlist level. release() No longer necessary, use onPause() , onResume() , and, onDestroy() Changes to Media Classes The names of some media classes have changed and some of their structures have been altered. The new names are: 1.x 2.x Description of Changes PlayerConfig This is a new class, it represents a player configuration and can include: controlbar, caption styling, logo, skin, and advertising settings. SingleSource and MultipleQualityMediaSource PlaylistItem This is the root class for a single piece of media in JW Player. It can contain URLs to captions tracks, media sources, and an ad schedule for this playlist item. MediaSource Used for multiple-source media, any number of these can be assigned to a single PlaylistItem Subtitle Caption Represents a caption track, any number of these can be assigned to a single PlaylistItem AdBreak AdBreak Represents an advertising break, contains a playback offset (pre, post, static midroll, or midroll %) and an Ad . Ad Has an AdSource of either VAST or IMA and contains any number of tags. Multiple tags are waterfalled - if one fails the next is attempted. Advertising Advertising or VMAPAdvertising these classes contain advertising-related settings (e.g. skip message) and can contain an advertising schedule that is applied to the entire playlist. Builders It is now possible to instantiate JWPlayerView and other Media Classes via a builder. Builders cover all of the configuration options that are possible for a class. And in case of the JWPlayerView the builder also supports all the possible XML attributes. Example: PlayerConfig playerConfig = new PlayerConfig.Builder() .logoFile( jw_logo.png ) .logoLink( http://jwplayer.com ) .autostart(true) .repeat(true) .build(); JWPlayerView p = new JWPlayerView(this, playerConfig); Will create a JW Player instance with a clickable logo, and autostart and autorepeat enabled. There are also builders for the Caption , MediaSource , and PlaylistItem classes. Added Callbacks Callback Description onCaptionsList(List Caption tracks) Fired when captions tracks are available. onSetupError(String message) Fired when an error occurs during player setup. onPlaylist(List PlaylistItem playlist) Fired when a Playlist is loaded into the player. onPlaylistItem(int index, PlaylistItem playlistItem) Fired when a PlaylistItem begins playing. onPlaylistComplete() Fired when the last item in a playlist finishes playing. onBeforePlay() Fired immediately after the user clicks Play but before playback begins. onBeforeComplete() Fired immediately before content finishes playing. Modified Callbacks 1.x 2.x Description of Changes onQualityLevels(QualityLevel[] levels) onQualityLevels(final List QualityLevel levels) Quality levels changed from array to List. onQualityChange(QualityLevel currentQuality) onQualityChange(int currentQuality) Quality level parameter changed from QualityLevel to index. onAudioTracks(AudioTrackLevel[] tracksLevels) onAudioTracks(final List AudioTrack audioTracks) Audio tracks changed from array to List. onAudioTrackChange(AudioTrackLevel currentAudioTrackLevel) onAudioTrackChange(int currentTrack) Audio track parameter changed from track to index. onSubtitleSelected(Subtitle subtitle) onCaptionsChange(int track, List Caption captions) Name changed from onSubtitleSelected(), track index added. onTime(int position, int duration) onTime(long position, long duration) Position and duration types changed from int to long. onFullscreen(boolean state, boolean userRequest) onFullscreen(boolean fullscreen) userRequest parameter removed. onMeta(Map String, String metaMap) onMeta(Metadata meta) Metadata is now returned using the Metadata class. onAdTime(String adTag, int position, int duration) onAdTime(String tag, long position, long duration, int sequence) Position and duration types changed from int to long. Sequence parameter added. onAdImpression(String adTag) onAdImpression(String tag, String creativeType, String adPosition) Added creativeType and adPosition parameters. onAdClick(String adTag, String url) onAdClick(String tag) Removed the URL parameter. onBuffer() onBuffer(PlayerState oldState) onBuffer now reports the state the player switched from. onIdle() onIdle(PlayerState oldState) onIdle now reports the state the player switched from. onPause() onPause(PlayerState oldState) onPause now reports the state the player switched from. onPlay() onPlay(PlayerState oldState) onPlay now reports the state the player switched from. onAdPlay(String adTag) onAdPlay(String tag, PlayerState oldState) onAdPlay now reports the state the player switched from. onAdPause(String adTag) onAdPause(String tag, PlayerState oldState) onAdPause now reports the state the player switched from. Removed Callbacks Callback Description onSubtitle(String subtitle) Display of individual subtitles is no longer reported. onAdFullscreen(boolean state, boolean userRequest) All fullscreen state changes are now reported through onFullscreen() onAdMeta(Map String, String metaMap) All metadata is now reported through onMeta() onAdBuffer(String adTag) onAdIdle(String adTag) onMediaSelected() Added Configuration Options XML Attribute Description jw_captions_color Hex color of the captions text. Is ffffff by default. jw_captions_fontSize Size of the captions text. Is 15 points by default. jw_captions_fontFamily Family of the captions text. Is sans by default. jw_captions_fontOpacity Alpha value of the captions text. Is 100 by default. jw_captions_backgroundColor Hex color of the caption characters background. Is 000000 by default. jw_captions_backgroundOpacity Alpha value of the caption characters background. Is 75 by default. jw_captions_edgeStyle Method by which the captions characters are separated from their background. jw_captions_windowColor Hex color of the background of the entire captions area. Is 000000 by default. jw_captions_windowOpacity Alpha value of the background of the entire captions area. Is 0 by default. jw_logo_file Location of an external JPG, PNG or GIF image to be used as watermark. We recommend using 24 bit PNG images with transparency, since they blend nicely with the video. jw_logo_hide By default (false), the logo remains visible all the time. When this option is set to true, the logo will automatically show and hide along with the other player controls. jw_logo_link HTTP URL to jump to when the watermark image is clicked (e.g. http://example.com/). If it is not set, a click on the watermark does nothing in particular. jw_logo_margin The distance of the logo from the edges of the display. The default is 8 pixels. jw_logo_position This sets the corner in which to display the watermark. Uses an enum that can be TOP_RIGHT (the default), TOP_LEFT, BOTTOM_RIGHT or BOTTOM_LEFT. Note the default position is preferred, since the logo won't interfere with the controlbar, captions, overlay ads and dock buttons. jw_skin_name The skin to use for styling the player. If not configured, we'll default our player to use the seven skin. Other available premade skins include six, five, beelden, vapor, roundster, bekle, stormtrooper, and glow. A live example showing each of these, as well as a deeper explanation of custom colors, can be found on our JW Player skin configuration page. jw_skin_active The color of active skin elements. This should be entered in either hex or x11 color format. jw_skin_inactive The color of inactive skin elements. Like the above active config, this should be entered in either hex or x11 color format. jw_skin_background The color of a skin's background portion. Like the above active config, this should be entered in either hex or x11 color format. jw_skin_url If using an external CSS file to style your player, this can be specified here. Note that with this configuration you will still need to specify the name of your skin and this may negatively impact the speed which your JW Player loads Modified Configuration Options 1.x 2.x Description of Changes jw_autoStart jw_autostart Start changed to lower case jw_posterURL jw_image Renamed Removed Configuration Options XML Attribute jw_controlsFullscreen jw_controlsQuality jw_controlsTimePlayed jw_controlsTotalDuration jw_controlsSeekEnabled jw_replayButtonEnabled jw_posterDrawable Fullscreen Handler It is possible to override the default fullscreen behavior. To do this simply implement the FullscreenHandler interface or extend the DefaultFullscreenHandler class and override any or all of these methods: Method Description onFullscreenRequested() Called when the player should enter fullscreen. onFullscreenExitRequested() Called when the player should exit fullscreen. onResume() Called when the activity containing the JWPlayerView is resumed. You could use this to register Orientation listeners. onPause() Called when the activity containing the JWPlayerView is paused. You could use this to unregister Orientation listeners. onDestroy() Called when the activity containing the JWPlayerView is destroyed. You could use this to release resources that the FullscreenHandler holds on to. onAllowRotationChanged(boolean allowRotation) Called when the \"allow rotation\" property of the JWPlayerView has changed, use this to determine whether your FullscreenHandler implementation should listen for device orientation changes. updateLayoutParams(ViewGroup.LayoutParams layoutParms) Called when the layout parameters of the JWPlayerView have been updated. You could use these to restore the player when exiting fullscreen. setUseFullscreenLayoutFlags(boolean flags) Called when JWPlayerView#setUseFullscreenLayoutFlags is called, use this to determine whether you should use the SYSTEM_UI_FLAG_FULLSCREEN and SYSTEM_UI_FLAG_HIDE_NAVIGATION flags in calls to setSystemUiVisibility. We also offer an alternative FullscreenHandler implementation MaximizingFullscreenHandler , if the DefaultFullscreenHandler does not fit your use-case you may want to try the MaximizingFullscreenHandler before writing your own implementation. For more information see the Javadocs . Examples These examples assume that you have a reference to a JWPlayerView called player. Loading a Single Stream 1.x 2.x Description of Changes player.load(new SingleSource(\"http://url-pointing-to/file.m3u8\")); player.load(new PlaylistItem(\"http://url-pointing-to/file.m3u8\")); Class names changed for SingleSource vs. PlaylistItem Loading a Playlist 1.x 2.x Description of Changes List JWMediaSource pl = new ArrayList (); pl.add(new SingleSource(\"http://url-pointing-to/first_stream.m3u8\")); pl.add(new SingleSource(\"http://url-pointing-to/second_stream.m3u8\")); player.load(pl); Playlist playlist = p.getPlayList(); List PlaylistItem playlist = new ArrayList (); playlist.add(new PlaylistItem(\"http://url-pointing-to/first_stream.m3u8\")); playlist.add(new PlaylistItem(\"http://url-pointing-to/second_stream.m3u8\")); player.load(playlist); Playlist class was removed in favor of a simple List Loading a Stream with an Advertising Schedule Loading a stream with an advertising schedule containing one preroll and one midroll at 50%. 1.x 2.x SingleSource item = new SingleSource(\"http://url-to/media.m3u8\"); List AdBreak adSchedule = new ArrayList (); adSchedule.add(new AdBreak(AdBreak.PRE_ROLL, \"http://url-to/preroll.xml\")); adSchedule.add(new AdBreak(AdBreak.MID_ROLL, \"50%\", \"http://url-to/midroll.xml\")); Advertising advertising = new Advertising(); advertising.setListOfBreaks(adSchedule); item.setAdvertising(advertising); player.load(item); PlaylistItem plItem = new PlaylistItem(\"http://url-to/media.m3u8\"); List AdBreak adSchedule = new ArrayList (); adSchedule.add(new AdBreak(\"pre\", new Ad(AdSource.VAST, \"http://url-to/preroll.xml\"))); adSchedule.add(new AdBreak(\"50%\", new Ad(AdSource.VAST, \"http://url-to/midroll.xml\"))); plItem.setAdSchedule(adSchedule); player.load(plItem); Loading a Playlist with an Advertising Schedule for the Entire Playlist Loading a playlist with an advertising schedule for the entire playlist where the schedule contains one midroll at 10% and one at 30 seconds. 1.x 2.x List AdBreak adSchedule = new ArrayList (); adSchedule.add(new AdBreak(AdBreak.MID_ROLL, \"10%\", \"http://url-to/midroll1.xml\")); adSchedule.add(new AdBreak(AdBreak.MID_ROLL, \"30\", \"http://url-to/midroll2.xml\")); Advertising advertising = new Advertising(); advertising.setListOfBreaks(adSchedule); SingleSource item1 = new SingleSource(\"http://url-to/media.m3u8\"); item1.setAdvertising(advertising); SingleSource item2 = new SingleSource(\"http://url-to/second-media.m3u8\"); item2.setAdvertising(advertising); List JWMediaSource playlist = new ArrayList (); playlist.add(item1); playlist.add(item2); player.load(playlist); List PlaylistItem playlist = new ArrayList (); playlist.add(new PlaylistItem(\"http://url-to/media.m3u8\")); playlist.add(new PlaylistItem(\"http://url-to/second-media.m3u8\")); List AdBreak adSchedule = new ArrayList (); adSchedule.add(new AdBreak(\"10%\", new Ad(AdSource.VAST, \"http://url-to/midroll1.xml\"))); adSchedule.add(new AdBreak(\"30\", new Ad(AdSource.VAST, \"http://url-to/midroll2.xml\"))); Advertising advertising = new Advertising(AdSource.VAST, adSchedule); player.load(playlist, advertising);","title":"Migration from v1.x to v2.x (Nov 17 2015)"},{"location":"migration/v2/#jw-player-sdk-for-android-migration-from-v1x-to-v2x-nov-17-2015","text":"This Migration Guide will walk you through all major changes from the 1.x versions of the JW Player SDK for Android.","title":"JW Player SDK for Android Migration from v1.x to v2.x (Nov 17 2015)"},{"location":"migration/v2/#license-key","text":"Your 1.x license key will not work with the JW Player SDK for Android 2.0 and above. You can get your new mobile-only license key from the JW Player Dashboard.","title":"License Key"},{"location":"migration/v2/#added-api-methods","text":"Method Description int getPlaylistIndex() Returns the index of the currently playing PlaylistItem. PlaylistItem getPlaylistItem(int index) Returns the PlaylistItem at the provided index. List Caption getCaptionsList() Returns the list of currently available captions tracks. int getCurrentCaptions() Returns the index of the currently selected captions track. setCurrentCaptions(int index) Sets which captions track to display. setSkin(Skin skin) Sets the player skin from the stock set of skins. setSkin(String skinUrl) Sets the player skin to the provided URL. onDestroy() Called from Activity.onDestroy() or Fragment.onDestroy(), handles resource cleanup.","title":"Added API Methods"},{"location":"migration/v2/#modified-api-methods","text":"","title":"Modified API Methods"},{"location":"migration/v2/#setup-related-methods","text":"Setup is primarly used to change the player configuration programmatically. It is also possible to update the playlist and advertising settings alongside other configuration changes. In order to get the current player configuration simply call: getConfig() - which will return the current configuration. Modify the configuration as you see fit and then load it into the player using setup()","title":"Setup Related Methods"},{"location":"migration/v2/#load-related-methods","text":"If you would only like to change the playlist and advertising options without affecting any other settings use the load() methods, they are as follows: Method Description load(List PlaylistItem playlist, Advertising advertising) Used to load a playlist along with advertising options and an ad schedule. load(List PlaylistItem playlist) Used to load a playlist, note that each playlist item can have an advertising schedule. load(PlaylistItem playlistItem) Used to load a single playlist item.","title":"Load Related Methods"},{"location":"migration/v2/#return-types-for-getters","text":"Method Description public List QualityLevel getQualityLevels() Switched to List from array. public List PlaylistItem getPlayList() Removed Playlist object in favor of List List AudioTrack getAudioTracks() Switched to List from array. long getPosition() getPosition now returns a long instead of an int. long getDuration() getDuration now returns a long instead of an int.","title":"Return Types for Getters"},{"location":"migration/v2/#renamed-methods","text":"Method Description public void setControls(boolean controls) Method name changed from setControlBarVisibility()","title":"Renamed Methods"},{"location":"migration/v2/#method-signature-changes","text":"Method Description playAd(String... vasts) playAd() can now take multiple ad tags, if one ad tag fails to load the next will be attempted.","title":"Method Signature Changes"},{"location":"migration/v2/#removed-api-methods","text":"Method Description setEnableSetSystemUiVisibility(boolean enableSetSystemUiVisibility) Replaced with extending FullscreenHandler and setFullscreenHandler(). boolean isAutoStart() AutoStart is now controlled at the Playlist level. setAutoStart(boolean autoStart) AutoStart is now controlled at the Playlist level. boolean isRepeat() AutoRepeat is not controlled at the Playlist level. setRepeat(boolean repeat) AutoRepeat is not controlled at the Playlist level. release() No longer necessary, use onPause() , onResume() , and, onDestroy()","title":"Removed API Methods"},{"location":"migration/v2/#changes-to-media-classes","text":"The names of some media classes have changed and some of their structures have been altered. The new names are: 1.x 2.x Description of Changes PlayerConfig This is a new class, it represents a player configuration and can include: controlbar, caption styling, logo, skin, and advertising settings. SingleSource and MultipleQualityMediaSource PlaylistItem This is the root class for a single piece of media in JW Player. It can contain URLs to captions tracks, media sources, and an ad schedule for this playlist item. MediaSource Used for multiple-source media, any number of these can be assigned to a single PlaylistItem Subtitle Caption Represents a caption track, any number of these can be assigned to a single PlaylistItem AdBreak AdBreak Represents an advertising break, contains a playback offset (pre, post, static midroll, or midroll %) and an Ad . Ad Has an AdSource of either VAST or IMA and contains any number of tags. Multiple tags are waterfalled - if one fails the next is attempted. Advertising Advertising or VMAPAdvertising these classes contain advertising-related settings (e.g. skip message) and can contain an advertising schedule that is applied to the entire playlist.","title":"Changes to Media Classes"},{"location":"migration/v2/#builders","text":"It is now possible to instantiate JWPlayerView and other Media Classes via a builder. Builders cover all of the configuration options that are possible for a class. And in case of the JWPlayerView the builder also supports all the possible XML attributes. Example: PlayerConfig playerConfig = new PlayerConfig.Builder() .logoFile( jw_logo.png ) .logoLink( http://jwplayer.com ) .autostart(true) .repeat(true) .build(); JWPlayerView p = new JWPlayerView(this, playerConfig); Will create a JW Player instance with a clickable logo, and autostart and autorepeat enabled. There are also builders for the Caption , MediaSource , and PlaylistItem classes.","title":"Builders"},{"location":"migration/v2/#added-callbacks","text":"Callback Description onCaptionsList(List Caption tracks) Fired when captions tracks are available. onSetupError(String message) Fired when an error occurs during player setup. onPlaylist(List PlaylistItem playlist) Fired when a Playlist is loaded into the player. onPlaylistItem(int index, PlaylistItem playlistItem) Fired when a PlaylistItem begins playing. onPlaylistComplete() Fired when the last item in a playlist finishes playing. onBeforePlay() Fired immediately after the user clicks Play but before playback begins. onBeforeComplete() Fired immediately before content finishes playing.","title":"Added Callbacks"},{"location":"migration/v2/#modified-callbacks","text":"1.x 2.x Description of Changes onQualityLevels(QualityLevel[] levels) onQualityLevels(final List QualityLevel levels) Quality levels changed from array to List. onQualityChange(QualityLevel currentQuality) onQualityChange(int currentQuality) Quality level parameter changed from QualityLevel to index. onAudioTracks(AudioTrackLevel[] tracksLevels) onAudioTracks(final List AudioTrack audioTracks) Audio tracks changed from array to List. onAudioTrackChange(AudioTrackLevel currentAudioTrackLevel) onAudioTrackChange(int currentTrack) Audio track parameter changed from track to index. onSubtitleSelected(Subtitle subtitle) onCaptionsChange(int track, List Caption captions) Name changed from onSubtitleSelected(), track index added. onTime(int position, int duration) onTime(long position, long duration) Position and duration types changed from int to long. onFullscreen(boolean state, boolean userRequest) onFullscreen(boolean fullscreen) userRequest parameter removed. onMeta(Map String, String metaMap) onMeta(Metadata meta) Metadata is now returned using the Metadata class. onAdTime(String adTag, int position, int duration) onAdTime(String tag, long position, long duration, int sequence) Position and duration types changed from int to long. Sequence parameter added. onAdImpression(String adTag) onAdImpression(String tag, String creativeType, String adPosition) Added creativeType and adPosition parameters. onAdClick(String adTag, String url) onAdClick(String tag) Removed the URL parameter. onBuffer() onBuffer(PlayerState oldState) onBuffer now reports the state the player switched from. onIdle() onIdle(PlayerState oldState) onIdle now reports the state the player switched from. onPause() onPause(PlayerState oldState) onPause now reports the state the player switched from. onPlay() onPlay(PlayerState oldState) onPlay now reports the state the player switched from. onAdPlay(String adTag) onAdPlay(String tag, PlayerState oldState) onAdPlay now reports the state the player switched from. onAdPause(String adTag) onAdPause(String tag, PlayerState oldState) onAdPause now reports the state the player switched from.","title":"Modified Callbacks"},{"location":"migration/v2/#removed-callbacks","text":"Callback Description onSubtitle(String subtitle) Display of individual subtitles is no longer reported. onAdFullscreen(boolean state, boolean userRequest) All fullscreen state changes are now reported through onFullscreen() onAdMeta(Map String, String metaMap) All metadata is now reported through onMeta() onAdBuffer(String adTag) onAdIdle(String adTag) onMediaSelected()","title":"Removed Callbacks"},{"location":"migration/v2/#added-configuration-options","text":"XML Attribute Description jw_captions_color Hex color of the captions text. Is ffffff by default. jw_captions_fontSize Size of the captions text. Is 15 points by default. jw_captions_fontFamily Family of the captions text. Is sans by default. jw_captions_fontOpacity Alpha value of the captions text. Is 100 by default. jw_captions_backgroundColor Hex color of the caption characters background. Is 000000 by default. jw_captions_backgroundOpacity Alpha value of the caption characters background. Is 75 by default. jw_captions_edgeStyle Method by which the captions characters are separated from their background. jw_captions_windowColor Hex color of the background of the entire captions area. Is 000000 by default. jw_captions_windowOpacity Alpha value of the background of the entire captions area. Is 0 by default. jw_logo_file Location of an external JPG, PNG or GIF image to be used as watermark. We recommend using 24 bit PNG images with transparency, since they blend nicely with the video. jw_logo_hide By default (false), the logo remains visible all the time. When this option is set to true, the logo will automatically show and hide along with the other player controls. jw_logo_link HTTP URL to jump to when the watermark image is clicked (e.g. http://example.com/). If it is not set, a click on the watermark does nothing in particular. jw_logo_margin The distance of the logo from the edges of the display. The default is 8 pixels. jw_logo_position This sets the corner in which to display the watermark. Uses an enum that can be TOP_RIGHT (the default), TOP_LEFT, BOTTOM_RIGHT or BOTTOM_LEFT. Note the default position is preferred, since the logo won't interfere with the controlbar, captions, overlay ads and dock buttons. jw_skin_name The skin to use for styling the player. If not configured, we'll default our player to use the seven skin. Other available premade skins include six, five, beelden, vapor, roundster, bekle, stormtrooper, and glow. A live example showing each of these, as well as a deeper explanation of custom colors, can be found on our JW Player skin configuration page. jw_skin_active The color of active skin elements. This should be entered in either hex or x11 color format. jw_skin_inactive The color of inactive skin elements. Like the above active config, this should be entered in either hex or x11 color format. jw_skin_background The color of a skin's background portion. Like the above active config, this should be entered in either hex or x11 color format. jw_skin_url If using an external CSS file to style your player, this can be specified here. Note that with this configuration you will still need to specify the name of your skin and this may negatively impact the speed which your JW Player loads","title":"Added Configuration Options"},{"location":"migration/v2/#modified-configuration-options","text":"1.x 2.x Description of Changes jw_autoStart jw_autostart Start changed to lower case jw_posterURL jw_image Renamed","title":"Modified Configuration Options"},{"location":"migration/v2/#removed-configuration-options","text":"XML Attribute jw_controlsFullscreen jw_controlsQuality jw_controlsTimePlayed jw_controlsTotalDuration jw_controlsSeekEnabled jw_replayButtonEnabled jw_posterDrawable","title":"Removed Configuration Options"},{"location":"migration/v2/#fullscreen-handler","text":"It is possible to override the default fullscreen behavior. To do this simply implement the FullscreenHandler interface or extend the DefaultFullscreenHandler class and override any or all of these methods: Method Description onFullscreenRequested() Called when the player should enter fullscreen. onFullscreenExitRequested() Called when the player should exit fullscreen. onResume() Called when the activity containing the JWPlayerView is resumed. You could use this to register Orientation listeners. onPause() Called when the activity containing the JWPlayerView is paused. You could use this to unregister Orientation listeners. onDestroy() Called when the activity containing the JWPlayerView is destroyed. You could use this to release resources that the FullscreenHandler holds on to. onAllowRotationChanged(boolean allowRotation) Called when the \"allow rotation\" property of the JWPlayerView has changed, use this to determine whether your FullscreenHandler implementation should listen for device orientation changes. updateLayoutParams(ViewGroup.LayoutParams layoutParms) Called when the layout parameters of the JWPlayerView have been updated. You could use these to restore the player when exiting fullscreen. setUseFullscreenLayoutFlags(boolean flags) Called when JWPlayerView#setUseFullscreenLayoutFlags is called, use this to determine whether you should use the SYSTEM_UI_FLAG_FULLSCREEN and SYSTEM_UI_FLAG_HIDE_NAVIGATION flags in calls to setSystemUiVisibility. We also offer an alternative FullscreenHandler implementation MaximizingFullscreenHandler , if the DefaultFullscreenHandler does not fit your use-case you may want to try the MaximizingFullscreenHandler before writing your own implementation. For more information see the Javadocs .","title":"Fullscreen Handler"},{"location":"migration/v2/#examples","text":"These examples assume that you have a reference to a JWPlayerView called player.","title":"Examples"},{"location":"migration/v2/#loading-a-single-stream","text":"1.x 2.x Description of Changes player.load(new SingleSource(\"http://url-pointing-to/file.m3u8\")); player.load(new PlaylistItem(\"http://url-pointing-to/file.m3u8\")); Class names changed for SingleSource vs. PlaylistItem","title":"Loading a Single Stream"},{"location":"migration/v2/#loading-a-playlist","text":"1.x 2.x Description of Changes List JWMediaSource pl = new ArrayList (); pl.add(new SingleSource(\"http://url-pointing-to/first_stream.m3u8\")); pl.add(new SingleSource(\"http://url-pointing-to/second_stream.m3u8\")); player.load(pl); Playlist playlist = p.getPlayList(); List PlaylistItem playlist = new ArrayList (); playlist.add(new PlaylistItem(\"http://url-pointing-to/first_stream.m3u8\")); playlist.add(new PlaylistItem(\"http://url-pointing-to/second_stream.m3u8\")); player.load(playlist); Playlist class was removed in favor of a simple List","title":"Loading a Playlist"},{"location":"migration/v2/#loading-a-stream-with-an-advertising-schedule","text":"Loading a stream with an advertising schedule containing one preroll and one midroll at 50%. 1.x 2.x SingleSource item = new SingleSource(\"http://url-to/media.m3u8\"); List AdBreak adSchedule = new ArrayList (); adSchedule.add(new AdBreak(AdBreak.PRE_ROLL, \"http://url-to/preroll.xml\")); adSchedule.add(new AdBreak(AdBreak.MID_ROLL, \"50%\", \"http://url-to/midroll.xml\")); Advertising advertising = new Advertising(); advertising.setListOfBreaks(adSchedule); item.setAdvertising(advertising); player.load(item); PlaylistItem plItem = new PlaylistItem(\"http://url-to/media.m3u8\"); List AdBreak adSchedule = new ArrayList (); adSchedule.add(new AdBreak(\"pre\", new Ad(AdSource.VAST, \"http://url-to/preroll.xml\"))); adSchedule.add(new AdBreak(\"50%\", new Ad(AdSource.VAST, \"http://url-to/midroll.xml\"))); plItem.setAdSchedule(adSchedule); player.load(plItem);","title":"Loading a Stream with an Advertising Schedule"},{"location":"migration/v2/#loading-a-playlist-with-an-advertising-schedule-for-the-entire-playlist","text":"Loading a playlist with an advertising schedule for the entire playlist where the schedule contains one midroll at 10% and one at 30 seconds. 1.x 2.x List AdBreak adSchedule = new ArrayList (); adSchedule.add(new AdBreak(AdBreak.MID_ROLL, \"10%\", \"http://url-to/midroll1.xml\")); adSchedule.add(new AdBreak(AdBreak.MID_ROLL, \"30\", \"http://url-to/midroll2.xml\")); Advertising advertising = new Advertising(); advertising.setListOfBreaks(adSchedule); SingleSource item1 = new SingleSource(\"http://url-to/media.m3u8\"); item1.setAdvertising(advertising); SingleSource item2 = new SingleSource(\"http://url-to/second-media.m3u8\"); item2.setAdvertising(advertising); List JWMediaSource playlist = new ArrayList (); playlist.add(item1); playlist.add(item2); player.load(playlist); List PlaylistItem playlist = new ArrayList (); playlist.add(new PlaylistItem(\"http://url-to/media.m3u8\")); playlist.add(new PlaylistItem(\"http://url-to/second-media.m3u8\")); List AdBreak adSchedule = new ArrayList (); adSchedule.add(new AdBreak(\"10%\", new Ad(AdSource.VAST, \"http://url-to/midroll1.xml\"))); adSchedule.add(new AdBreak(\"30\", new Ad(AdSource.VAST, \"http://url-to/midroll2.xml\"))); Advertising advertising = new Advertising(AdSource.VAST, adSchedule); player.load(playlist, advertising);","title":"Loading a Playlist with an Advertising Schedule for the Entire Playlist"},{"location":"migration/v3/","text":"JW Player SDK for Android Migration from v2.x to v3.x This Migration Guide will walk you through all major changes from the 2.x versions of the JW Player SDK for Android. License Key Download Your 2.x license key will not work with the JW Player SDK for Android 3.0 and above. You can get your new mobile-only license key from your JW Player account representative. You may currently use Maven to update to 3.x, or your account rep can also provide you an AAR file. Starting July 9th, 2018 both the AAR 3.x license keys will be available for download in your JW Player Dashboard. API Summary The 3.x release of the JW Player SDK for Android contain some API changes, most importantly: The time unit in seek() , getPosition() , getDuration() , onTime(TimeEvent) , onAdTime(AdTimeEvent) , onSeek(SeekEvent) , onSeeked(SeekedEvent) , and onBufferChange(BufferChangeEvent) has changed from milliseconds to seconds as a double . All API callbacks now use the form onCallbackName(CallbackNameEvent callbackNameEvent) . This will allow JW Player to add more callback parameters without breaking existing implementations or maintaining several different implementations of the same callback. If you were already using an OnCallbackNameV2 listener removing the V2 should make your code work with 3.x. The Ad class has been removed and rolled into the AdBreak class. The AdBreak has a constructor AdBreak(String offset, AdSource adSource, String... tags) that can be used to easily combine Ad and AdBreak creation. API Changes Added API Methods Method Description void next() Tells JW Player to immediately play the next playlist item. void pauseAd() Pauses ad playback. void pauseAd(boolean state) Pauses or resumes ad playback. openSharingOverlay() Opens the sharing plugin. This will also pause content if it is triggered during playback. void closeSharingOverlay() Closes the sharing plugin if it is opened. This will resume playback if the sharing overlay was triggered during content. PlaylistItem getPlaylistItem() Returns the currently playing PlaylistItem. int getBuffer() Gets the current buffer percentage of the loaded media. Modified API Methods 1.x 2.x Description of Changes long getPosition() double getPosition() Changed time unit from milliseconds to seconds. long getDuration() double getDuration() Changed time unit from milliseconds to seconds. long getAdPosition() double getAdPosition() Changed time unit from milliseconds to seconds. void seek(long position) void seek(double position) Changed time unit from milliseconds to seconds. VisualQuality getVisualQuality() VisualQualityEvent getVisualQuality() Changed class name. Removed API Methods Method Description void play(boolean state) Use play() to play and pause() to pause playback. void pause(boolean state) Use pause() to pause and play() to play playback. void seek(int position) seek() uses seconds as a double now. Configuration Changes CaptionsConfig , SkinConfig , LogoConfig , and RelatedConfig have been broken out of PlayerConfig , these classes have their own builders and can be assigned to a PlayerConfig . SharingConfig has been added to allow configuration of the Sharing plugin. Added XML Configuration Options Option Description jw_nextUpOffset How many seconds before content playback ends should the Next Up display show for. jw_display_title Whether to display the media title before playback. jw_display_description Whether to display the media description before playback. jw_nextUpDisplay Whether to display the Next Up popup before playback ends. jw_skin_controlbar_text The color of any plain text in the control bar, such as the time. jw_skin_controlbar_icons The default, inactive color of all icons in the control bar. This option also controls the color of the play, pause, and replay icons in the inactive and complete states. jw_skin_controlbar_iconsActive The color of hovered or selected icons in the control bar. jw_skin_controlbar_background The background color of the control bar and the volume slider. The default background is transparent. jw_skin_timeslider_progress The color of the bar in the time slider filled in from the beginning of the video through the current position. The buffer region of the control bar is 50% of the opacity of this color. The color of the volume slider is also controlled by this option. jw_skin_timeslider_rail The color of the base of the timeslider, known as the rail. jw_skin_menus_text The color of inactive, default text in menus and the Next Up overlay. jw_skin_menus_textActive The color of hovered or selected text in menus. This option also controls the text color in the Discover overlay and the hover state text color in the Next Up overlay. jw_skin_menus_background The background color of menus and the Next Up overlay. jw_skin_tooltips_text The text color of tooltips. jw_skin_tooltips_background The background color of tooltips. jw_related_displayMode Configure the recommendations user interface. Does not apply to manual playlists. Must be one of the RELATED_DISPLAY_MODE_ constants. jw_related_onClick The behavior when a related video is selected. Must be one of the RELATED_DISPLAY_ON_CLICK_ constants. jw_sharing_link URL to display in the video link field. jw_sharing_code Embed code to display in the embed code field. If no code is set, the field is not shown. jw_sharing_heading Short, instructive text to display at the top of the sharing screen. Modified XML Configuration Options Option Description jw_mute Changed type to boolean. jw_autostart Changed type to boolean. jw_repeat Changed type to boolean. jw_controls Changed type to boolean. jw_preload Changed type to boolean. jw_captions_fontSize Changed type to integer. jw_captions_fontOpacity Changed type to integer. jw_captions_backgroundOpacity Changed type to integer. jw_captions_windowOpacity Changed type to integer. jw_logo_hide Changed type to boolean. jw_logo_margin Changed type to integer. Callback Changes Added Callbacks Callback Description void onReady(ReadyEvent) Signifies when the player has been initialized and is ready for playback. This is the earliest point at which any API calls should be made. void onAdBreakStart(AdBreakStartEvent) Fires after the ad request and immediately before the ad is loaded into the player. Only fires before the first ad inside of an ad break. void onAdBreakEnd(AdBreakEndEvent) Fires after the ad request and immediately before the ad is loaded into the player. Only fires before the first ad inside of an ad break. void onSharingOpen(SharingOpenEvent) Fires when the Sharing plugin is opened. void onSharingClose(SharingCloseEvent) Fires when the Sharing plugin is closed. void onSharingClick(SharingClickEvent) Triggered whenever somebody shares content from within the sharing plugin. void onSharingClick(SharingClickEvent) Triggered whenever somebody shares content from within the sharing plugin. Modified Callbacks All callbacks now use the form onCallbackName(CallbackNameEvent callbackNameEvent) . Removed Callbacks Callback void onCaptionsChange(int track, List Caption captions) void onAudioTrackChange(int currentTrack) void onQualityChange(int currentQuality) void onQualityLevels(final List QualityLevel levels)","title":"Migration from v2.x to v3.x"},{"location":"migration/v3/#jw-player-sdk-for-android-migration-from-v2x-to-v3x","text":"This Migration Guide will walk you through all major changes from the 2.x versions of the JW Player SDK for Android.","title":"JW Player SDK for Android Migration from v2.x to v3.x"},{"location":"migration/v3/#license-key-download","text":"Your 2.x license key will not work with the JW Player SDK for Android 3.0 and above. You can get your new mobile-only license key from your JW Player account representative. You may currently use Maven to update to 3.x, or your account rep can also provide you an AAR file. Starting July 9th, 2018 both the AAR 3.x license keys will be available for download in your JW Player Dashboard.","title":"License Key &amp; Download"},{"location":"migration/v3/#api-summary","text":"The 3.x release of the JW Player SDK for Android contain some API changes, most importantly: The time unit in seek() , getPosition() , getDuration() , onTime(TimeEvent) , onAdTime(AdTimeEvent) , onSeek(SeekEvent) , onSeeked(SeekedEvent) , and onBufferChange(BufferChangeEvent) has changed from milliseconds to seconds as a double . All API callbacks now use the form onCallbackName(CallbackNameEvent callbackNameEvent) . This will allow JW Player to add more callback parameters without breaking existing implementations or maintaining several different implementations of the same callback. If you were already using an OnCallbackNameV2 listener removing the V2 should make your code work with 3.x. The Ad class has been removed and rolled into the AdBreak class. The AdBreak has a constructor AdBreak(String offset, AdSource adSource, String... tags) that can be used to easily combine Ad and AdBreak creation.","title":"API Summary"},{"location":"migration/v3/#api-changes","text":"","title":"API Changes"},{"location":"migration/v3/#added-api-methods","text":"Method Description void next() Tells JW Player to immediately play the next playlist item. void pauseAd() Pauses ad playback. void pauseAd(boolean state) Pauses or resumes ad playback. openSharingOverlay() Opens the sharing plugin. This will also pause content if it is triggered during playback. void closeSharingOverlay() Closes the sharing plugin if it is opened. This will resume playback if the sharing overlay was triggered during content. PlaylistItem getPlaylistItem() Returns the currently playing PlaylistItem. int getBuffer() Gets the current buffer percentage of the loaded media.","title":"Added API Methods"},{"location":"migration/v3/#modified-api-methods","text":"1.x 2.x Description of Changes long getPosition() double getPosition() Changed time unit from milliseconds to seconds. long getDuration() double getDuration() Changed time unit from milliseconds to seconds. long getAdPosition() double getAdPosition() Changed time unit from milliseconds to seconds. void seek(long position) void seek(double position) Changed time unit from milliseconds to seconds. VisualQuality getVisualQuality() VisualQualityEvent getVisualQuality() Changed class name.","title":"Modified API Methods"},{"location":"migration/v3/#removed-api-methods","text":"Method Description void play(boolean state) Use play() to play and pause() to pause playback. void pause(boolean state) Use pause() to pause and play() to play playback. void seek(int position) seek() uses seconds as a double now.","title":"Removed API Methods"},{"location":"migration/v3/#configuration-changes","text":"CaptionsConfig , SkinConfig , LogoConfig , and RelatedConfig have been broken out of PlayerConfig , these classes have their own builders and can be assigned to a PlayerConfig . SharingConfig has been added to allow configuration of the Sharing plugin.","title":"Configuration Changes"},{"location":"migration/v3/#added-xml-configuration-options","text":"Option Description jw_nextUpOffset How many seconds before content playback ends should the Next Up display show for. jw_display_title Whether to display the media title before playback. jw_display_description Whether to display the media description before playback. jw_nextUpDisplay Whether to display the Next Up popup before playback ends. jw_skin_controlbar_text The color of any plain text in the control bar, such as the time. jw_skin_controlbar_icons The default, inactive color of all icons in the control bar. This option also controls the color of the play, pause, and replay icons in the inactive and complete states. jw_skin_controlbar_iconsActive The color of hovered or selected icons in the control bar. jw_skin_controlbar_background The background color of the control bar and the volume slider. The default background is transparent. jw_skin_timeslider_progress The color of the bar in the time slider filled in from the beginning of the video through the current position. The buffer region of the control bar is 50% of the opacity of this color. The color of the volume slider is also controlled by this option. jw_skin_timeslider_rail The color of the base of the timeslider, known as the rail. jw_skin_menus_text The color of inactive, default text in menus and the Next Up overlay. jw_skin_menus_textActive The color of hovered or selected text in menus. This option also controls the text color in the Discover overlay and the hover state text color in the Next Up overlay. jw_skin_menus_background The background color of menus and the Next Up overlay. jw_skin_tooltips_text The text color of tooltips. jw_skin_tooltips_background The background color of tooltips. jw_related_displayMode Configure the recommendations user interface. Does not apply to manual playlists. Must be one of the RELATED_DISPLAY_MODE_ constants. jw_related_onClick The behavior when a related video is selected. Must be one of the RELATED_DISPLAY_ON_CLICK_ constants. jw_sharing_link URL to display in the video link field. jw_sharing_code Embed code to display in the embed code field. If no code is set, the field is not shown. jw_sharing_heading Short, instructive text to display at the top of the sharing screen.","title":"Added XML Configuration Options"},{"location":"migration/v3/#modified-xml-configuration-options","text":"Option Description jw_mute Changed type to boolean. jw_autostart Changed type to boolean. jw_repeat Changed type to boolean. jw_controls Changed type to boolean. jw_preload Changed type to boolean. jw_captions_fontSize Changed type to integer. jw_captions_fontOpacity Changed type to integer. jw_captions_backgroundOpacity Changed type to integer. jw_captions_windowOpacity Changed type to integer. jw_logo_hide Changed type to boolean. jw_logo_margin Changed type to integer.","title":"Modified XML Configuration Options"},{"location":"migration/v3/#callback-changes","text":"","title":"Callback Changes"},{"location":"migration/v3/#added-callbacks","text":"Callback Description void onReady(ReadyEvent) Signifies when the player has been initialized and is ready for playback. This is the earliest point at which any API calls should be made. void onAdBreakStart(AdBreakStartEvent) Fires after the ad request and immediately before the ad is loaded into the player. Only fires before the first ad inside of an ad break. void onAdBreakEnd(AdBreakEndEvent) Fires after the ad request and immediately before the ad is loaded into the player. Only fires before the first ad inside of an ad break. void onSharingOpen(SharingOpenEvent) Fires when the Sharing plugin is opened. void onSharingClose(SharingCloseEvent) Fires when the Sharing plugin is closed. void onSharingClick(SharingClickEvent) Triggered whenever somebody shares content from within the sharing plugin. void onSharingClick(SharingClickEvent) Triggered whenever somebody shares content from within the sharing plugin.","title":"Added Callbacks"},{"location":"migration/v3/#modified-callbacks","text":"All callbacks now use the form onCallbackName(CallbackNameEvent callbackNameEvent) .","title":"Modified Callbacks"},{"location":"migration/v3/#removed-callbacks","text":"Callback void onCaptionsChange(int track, List Caption captions) void onAudioTrackChange(int currentTrack) void onQualityChange(int currentQuality) void onQualityLevels(final List QualityLevel levels)","title":"Removed Callbacks"},{"location":"unstructured/methods/","text":"Methods Playback These methods are used to retrieve and change the current playback state of the Player: is the Player idle, buffering, playing or paused. load(JWMediaSource jwMediaSource) The load method will load a media from a provided URL. Similar to the view properties, the Load method contains optional poster url and internal drawable to show as poster images. Load media from a given JWMediaSource. This JWMediaSource can be a SingleSource if there is just a unique URL, or can be a MultipleQualityMediaSource if there are multiple qualities for a video. getState() Get the state of the Player (IDLE, BUFFERING, PLAYING, or PAUSED) IDLE: either playback has not started or playback was stopped (due to a stop() call or an error). Either the play or the error icon is visible in the display. BUFFERING: user pressed play, but sufficient data to start playback has to be loaded first. The buffering icon is visible in the display. PLAYING: the video is currently playing. No icon is visible in the display. PAUSED: the video is currently paused. The play icon is visible in the display. pause(state) Toggles playback of the Player. If the state is set true the Player will pause, if set false the Player will start playing and if omitted, the Player will toggle playback. play(state) Toggles playback of the Player. If the state is set true the Player will start playing, if set false the Player will pause and if omitted, the Player will toggle playback. playAd(url) In addition to using a VAST ad schedule (see the \u201cAdding VAST Ads\u201d section below), the SDK supports playing ads on an ad-hoc basis using the playAd() method. Simply specify the URL of the VAST tag and the ad will play immediately. stop() Stops the Player (returning it to the IDLE state) and unloads the currently playing media file. onPlay(callback) Fired when the Player enters the PLAYING state. Event attributes: oldstate (String): the state the Player moved from. Can be BUFFERING or PAUSED. onPause(callback) Fired when the Player enters the PAUSED state. Event attributes: oldstate (String): the state the Player moved from. Can be BUFFERING or PLAYING. onBuffer(callback) Fired when the Player enters the BUFFERING state. Event attributes: oldstate (String): the state the Player moved from. Can be IDLE, PLAYING or PAUSED. onIdle(callback) Fired when the Player enters the IDLE state. Event attributes: oldstate (String): the state the Player moved from. Can be BUFFERING, PLAYING or PAUSED. onComplete(callback) Fired when an item completes playback. It has no event attributes. onError(callback) Fired when a media error has occurred, causing the Player to stop playback and go into IDLE mode. Event attributes: message (String): The reason for the error. See section on Error Messages for a list of possible media errors. Seeking These methods are used to retrieve and update the current media playback position. getPosition() Get the current playback position (playhead) in milliseconds, or -1 if playback is not active getDuration() Get the duration of the current media in milliseconds, or -1 if unknown. Note that the duration is not available until the first frame of the media has played. seek(position) Jump to the specified position within the currently playing media. The position is required and must be provided as an integer, in milliseconds. onSeek(callback) Fired after a seek has been requested either by scrubbing the controlbar or through the API. Event attributes: position (Number): The position of the Player before the Player seeks (in milliseconds). offset (Number): The user requested position to seek to (in milliseconds). Note the actual position the Player will eventually seek to may differ, e.g. because HLS can only seek to fragment boundaries. onTime(callback) While the Player is playing, this event is fired as the playback position gets updated. This may occur as frequently as 10 times per second. Event attributes: duration(Number): Duration of the current item in milliseconds. position(Number): Playback position in milliseconds. Controls and Fullscreen The controls of the Player (buttons, etc) should be configured using the layout XML properties of JWPlayerView. See the JWPlayerView description under \u201cClasses and Methods.\u201d The following methods allow you to use fullscreen features of the Player. getFullscreen() Find out whether the Player is currently playing in fullscreen mode. Returns either true or false. setFullscreen(boolean state, boolean allowRotation) Switch to fullscreen mode or back to windowed mode. Method parameters are: state: Set to true to make the player fullscreen, false to make windowed mode. allowRotation: Set to true to allow rotation of the phone to enter/exit fullscreen, false if rotation should be locked or only changed by another call to setFullscreen(). onFullscreen(callback) Fired when the Player toggles to and from fullscreen. Event attributes: state (boolean): true for fullscreen, false for windowed mode userRequest (booelan): true if onFullscreen() was caused by the user tapping the fullscreen button, otherwise false. Autostart and Repeat The SDK exposes methods for controlling the Autostart and Repeat: setAutoStart(boolean) If set to true, the player will start media playback automatically. setRepeat(boolean) If set to true, the player will repeat the media (or playlist) automatically after completion. isAutoStart() Returns (true or false) whether or not the player is set to start media playback automatically. isRepeat() Returns (true or false) whether or not the player is set to repeat the media (or playlist) playback. Playlist The public methods for Playlist are: first() Plays the first item on the playlist Returns a boolean to indicate whether or not the operation was successful. getCurrent() Returns the current mediaSource in the playlist. getCurrentIndex() Returns the index of the current media list item that is playing. getLastIndex() Returns the index of the last media in the list. getSize() Returns the number of items in the playlist. isFinished() Returns a boolean indicating whether or not the playlist has finished (i.e., played the last item in the list). isFirst() Returns a boolean indicating whether or not the current media is the first in the playlist. isLast() Returns a boolean indicating whether or not the current media is the last in the playlist. last() Plays the last source on the playlist. Returns a boolean indicating whether or not the operation was successful. next() Plays the next source on the playlist. Returns a boolean indicating whether or not the operation was successful. previous() Plays the previous source on the playlist. Returns a boolean indicating whether or not the operation was successful. skipTo(index) Plays the media at the specified index in the playlist. index is an integer indicating the index of the video to be played. (Note that the index count starts at zero, not one.) Returns a boolean indicating whether or not the operation was successful. Quality The SDK exposes the Quality API calls to allow app developers to switch video stream quality manually. This could be in response to changing network conditions, a user action, or other event. Call attributes are the same as with the web-based JW Player. This API is only relevant if multiple quality levels of the video are available (for example, from an HLS master playlist). Note: Quality switching using the Quality API is not the same as automatic adaptive HLS. When you switch streams using the Quality API, the new media stream is loaded and the player seeks to the playhead position. getQualityLevels(List levels) Returns an array with quality levels from the Player. Each level is an object that contains a label property from the NAME attribute in the HLS playlist. getCurrentQuality() Return the index of the current quality level. setCurrentQuality(int index) The index of the desired quality level to set the Player to playback. onQualityLevels(List levels) Fired when the list of available quality levels is updated. E.g., happens shortly after a playlist item starts playing. onQualityChange(int currentQuality) Fired when the active quality level is changed. E.g., happens in response to a user clicking the controlbar quality menu or a script calling setCurrentQuality. Note: HLS Playlist Default Stream Variant The SDK always begins playback using the first stream variant in the HLS playlist. This is in accordance with the Apple recommended guidelines HLS (see https://developer.apple.com/library/ios/technotes/tn2224/_index.html ) and is true whether you are using adaptive HLS in Android 4.x or the JW Player HLS fallback provider. If you want to start playback with a variant other than the first variant, use the setCurrentQuality(int index) method in the Quality API. Note that this method cannot be called until onQualityLevels() method is called. Advertising onAdComplete(callback) Fired whenever an ad has completed playback. Event attributes: tag (String): The URL to the VAST XML file (ad tag) that is currently playing. onAdSkipped(callback) Fired whenever an ad has been skipped. Event attributes: tag (String): The URL to the VAST XML file (ad tag) that was skipped. onAdPlay(callback) Fired whenever an ad starts to be played. Event attributes: tag (String): The URL to the VAST XML file (ad tag) that was played. onAdPause(callback) Fired when the Ad Player enters the PAUSED state. Event attributes: tag (String): The URL to the VAST XML file (ad tag) that was paused. onAdBuffer(callback) Fired when the Ad Player enters the BUFFERING state. Event attributes: tag (String): The URL to the VAST XML file (ad tag) that was buffered. onAdError(callback) Fired whenever an error prevents the ad from playing. Event attributes: tag (String): The URL to the VAST XML file (ad tag) that had the error. message (String): The error message. The following error messages are possible: Invalid ad tag (e.g. invalid XML, broken VAST) Ad tag empty (e.g. no ad available after chasing the wrappers) No compatible creatives (e.g. only FLV video in HTML5) Error playing creative (e.g. a 404 on the MP4 video) Error loading ad tag (for all else) Unsupported wrapped VAST xml onAdImpression(callback) Fired whenever an ad starts playing back. At this point, the VAST tag is loaded and the creative selected. Event attributes: tag (String): The URL of the ad tag that is currently playing. onAdTime(callback) Fired while ad playback is in progress. Event attributes: tag (String): The URL of the ad tag that is currently playing. position (Number): The current playback position in the ad creative, in milliseconds. duration (Number): The total duration of the ad creative. onAdClick(callback) Fired whenever a user clicks an ad to be redirected to its landing page. Event attributes: tag (String): The URL of the ad tag that is currently playing. Captions The SDK supports adding caption tracks (subtitles) to video sources. At this time we support the following subtitle formats: SRT, WebVTT and TTML. To add text captions to a video source, create a Caption object using the default constructor and set it's properties. Caption englishCaptions = new Caption(); caption.setFile( https://url/to/caption/en-track.vtt ); caption.setLabel( English ); caption.setDefault(true); // In order to set this track as the default caption track After you've instantiated one or more caption tracks you can add it to a PlaylistItem : ArrayList Caption captionTracks = new ArrayList (); captionTracks.add(englishCaptions); playlistItem.setCaptions(captionTracks); Now you can load the playlistItem into the JWPlayerView and it will display the captions. Metadata The SDK broadcasts media metadata, these broadcasts allow developers to listen for metadata embedded in the current playing media file (e.g. dimensions, bitrates). To receive these broadcasts you must implement the VideoAdvertising.onMetaListener interface. And register the class that implements the interface onto the JWPlayerView. Example: Create a class that listens for Metadata: public class MetadataListener implements VideoPlayerEvents.OnMetaListener { private static final String TAG = MetadataListener ; /** * Fired when new metadata has been broadcasted by the player. * * @param meta the metadata */ @Override public void onMeta(Metadata meta) { // Prints Meta to logcat in JSON form Log.i(TAG, meta.toString()); } } Register the listener mPlayerView.addOnMetadataListener(MetadataListener); Note: the actual available metadata may differ between streaming standards and actual streams.","title":"Methods"},{"location":"unstructured/methods/#methods","text":"","title":"Methods"},{"location":"unstructured/methods/#playback","text":"These methods are used to retrieve and change the current playback state of the Player: is the Player idle, buffering, playing or paused. load(JWMediaSource jwMediaSource) The load method will load a media from a provided URL. Similar to the view properties, the Load method contains optional poster url and internal drawable to show as poster images. Load media from a given JWMediaSource. This JWMediaSource can be a SingleSource if there is just a unique URL, or can be a MultipleQualityMediaSource if there are multiple qualities for a video. getState() Get the state of the Player (IDLE, BUFFERING, PLAYING, or PAUSED) IDLE: either playback has not started or playback was stopped (due to a stop() call or an error). Either the play or the error icon is visible in the display. BUFFERING: user pressed play, but sufficient data to start playback has to be loaded first. The buffering icon is visible in the display. PLAYING: the video is currently playing. No icon is visible in the display. PAUSED: the video is currently paused. The play icon is visible in the display. pause(state) Toggles playback of the Player. If the state is set true the Player will pause, if set false the Player will start playing and if omitted, the Player will toggle playback. play(state) Toggles playback of the Player. If the state is set true the Player will start playing, if set false the Player will pause and if omitted, the Player will toggle playback. playAd(url) In addition to using a VAST ad schedule (see the \u201cAdding VAST Ads\u201d section below), the SDK supports playing ads on an ad-hoc basis using the playAd() method. Simply specify the URL of the VAST tag and the ad will play immediately. stop() Stops the Player (returning it to the IDLE state) and unloads the currently playing media file. onPlay(callback) Fired when the Player enters the PLAYING state. Event attributes: oldstate (String): the state the Player moved from. Can be BUFFERING or PAUSED. onPause(callback) Fired when the Player enters the PAUSED state. Event attributes: oldstate (String): the state the Player moved from. Can be BUFFERING or PLAYING. onBuffer(callback) Fired when the Player enters the BUFFERING state. Event attributes: oldstate (String): the state the Player moved from. Can be IDLE, PLAYING or PAUSED. onIdle(callback) Fired when the Player enters the IDLE state. Event attributes: oldstate (String): the state the Player moved from. Can be BUFFERING, PLAYING or PAUSED. onComplete(callback) Fired when an item completes playback. It has no event attributes. onError(callback) Fired when a media error has occurred, causing the Player to stop playback and go into IDLE mode. Event attributes: message (String): The reason for the error. See section on Error Messages for a list of possible media errors.","title":"Playback"},{"location":"unstructured/methods/#seeking","text":"These methods are used to retrieve and update the current media playback position. getPosition() Get the current playback position (playhead) in milliseconds, or -1 if playback is not active getDuration() Get the duration of the current media in milliseconds, or -1 if unknown. Note that the duration is not available until the first frame of the media has played. seek(position) Jump to the specified position within the currently playing media. The position is required and must be provided as an integer, in milliseconds. onSeek(callback) Fired after a seek has been requested either by scrubbing the controlbar or through the API. Event attributes: position (Number): The position of the Player before the Player seeks (in milliseconds). offset (Number): The user requested position to seek to (in milliseconds). Note the actual position the Player will eventually seek to may differ, e.g. because HLS can only seek to fragment boundaries. onTime(callback) While the Player is playing, this event is fired as the playback position gets updated. This may occur as frequently as 10 times per second. Event attributes: duration(Number): Duration of the current item in milliseconds. position(Number): Playback position in milliseconds.","title":"Seeking"},{"location":"unstructured/methods/#controls-and-fullscreen","text":"The controls of the Player (buttons, etc) should be configured using the layout XML properties of JWPlayerView. See the JWPlayerView description under \u201cClasses and Methods.\u201d The following methods allow you to use fullscreen features of the Player. getFullscreen() Find out whether the Player is currently playing in fullscreen mode. Returns either true or false. setFullscreen(boolean state, boolean allowRotation) Switch to fullscreen mode or back to windowed mode. Method parameters are: state: Set to true to make the player fullscreen, false to make windowed mode. allowRotation: Set to true to allow rotation of the phone to enter/exit fullscreen, false if rotation should be locked or only changed by another call to setFullscreen(). onFullscreen(callback) Fired when the Player toggles to and from fullscreen. Event attributes: state (boolean): true for fullscreen, false for windowed mode userRequest (booelan): true if onFullscreen() was caused by the user tapping the fullscreen button, otherwise false.","title":"Controls and Fullscreen"},{"location":"unstructured/methods/#autostart-and-repeat","text":"The SDK exposes methods for controlling the Autostart and Repeat: setAutoStart(boolean) If set to true, the player will start media playback automatically. setRepeat(boolean) If set to true, the player will repeat the media (or playlist) automatically after completion. isAutoStart() Returns (true or false) whether or not the player is set to start media playback automatically. isRepeat() Returns (true or false) whether or not the player is set to repeat the media (or playlist) playback.","title":"Autostart and Repeat"},{"location":"unstructured/methods/#playlist","text":"The public methods for Playlist are: first() Plays the first item on the playlist Returns a boolean to indicate whether or not the operation was successful. getCurrent() Returns the current mediaSource in the playlist. getCurrentIndex() Returns the index of the current media list item that is playing. getLastIndex() Returns the index of the last media in the list. getSize() Returns the number of items in the playlist. isFinished() Returns a boolean indicating whether or not the playlist has finished (i.e., played the last item in the list). isFirst() Returns a boolean indicating whether or not the current media is the first in the playlist. isLast() Returns a boolean indicating whether or not the current media is the last in the playlist. last() Plays the last source on the playlist. Returns a boolean indicating whether or not the operation was successful. next() Plays the next source on the playlist. Returns a boolean indicating whether or not the operation was successful. previous() Plays the previous source on the playlist. Returns a boolean indicating whether or not the operation was successful. skipTo(index) Plays the media at the specified index in the playlist. index is an integer indicating the index of the video to be played. (Note that the index count starts at zero, not one.) Returns a boolean indicating whether or not the operation was successful.","title":"Playlist"},{"location":"unstructured/methods/#quality","text":"The SDK exposes the Quality API calls to allow app developers to switch video stream quality manually. This could be in response to changing network conditions, a user action, or other event. Call attributes are the same as with the web-based JW Player. This API is only relevant if multiple quality levels of the video are available (for example, from an HLS master playlist). Note: Quality switching using the Quality API is not the same as automatic adaptive HLS. When you switch streams using the Quality API, the new media stream is loaded and the player seeks to the playhead position. getQualityLevels(List levels) Returns an array with quality levels from the Player. Each level is an object that contains a label property from the NAME attribute in the HLS playlist. getCurrentQuality() Return the index of the current quality level. setCurrentQuality(int index) The index of the desired quality level to set the Player to playback. onQualityLevels(List levels) Fired when the list of available quality levels is updated. E.g., happens shortly after a playlist item starts playing. onQualityChange(int currentQuality) Fired when the active quality level is changed. E.g., happens in response to a user clicking the controlbar quality menu or a script calling setCurrentQuality. Note: HLS Playlist Default Stream Variant The SDK always begins playback using the first stream variant in the HLS playlist. This is in accordance with the Apple recommended guidelines HLS (see https://developer.apple.com/library/ios/technotes/tn2224/_index.html ) and is true whether you are using adaptive HLS in Android 4.x or the JW Player HLS fallback provider. If you want to start playback with a variant other than the first variant, use the setCurrentQuality(int index) method in the Quality API. Note that this method cannot be called until onQualityLevels() method is called.","title":"Quality"},{"location":"unstructured/methods/#advertising","text":"onAdComplete(callback) Fired whenever an ad has completed playback. Event attributes: tag (String): The URL to the VAST XML file (ad tag) that is currently playing. onAdSkipped(callback) Fired whenever an ad has been skipped. Event attributes: tag (String): The URL to the VAST XML file (ad tag) that was skipped. onAdPlay(callback) Fired whenever an ad starts to be played. Event attributes: tag (String): The URL to the VAST XML file (ad tag) that was played. onAdPause(callback) Fired when the Ad Player enters the PAUSED state. Event attributes: tag (String): The URL to the VAST XML file (ad tag) that was paused. onAdBuffer(callback) Fired when the Ad Player enters the BUFFERING state. Event attributes: tag (String): The URL to the VAST XML file (ad tag) that was buffered. onAdError(callback) Fired whenever an error prevents the ad from playing. Event attributes: tag (String): The URL to the VAST XML file (ad tag) that had the error. message (String): The error message. The following error messages are possible: Invalid ad tag (e.g. invalid XML, broken VAST) Ad tag empty (e.g. no ad available after chasing the wrappers) No compatible creatives (e.g. only FLV video in HTML5) Error playing creative (e.g. a 404 on the MP4 video) Error loading ad tag (for all else) Unsupported wrapped VAST xml onAdImpression(callback) Fired whenever an ad starts playing back. At this point, the VAST tag is loaded and the creative selected. Event attributes: tag (String): The URL of the ad tag that is currently playing. onAdTime(callback) Fired while ad playback is in progress. Event attributes: tag (String): The URL of the ad tag that is currently playing. position (Number): The current playback position in the ad creative, in milliseconds. duration (Number): The total duration of the ad creative. onAdClick(callback) Fired whenever a user clicks an ad to be redirected to its landing page. Event attributes: tag (String): The URL of the ad tag that is currently playing.","title":"Advertising"},{"location":"unstructured/methods/#captions","text":"The SDK supports adding caption tracks (subtitles) to video sources. At this time we support the following subtitle formats: SRT, WebVTT and TTML. To add text captions to a video source, create a Caption object using the default constructor and set it's properties. Caption englishCaptions = new Caption(); caption.setFile( https://url/to/caption/en-track.vtt ); caption.setLabel( English ); caption.setDefault(true); // In order to set this track as the default caption track After you've instantiated one or more caption tracks you can add it to a PlaylistItem : ArrayList Caption captionTracks = new ArrayList (); captionTracks.add(englishCaptions); playlistItem.setCaptions(captionTracks); Now you can load the playlistItem into the JWPlayerView and it will display the captions.","title":"Captions"},{"location":"unstructured/methods/#metadata","text":"The SDK broadcasts media metadata, these broadcasts allow developers to listen for metadata embedded in the current playing media file (e.g. dimensions, bitrates). To receive these broadcasts you must implement the VideoAdvertising.onMetaListener interface. And register the class that implements the interface onto the JWPlayerView. Example: Create a class that listens for Metadata: public class MetadataListener implements VideoPlayerEvents.OnMetaListener { private static final String TAG = MetadataListener ; /** * Fired when new metadata has been broadcasted by the player. * * @param meta the metadata */ @Override public void onMeta(Metadata meta) { // Prints Meta to logcat in JSON form Log.i(TAG, meta.toString()); } } Register the listener mPlayerView.addOnMetadataListener(MetadataListener); Note: the actual available metadata may differ between streaming standards and actual streams.","title":"Metadata"},{"location":"unstructured/user-interface/","text":"User Interface Player States The following screens show the various playback states of the JW Player SDK for Android. Idle Before pressing play, the player displays the play icon. If a poster image is set for the media, that is also displayed. Paused When the player is paused, the control bar shows as well as the main play icon. Buffering While the player is buffering, the buffer icon shows along with the controlbar. Controlbar Tapping on the screen shows the controlbar. Replay After the video as completed, the replay icon is visible which allows that media file to be replayed. Error State If the player cannot play back a media file, the view displays an error message. Quality Menu If multiple qualities are available for an HLS stream, a viewer can manually switch or stay on Auto.","title":"User Interface"},{"location":"unstructured/user-interface/#user-interface","text":"","title":"User Interface"},{"location":"unstructured/user-interface/#player-states","text":"The following screens show the various playback states of the JW Player SDK for Android. Idle Before pressing play, the player displays the play icon. If a poster image is set for the media, that is also displayed. Paused When the player is paused, the control bar shows as well as the main play icon. Buffering While the player is buffering, the buffer icon shows along with the controlbar. Controlbar Tapping on the screen shows the controlbar. Replay After the video as completed, the replay icon is visible which allows that media file to be replayed. Error State If the player cannot play back a media file, the view displays an error message. Quality Menu If multiple qualities are available for an HLS stream, a viewer can manually switch or stay on Auto.","title":"Player States"},{"location":"usage/jwplayer-fragment/","text":"JWPlayerFragment Instead of directly adding the JWPlayerView to your layout we encourage you to add a JWPlayerFragment (or JWPlayerSupportFragment if you are using the support package) to your ViewGroup . The JWPlayerFragment makes it easier to get started with using the JWPlayer, it offers all the features that the JWPlayerView offers and on top of that it takes care of the JWPlayerView's lifecycle. Using the JWPlayerFragment is recommended, but for more control over the JWPlayerView lifecycle (eg. onResume) the JWPlayerView can be used directly. Adding the JWPlayerFragment to Your Activity's Layout There are several ways to add a JWPlayerFragment to your Activity's layout. You can attach the fragment through the layout xml and through native java code using the FragmentManager. XML Layout Example Add the fragment to your activities' layout xml: activity_fragment_example.xml : ?xml version= 1.0 encoding= utf-8 ? FrameLayout xmlns:android= http://schemas.android.com/apk/res/android xmlns:tools= http://schemas.android.com/tools android:layout_width= match_parent android:layout_height= match_parent fragment android:layout_width= match_parent android:layout_height= match_parent android:name= com.longtailvideo.jwplayer.JWPlayerFragment android:id= @+id/playerFragment tools:layout= @layout/jw_player_fragment_sample_layout / /FrameLayout Retrieve a handle to the JWPlayerFragment in your activity's onCreate method. If you want to see a preview of the fragment in your layout editor, add the Android tools namespace to your XML file and include tools:layout=\"@layout/jw_player_fragment_sample_layout\" in your fragment. FragmentExampleActivity.java : public class FragmentExampleActivity extends Activity { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); // Set the Activity's content view. setContentView(R.layout.activity_fragment_example); // Get a handle to the JWPlayerFragment JWPlayerFragment fragment = (JWPlayerFragment) getFragmentManager().findFragmentById(R.id.playerFragment); // Get a handle to the JWPlayerView JWPlayerView playerView = fragment.getPlayer(); // Create a PlaylistItem PlaylistItem video = new PlaylistItem( http://path/to/stream.mpd ); // Load a stream into the player playerView.load(video); } } Please note that you need to load a stream into the player in order for it to become visible. If you followed the above steps correctly, you now have a working JWPlayer in your Activity. Programmatically Instantiating a JWPlayerFragment It is also possible to programmatically instantiate a JWPlayerFragment. First make sure you have a ViewGroup defined in your XML where you can load the Fragment into. activity_fragment_example.xml : ?xml version= 1.0 encoding= utf-8 ? FrameLayout xmlns:android= http://schemas.android.com/apk/res/android android:layout_width= match_parent android:layout_height= match_parent android:id= @+id/fragmentContainer /FrameLayout Instantiate a JWPlayerFragment and programmatically add it to your layout. FragmentExampleActivity.java : public class FragmentExampleActivity extends Activity { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); // Set the Activity's content view. setContentView(R.layout.activity_fragment_example); // Build a player configuration PlayerConfig playerConfig = new PlayerConfig.Builder() .file( http://path/to/stream.mpd ) .build(); // Instantiate a new JWPlayerFragment using the playerConfig JWPlayerFragment fragment = JWPlayerFragment.newInstance(playerConfig); // Add fragment to layout FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.add(R.id.fragmentContainer, fragment); ft.commit(); } } Fullscreen By default, the JWPlayerFragment will automatically switch to fullscreen mode when the device is rotated into landscape mode. This behavior can be disabled (for example to support only manual fullscreen switches), using the setFullscreenOnDeviceRotate method. public class FragmentExampleActivity extends Activity { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); // Set the Activity's content view. setContentView(R.layout.activity_fragment_example); // Get a handle to the JWPlayerFragment JWPlayerFragment fragment = (JWPlayerFragment) getFragmentManager().findFragmentById(R.id.playerFragment); // Disable automatic fullscreen fragment.setFullscreenOnDeviceRotate(false); } } JWPlayerSupportFragment If you are using Android's SupportFragmentManager you should use the JWPlayerSupportFragment instead of the JWPlayerFragment .","title":"JWPlayerFragment"},{"location":"usage/jwplayer-fragment/#jwplayerfragment","text":"Instead of directly adding the JWPlayerView to your layout we encourage you to add a JWPlayerFragment (or JWPlayerSupportFragment if you are using the support package) to your ViewGroup . The JWPlayerFragment makes it easier to get started with using the JWPlayer, it offers all the features that the JWPlayerView offers and on top of that it takes care of the JWPlayerView's lifecycle. Using the JWPlayerFragment is recommended, but for more control over the JWPlayerView lifecycle (eg. onResume) the JWPlayerView can be used directly.","title":"JWPlayerFragment"},{"location":"usage/jwplayer-fragment/#adding-the-jwplayerfragment-to-your-activitys-layout","text":"There are several ways to add a JWPlayerFragment to your Activity's layout. You can attach the fragment through the layout xml and through native java code using the FragmentManager.","title":"Adding the JWPlayerFragment to Your Activity's Layout"},{"location":"usage/jwplayer-fragment/#xml-layout-example","text":"Add the fragment to your activities' layout xml: activity_fragment_example.xml : ?xml version= 1.0 encoding= utf-8 ? FrameLayout xmlns:android= http://schemas.android.com/apk/res/android xmlns:tools= http://schemas.android.com/tools android:layout_width= match_parent android:layout_height= match_parent fragment android:layout_width= match_parent android:layout_height= match_parent android:name= com.longtailvideo.jwplayer.JWPlayerFragment android:id= @+id/playerFragment tools:layout= @layout/jw_player_fragment_sample_layout / /FrameLayout Retrieve a handle to the JWPlayerFragment in your activity's onCreate method. If you want to see a preview of the fragment in your layout editor, add the Android tools namespace to your XML file and include tools:layout=\"@layout/jw_player_fragment_sample_layout\" in your fragment. FragmentExampleActivity.java : public class FragmentExampleActivity extends Activity { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); // Set the Activity's content view. setContentView(R.layout.activity_fragment_example); // Get a handle to the JWPlayerFragment JWPlayerFragment fragment = (JWPlayerFragment) getFragmentManager().findFragmentById(R.id.playerFragment); // Get a handle to the JWPlayerView JWPlayerView playerView = fragment.getPlayer(); // Create a PlaylistItem PlaylistItem video = new PlaylistItem( http://path/to/stream.mpd ); // Load a stream into the player playerView.load(video); } } Please note that you need to load a stream into the player in order for it to become visible. If you followed the above steps correctly, you now have a working JWPlayer in your Activity.","title":"XML Layout Example"},{"location":"usage/jwplayer-fragment/#programmatically-instantiating-a-jwplayerfragment","text":"It is also possible to programmatically instantiate a JWPlayerFragment. First make sure you have a ViewGroup defined in your XML where you can load the Fragment into. activity_fragment_example.xml : ?xml version= 1.0 encoding= utf-8 ? FrameLayout xmlns:android= http://schemas.android.com/apk/res/android android:layout_width= match_parent android:layout_height= match_parent android:id= @+id/fragmentContainer /FrameLayout Instantiate a JWPlayerFragment and programmatically add it to your layout. FragmentExampleActivity.java : public class FragmentExampleActivity extends Activity { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); // Set the Activity's content view. setContentView(R.layout.activity_fragment_example); // Build a player configuration PlayerConfig playerConfig = new PlayerConfig.Builder() .file( http://path/to/stream.mpd ) .build(); // Instantiate a new JWPlayerFragment using the playerConfig JWPlayerFragment fragment = JWPlayerFragment.newInstance(playerConfig); // Add fragment to layout FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.add(R.id.fragmentContainer, fragment); ft.commit(); } }","title":"Programmatically Instantiating a JWPlayerFragment"},{"location":"usage/jwplayer-fragment/#fullscreen","text":"By default, the JWPlayerFragment will automatically switch to fullscreen mode when the device is rotated into landscape mode. This behavior can be disabled (for example to support only manual fullscreen switches), using the setFullscreenOnDeviceRotate method. public class FragmentExampleActivity extends Activity { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); // Set the Activity's content view. setContentView(R.layout.activity_fragment_example); // Get a handle to the JWPlayerFragment JWPlayerFragment fragment = (JWPlayerFragment) getFragmentManager().findFragmentById(R.id.playerFragment); // Disable automatic fullscreen fragment.setFullscreenOnDeviceRotate(false); } }","title":"Fullscreen"},{"location":"usage/jwplayer-fragment/#jwplayersupportfragment","text":"If you are using Android's SupportFragmentManager you should use the JWPlayerSupportFragment instead of the JWPlayerFragment .","title":"JWPlayerSupportFragment"},{"location":"usage/jwplayer-view/","text":"JWPlayerView The JWPlayerView is the central UI component of our SDK. This class allows you to easily load new media into the player, manage video and audio playback via the Playback API and register multiple event listeners that could help you with custom analytics or error handling. Adding a JWPlayerView to your XML layout The JWPlayerView is available in the Graphical Layout Editor of Android Studio by navigating to Custom Custom Views in your palette. You can also add the view to your layout by adding these lines to your XML layout com.longtailvideo.jwplayer.JWPlayerView xmlns:jwp= http://schemas.android.com/apk/lib/com.longtailvideo.jwplayer android:layout_width= match_parent android:layout_height= match_parent android:id= @+id/playerView jwp:jw_autostart= true / An important thing to notice here is the jwp namespace. It allows you to setup your player with default settings such as autostart, file, repeat and more. For a full list of available options have a look at our XML options page. Once you have the JWPlayerView in your layout, you can now get a reference to it by using findViewById() . JWPlayerView playerView = (JWPlayerView) findViewById(R.id.playerView); Instantiating a JWPlayerView programmatically Instead of adding the JWPlayerView to your XML layout, you may also choose to programmatically instantiate it at any point. Programmatic instantiation requires you to build a PlayerConfig first. The PlayerConfig tells the player which features you'd like to setup with. PlayerConfig playerConfig = new PlayerConfig.Builder() .file( http://www.site.com/video/clip.mp4 ) .autostart(true) .build(); After instantiating the PlayerConfig you can then construct a JWPlayerView JWPlayerView playerView = new JWPlayerView(context, playerConfig); Finally, you must add the JWPlayerView to a ViewGroup ViewGroup jwPlayerViewContainer = (ViewGroup) findViewById(R.id.jwPlayerContainer); jwPlayerViewContainer.addView(playerView); Activity Lifecycle Handling In order to properly handle the Activity Lifecycle and release the player from memory when necessary, you must override the onPause() , onResume() and onDestroy() methods of the Activity containing the JWPlayerView as shown below. This configuration is not necessary when using JWPlayerFragment or JWPlayerSupportFragment since we already handle the lifecycle methods in those scenarios. @Override protected void onResume() { // Let JW Player know that the app has returned from the background super.onResume(); playerView.onResume(); } @Override protected void onPause() { // Let JW Player know that the app is going to the background playerView.onPause(); super.onPause(); } @Override protected void onDestroy() { // Let JW Player know that the app is being destroyed playerView.onDestroy(); super.onDestroy(); } Orientation Changes and Fullscreen Handling Handling orientation changes to enter fullscreen is fairly simple. We begin by overriding the onConfigurationChanged() method of the Activity containing the player and setting the player to fullscreen whenever the device is in landscape. @Override public void onConfigurationChanged(Configuration newConfig) { // Set fullscreen when the device is rotated to landscape playerView.setFullscreen(newConfig.orientation == Configuration.ORIENTATION_LANDSCAPE, true); super.onConfigurationChanged(newConfig); } Next, it is good practice to override the onKeyDown() method as well. This allow users to exit fullscreen whenever the back button is pressed. @Override public boolean onKeyDown(int keyCode, KeyEvent event) { // Exit fullscreen when the user pressed the Back button if (keyCode == KeyEvent.KEYCODE_BACK) { if (playerView.getFullscreen()) { playerView.setFullscreen(false, false); return false; } } return super.onKeyDown(keyCode, event); } Lastly, you'll want to implement the VideoPlayerEvents.OnFullscreenListener on your Activity to receive a callback whenever the player is going to fullscreen. At that moment, you may need to hide the ActionBar and set any custom UI elements back to visible. @Override public void onFullscreen(boolean state) { if (state) { getActionBar().hide(); findViewById(R.id.custom_ui).setVisibility(View.VISIBLE); } else { getActionBar().show(); } /* If the root layout of this activity is the coordinator layout (default for new projects created in Android Studio 2.0+) Then we also want to unset fitsSystemWindows */ ((CoordinatorLayout)findViewById({ID_OF_ROOT_LAYOUT})).setFitsSystemWindows(!state); }","title":"JWPlayerView"},{"location":"usage/jwplayer-view/#jwplayerview","text":"The JWPlayerView is the central UI component of our SDK. This class allows you to easily load new media into the player, manage video and audio playback via the Playback API and register multiple event listeners that could help you with custom analytics or error handling.","title":"JWPlayerView"},{"location":"usage/jwplayer-view/#adding-a-jwplayerview-to-your-xml-layout","text":"The JWPlayerView is available in the Graphical Layout Editor of Android Studio by navigating to Custom Custom Views in your palette. You can also add the view to your layout by adding these lines to your XML layout com.longtailvideo.jwplayer.JWPlayerView xmlns:jwp= http://schemas.android.com/apk/lib/com.longtailvideo.jwplayer android:layout_width= match_parent android:layout_height= match_parent android:id= @+id/playerView jwp:jw_autostart= true / An important thing to notice here is the jwp namespace. It allows you to setup your player with default settings such as autostart, file, repeat and more. For a full list of available options have a look at our XML options page. Once you have the JWPlayerView in your layout, you can now get a reference to it by using findViewById() . JWPlayerView playerView = (JWPlayerView) findViewById(R.id.playerView);","title":"Adding a JWPlayerView to your XML layout"},{"location":"usage/jwplayer-view/#instantiating-a-jwplayerview-programmatically","text":"Instead of adding the JWPlayerView to your XML layout, you may also choose to programmatically instantiate it at any point. Programmatic instantiation requires you to build a PlayerConfig first. The PlayerConfig tells the player which features you'd like to setup with. PlayerConfig playerConfig = new PlayerConfig.Builder() .file( http://www.site.com/video/clip.mp4 ) .autostart(true) .build(); After instantiating the PlayerConfig you can then construct a JWPlayerView JWPlayerView playerView = new JWPlayerView(context, playerConfig); Finally, you must add the JWPlayerView to a ViewGroup ViewGroup jwPlayerViewContainer = (ViewGroup) findViewById(R.id.jwPlayerContainer); jwPlayerViewContainer.addView(playerView);","title":"Instantiating a JWPlayerView programmatically"},{"location":"usage/jwplayer-view/#activity-lifecycle-handling","text":"In order to properly handle the Activity Lifecycle and release the player from memory when necessary, you must override the onPause() , onResume() and onDestroy() methods of the Activity containing the JWPlayerView as shown below. This configuration is not necessary when using JWPlayerFragment or JWPlayerSupportFragment since we already handle the lifecycle methods in those scenarios. @Override protected void onResume() { // Let JW Player know that the app has returned from the background super.onResume(); playerView.onResume(); } @Override protected void onPause() { // Let JW Player know that the app is going to the background playerView.onPause(); super.onPause(); } @Override protected void onDestroy() { // Let JW Player know that the app is being destroyed playerView.onDestroy(); super.onDestroy(); }","title":"Activity Lifecycle Handling"},{"location":"usage/jwplayer-view/#orientation-changes-and-fullscreen-handling","text":"Handling orientation changes to enter fullscreen is fairly simple. We begin by overriding the onConfigurationChanged() method of the Activity containing the player and setting the player to fullscreen whenever the device is in landscape. @Override public void onConfigurationChanged(Configuration newConfig) { // Set fullscreen when the device is rotated to landscape playerView.setFullscreen(newConfig.orientation == Configuration.ORIENTATION_LANDSCAPE, true); super.onConfigurationChanged(newConfig); } Next, it is good practice to override the onKeyDown() method as well. This allow users to exit fullscreen whenever the back button is pressed. @Override public boolean onKeyDown(int keyCode, KeyEvent event) { // Exit fullscreen when the user pressed the Back button if (keyCode == KeyEvent.KEYCODE_BACK) { if (playerView.getFullscreen()) { playerView.setFullscreen(false, false); return false; } } return super.onKeyDown(keyCode, event); } Lastly, you'll want to implement the VideoPlayerEvents.OnFullscreenListener on your Activity to receive a callback whenever the player is going to fullscreen. At that moment, you may need to hide the ActionBar and set any custom UI elements back to visible. @Override public void onFullscreen(boolean state) { if (state) { getActionBar().hide(); findViewById(R.id.custom_ui).setVisibility(View.VISIBLE); } else { getActionBar().show(); } /* If the root layout of this activity is the coordinator layout (default for new projects created in Android Studio 2.0+) Then we also want to unset fitsSystemWindows */ ((CoordinatorLayout)findViewById({ID_OF_ROOT_LAYOUT})).setFitsSystemWindows(!state); }","title":"Orientation Changes and Fullscreen Handling"}]}